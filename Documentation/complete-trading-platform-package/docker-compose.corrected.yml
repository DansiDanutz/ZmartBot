version: '3.8'

# Trade Strategy Module - Docker Compose Configuration (CORRECTED)
# ================================================================
# 
# Complete Docker orchestration with CORRECTED profit calculation logic.
# Supports ZmartBot + KingFisher + Trade Strategy with zero port conflicts.
# Optimized for Mac Mini 2025 M2 Pro with Apple Silicon support.
#
# Author: Manus AI
# Version: 1.0 Professional Edition - CORRECTED PROFIT CALCULATIONS

services:
  # PostgreSQL Database (Shared)
  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: trading_platform
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/schemas:/docker-entrypoint-initdb.d/schemas
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_network

  # Redis Cache (Shared with Namespaces)
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - trading_network

  # ZmartBot API (Port 8000)
  zmartbot-api:
    build:
      context: ./zmartbot/backend/zmart-api
      dockerfile: Dockerfile
    container_name: zmartbot_api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_platform
      - REDIS_URL=redis://redis:6379/0
      - API_PORT=8000
      - API_HOST=0.0.0.0
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./config/zmartbot.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading_network

  # ZmartBot Frontend (Port 3000)
  zmartbot-frontend:
    build:
      context: ./zmartbot/frontend
      dockerfile: Dockerfile
    container_name: zmartbot_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - PORT=3000
    volumes:
      - ./logs:/app/logs
    depends_on:
      - zmartbot-api
    restart: unless-stopped
    networks:
      - trading_network

  # KingFisher API (Port 8100)
  kingfisher-api:
    build:
      context: ./kingfisher-platform/backend
      dockerfile: Dockerfile
    container_name: kingfisher_api
    ports:
      - "8100:8000"
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_platform
      - REDIS_URL=redis://redis:6379/1
      - API_PORT=8000
      - API_HOST=0.0.0.0
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./config/kingfisher.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading_network

  # KingFisher Frontend (Port 3100)
  kingfisher-frontend:
    build:
      context: ./kingfisher-platform/frontend
      dockerfile: Dockerfile
    container_name: kingfisher_frontend
    ports:
      - "3100:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8100
      - PORT=3000
    volumes:
      - ./logs:/app/logs
    depends_on:
      - kingfisher-api
    restart: unless-stopped
    networks:
      - trading_network

  # Trade Strategy API (Port 8200) - CORRECTED CALCULATIONS
  trade-strategy-api:
    build:
      context: ./trade-strategy-module
      dockerfile: Dockerfile
    container_name: trade_strategy_api
    ports:
      - "8200:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_platform
      - REDIS_URL=redis://redis:6379/2
      
      # API Configuration
      - API_PORT=8000
      - API_HOST=0.0.0.0
      - ENVIRONMENT=production
      
      # CORRECTED: Profit Calculation Settings
      - PROFIT_THRESHOLD_PERCENTAGE=75
      - PROFIT_CALCULATION_METHOD=total_invested_based
      - PROFIT_BASE=total_invested_amount
      - SCALING_BANKROLL_PERCENTAGES=1,2,4,8
      - LEVERAGE_SEQUENCE=20,10,5,2
      
      # Position Management (CORRECTED)
      - MAX_POSITIONS_PER_VAULT=2
      - INITIAL_BANKROLL_PERCENTAGE=1
      - DOUBLE_UP_PERCENTAGES=2,4,8
      - LEVERAGE_PROGRESSION=20,10,5,2
      - PROFIT_TAKING_STAGES=30,25,45
      - TRAILING_STOP_PERCENTAGES=5,3
      
      # Risk Management
      - MAX_RISK_PER_VAULT=20
      - LIQUIDATION_BUFFER_PERCENTAGE=10
      - CORRELATION_THRESHOLD=70
      - MAX_DRAWDOWN_THRESHOLD=25
      
      # Signal Processing
      - MIN_SIGNAL_CONFIDENCE=65
      - MIN_CONSENSUS_SIGNALS=3
      - SIGNAL_QUALITY_THRESHOLD=70
      
      # Performance Monitoring
      - PERFORMANCE_UPDATE_INTERVAL=3600
      - METRICS_RETENTION_DAYS=90
      - BACKUP_INTERVAL_HOURS=6
      
      # Mac Mini 2025 M2 Pro Optimizations
      - WORKER_PROCESSES=8
      - MAX_CONNECTIONS=100
      - MEMORY_LIMIT=4GB
      - CPU_AFFINITY=0-11
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - LOG_ROTATION=daily
      - LOG_RETENTION_DAYS=30
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_here}
      - API_KEY_HEADER=X-API-Key
      - RATE_LIMIT_PER_MINUTE=100
      
    volumes:
      - ./logs:/app/logs
      - ./config/trade_strategy_corrected.env:/app/.env
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading_network

  # Trade Strategy Frontend (Port 3200)
  trade-strategy-frontend:
    build:
      context: ./trade-strategy-module/frontend
      dockerfile: Dockerfile
    container_name: trade_strategy_frontend
    ports:
      - "3200:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8200
      - REACT_APP_PROFIT_CALCULATION_METHOD=total_invested_based
      - REACT_APP_PROFIT_THRESHOLD_PCT=75
      - REACT_APP_SCALING_STAGES=1,2,4,8
      - REACT_APP_LEVERAGE_SEQUENCE=20,10,5,2
      - PORT=3000
    volumes:
      - ./logs:/app/logs
    depends_on:
      - trade-strategy-api
    restart: unless-stopped
    networks:
      - trading_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - trading_network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - trading_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs:/var/log/nginx
    depends_on:
      - zmartbot-api
      - kingfisher-api
      - trade-strategy-api
    restart: unless-stopped
    networks:
      - trading_network

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: trading_db_backup
    environment:
      - POSTGRES_DB=trading_platform
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_pass
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup-db.sh:/backup-db.sh
    command: sh -c "chmod +x /backup-db.sh && crond -f"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - trading_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

