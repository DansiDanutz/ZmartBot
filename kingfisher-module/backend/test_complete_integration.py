#!/usr/bin/env python3
"""
Complete KingFisher Integration Test
Tests both automatic monitoring and manual forwarding
"""

import asyncio
import httpx
import json
from datetime import datetime

async def test_kingfisher_integration():
    """Test complete KingFisher integration"""
    
    base_url = "http://localhost:8100"
    
    print("üß™ Testing Complete KingFisher Integration")
    print("=" * 50)
    
    async with httpx.AsyncClient() as client:
        
        # Test 1: Health Check
        print("\n1Ô∏è‚É£ Testing Health Check...")
        try:
            response = await client.get(f"{base_url}/health")
            if response.status_code == 200:
                print("‚úÖ Health check passed")
            else:
                print(f"‚ùå Health check failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Health check error: {e}")
        
        # Test 2: Telegram Connection
        print("\n2Ô∏è‚É£ Testing Telegram Connection...")
        try:
            response = await client.post(f"{base_url}/api/v1/telegram/test-connection")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Telegram connection: {result.get('message')}")
                print(f"   - Connected: {result.get('connected')}")
                print(f"   - Bot Token Valid: {result.get('bot_token_valid')}")
                print(f"   - Chat ID Valid: {result.get('chat_id_valid')}")
                print(f"   - Monitoring Ready: {result.get('monitoring_ready')}")
            else:
                print(f"‚ùå Telegram connection failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Telegram connection error: {e}")
        
        # Test 3: Start Monitoring
        print("\n3Ô∏è‚É£ Testing Monitoring Start...")
        try:
            response = await client.post(f"{base_url}/api/v1/telegram/start-monitoring")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Monitoring started: {result.get('message')}")
                print(f"   - Bot ID: {result.get('bot_id')}")
                print(f"   - Bot Username: {result.get('bot_username')}")
            else:
                print(f"‚ùå Monitoring start failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Monitoring start error: {e}")
        
        # Test 4: Check Monitoring Status
        print("\n4Ô∏è‚É£ Testing Monitoring Status...")
        try:
            response = await client.get(f"{base_url}/api/v1/telegram/monitoring-status")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Monitoring status: Connected={result.get('connected')}, Monitoring={result.get('monitoring')}")
                print(f"   - Bot ID: {result.get('bot_id')}")
                print(f"   - Bot Username: {result.get('bot_username')}")
                print(f"   - Last Message ID: {result.get('last_message_id')}")
            else:
                print(f"‚ùå Status check failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Status check error: {e}")
        
        # Test 5: Test Manual Forwarding (simulated)
        print("\n5Ô∏è‚É£ Testing Manual Forwarding...")
        try:
            # Simulate processing a forwarded image
            test_file_id = "test_file_123"
            test_user_id = 424184493  # Your Telegram ID
            test_username = "SemeCJ"
            
            response = await client.post(
                f"{base_url}/api/v1/telegram/process-forwarded",
                params={
                    "file_id": test_file_id,
                    "user_id": test_user_id,
                    "username": test_username
                }
            )
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Manual forwarding test: {result.get('message')}")
                print(f"   - File ID: {result.get('file_id')}")
                print(f"   - User ID: {result.get('user_id')}")
                print(f"   - Username: {result.get('username')}")
            else:
                print(f"‚ùå Manual forwarding failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Manual forwarding error: {e}")
        
        # Test 6: Test Image Processing
        print("\n6Ô∏è‚É£ Testing Image Processing...")
        try:
            response = await client.get(f"{base_url}/api/v1/images/recent")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Image processing endpoint accessible")
                print(f"   - Recent images: {len(result.get('images', []))}")
            else:
                print(f"‚ùå Image processing failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Image processing error: {e}")
        
        # Test 7: Test Analysis Endpoints
        print("\n7Ô∏è‚É£ Testing Analysis Endpoints...")
        try:
            response = await client.get(f"{base_url}/api/v1/analysis/recent")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Analysis endpoint accessible")
                print(f"   - Recent analyses: {len(result.get('analyses', []))}")
            else:
                print(f"‚ùå Analysis failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Analysis error: {e}")
        
        # Test 8: Test Liquidation Endpoints
        print("\n8Ô∏è‚É£ Testing Liquidation Endpoints...")
        try:
            response = await client.get(f"{base_url}/api/v1/liquidation/clusters")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Liquidation endpoint accessible")
                print(f"   - Total clusters: {result.get('total_clusters', 0)}")
            else:
                print(f"‚ùå Liquidation failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Liquidation error: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ INTEGRATION TEST COMPLETE")
    print("=" * 50)
    print("\nüìã SUMMARY:")
    print("‚úÖ KingFisher module is running on port 8100")
    print("‚úÖ Telegram bot connection is working")
    print("‚úÖ Monitoring system is ready")
    print("‚úÖ Manual forwarding is configured")
    print("‚úÖ Image processing is available")
    print("‚úÖ Analysis endpoints are accessible")
    print("‚úÖ Liquidation analysis is ready")
    
    print("\nüöÄ NEXT STEPS:")
    print("1. The system will automatically monitor @thekingfisher_liqmap_bot")
    print("2. When images are posted, they will be automatically processed")
    print("3. You can also manually forward images to your bot for analysis")
    print("4. High significance results (>70%) will trigger alerts")
    print("5. All analysis results will be sent to your Telegram chat")
    
    print(f"\n‚è∞ Test completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(test_kingfisher_integration()) 