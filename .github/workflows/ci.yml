name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: zmart-api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps (if requirements exist)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest ruff
          fi
      - name: Lint (ruff)
        run: |
          if command -v ruff >/dev/null 2>&1; then
            ruff check . || true
          fi
      - name: Tests (pytest)
        run: |
          if [ -d tests ]; then
            pytest -q
          else
            echo "No tests directory; skipping."
          fi

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Build dashboard (if present)
        shell: bash
        run: |
          if [ -d "zmart-platform/frontend/zmart-dashboard" ]; then
            cd zmart-platform/frontend/zmart-dashboard
          elif [ -d "frontend/zmart-dashboard" ]; then
            cd frontend/zmart-dashboard
          else
            echo "No frontend directory found; skipping." && exit 0
          fi
          npm ci || npm install --legacy-peer-deps
          npm run build

  rules-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify .cursor/rules exist
        run: |
          test -d .cursor/rules || (echo ".cursor/rules missing" && exit 1)
          test -f .cursor/rules/rule_0_mandatory.mdc || (echo "Rule 0 missing" && exit 1)
          test -f .cursor/rules/MDCAgent.mdc || (echo "MDCAgent missing" && exit 1)
          test -f .cursor/rules/MonitoringMDC.mdc || (echo "MonitoringMDC missing" && exit 1)
          echo "✅ All required MDC files present"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Gitleaks
        run: |
          curl -sSfL https://raw.githubusercontent.com/zricethezav/gitleaks/master/install.sh | sh -s -- -b /usr/local/bin
      - name: Install Detect-Secrets
        run: |
          python -m pip install detect-secrets
      - name: Run Gitleaks
        run: |
          gitleaks detect --source . --report-format json --report-path gitleaks-report.json || true
      - name: Run Detect-Secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline . || true
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-report
          path: gitleaks-report.json
      - name: Check for secrets
        run: |
          if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
            echo "❌ Secrets detected! Check the gitleaks-report.json artifact"
            exit 1
          else
            echo "✅ No secrets detected"
          fi
