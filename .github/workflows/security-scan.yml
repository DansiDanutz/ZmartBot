name: Security Scan

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for gitleaks
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install detect-secrets
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets
    
    - name: Install gitleaks
      run: |
        curl -sSfL https://raw.githubusercontent.com/zricethezav/gitleaks/master/install.sh | sh -s -- -b /usr/local/bin
        gitleaks version
    
    - name: Run Gitleaks Scan
      run: |
        echo "Running Gitleaks scan..."
        gitleaks detect \
          --config .gitleaks.toml \
          --source . \
          --report-format json \
          --report-path gitleaks-report.json \
          --verbose \
          --no-git || true
        
        if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
          echo "❌ Gitleaks found potential secrets!"
          cat gitleaks-report.json
          exit 1
        else
          echo "✅ Gitleaks scan completed - no secrets found"
        fi
    
    - name: Run Detect-Secrets Scan
      run: |
        echo "Running Detect-Secrets scan..."
        
        # Initialize baseline if it doesn't exist
        if [ ! -f .secrets.baseline ]; then
          detect-secrets scan --baseline .secrets.baseline --update .
        fi
        
        # Run scan and update baseline
        detect-secrets scan --baseline .secrets.baseline --update --exclude-files .secrets.baseline .
        
        # Check for unverified secrets
        if detect-secrets audit --baseline .secrets.baseline --report | grep -q "UNVERIFIED"; then
          echo "❌ Detect-Secrets found potential secrets!"
          detect-secrets audit --baseline .secrets.baseline --report
          exit 1
        else
          echo "✅ Detect-Secrets scan completed - no new secrets found"
        fi
    
    - name: Run Custom Security Checks
      run: |
        echo "Running custom ZmartBot security checks..."
        
        # Check for hardcoded API keys
        if grep -r -iE "(api[_-]?key|apikey|api_key)[\s]*[=:][\s]*[\"']?[a-zA-Z0-9]{32,}[\"']?" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=venv --exclude-dir=__pycache__ --exclude-dir=backups --exclude-dir=cache --exclude-dir=logs --exclude-dir=tmp --exclude-dir=temp --exclude-dir=test --exclude-dir=tests --exclude-dir=examples --exclude-dir=docs --exclude-dir=documentation --exclude-dir=screenshots --exclude-dir=images --exclude-dir=assets --exclude-dir=static --exclude-dir=public --exclude-dir=dist --exclude-dir=build --exclude-dir=coverage --exclude-dir=.pytest_cache --exclude-dir=.mypy_cache --exclude-dir=.tox --exclude-dir=.venv --exclude-dir=env --exclude=*.md --exclude=*.txt --exclude=*.json --exclude=*.yml --exclude=*.yaml --exclude=.env.example --exclude=config.example --exclude=settings.example; then
          echo "❌ Potential API keys found in code!"
          exit 1
        fi
        
        # Check for database URLs
        if grep -r -iE "(database_url|db_url|connection_string)[\s]*[=:][\s]*[\"']?[a-zA-Z]+://[^\s\"']+[\"']?" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=venv --exclude-dir=__pycache__ --exclude-dir=backups --exclude-dir=cache --exclude-dir=logs --exclude-dir=tmp --exclude-dir=temp --exclude-dir=test --exclude-dir=tests --exclude-dir=examples --exclude-dir=docs --exclude-dir=documentation --exclude-dir=screenshots --exclude-dir=images --exclude-dir=assets --exclude-dir=static --exclude-dir=public --exclude-dir=dist --exclude-dir=build --exclude-dir=coverage --exclude-dir=.pytest_cache --exclude-dir=.mypy_cache --exclude-dir=.tox --exclude-dir=.venv --exclude-dir=env --exclude=*.md --exclude=*.txt --exclude=*.json --exclude=*.yml --exclude=*.yaml --exclude=.env.example --exclude=config.example --exclude=settings.example; then
          echo "❌ Potential database URLs found in code!"
          exit 1
        fi
        
        # Check for private keys
        if grep -r -iE "(-----BEGIN.*PRIVATE KEY-----|-----BEGIN.*RSA PRIVATE KEY-----)" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=venv --exclude-dir=__pycache__ --exclude-dir=backups --exclude-dir=cache --exclude-dir=logs --exclude-dir=tmp --exclude-dir=temp --exclude-dir=test --exclude-dir=tests --exclude-dir=examples --exclude-dir=docs --exclude-dir=documentation --exclude-dir=screenshots --exclude-dir=images --exclude-dir=assets --exclude-dir=static --exclude-dir=public --exclude-dir=dist --exclude-dir=build --exclude-dir=coverage --exclude-dir=.pytest_cache --exclude-dir=.mypy_cache --exclude-dir=.tox --exclude-dir=.venv --exclude-dir=env --exclude=*.md --exclude=*.txt --exclude=*.json --exclude=*.yml --exclude=*.yaml --exclude=.env.example --exclude=config.example --exclude=settings.example; then
          echo "❌ Potential private keys found in code!"
          exit 1
        fi
        
        echo "✅ Custom security checks completed - no secrets found"
    
    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          gitleaks-report.json
          .secrets.baseline
        retention-days: 30
    
    - name: Security Scan Summary
      if: always()
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
          echo "❌ **Gitleaks**: Found potential secrets" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Gitleaks**: No secrets found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if detect-secrets audit --baseline .secrets.baseline --report 2>/dev/null | grep -q "UNVERIFIED"; then
          echo "❌ **Detect-Secrets**: Found potential secrets" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Detect-Secrets**: No new secrets found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Custom Checks**: Completed" >> $GITHUB_STEP_SUMMARY
