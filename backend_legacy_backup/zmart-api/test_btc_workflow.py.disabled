#!/usr/bin/env python3
"""
BTC Workflow Test Script
Verifies the complete mathematical workflow for BTC
"""

import requests
import math
from life_age_updater import get_life_age
from risk_band_updater import get_risk_bands_data, get_risk_band

def test_btc_workflow():
    """Test the complete BTC workflow"""
    print("üîç BTC Workflow Verification")
    print("=" * 50)
    
    # Step 1: Get Life Age
    life_age = get_life_age('BTC')
    print(f"1. ‚úÖ BTC Life Age: {life_age} days")
    
    # Step 2: Get Risk Bands Data
    risk_bands = get_risk_bands_data('BTC')
    total_risk_band_days = sum(band['days'] for band in risk_bands.values())
    print(f"2. ‚úÖ Risk Bands Total Days: {total_risk_band_days}")
    
    # Step 3: Validate Sum = Life Age
    validation = total_risk_band_days == life_age
    print(f"3. ‚úÖ Validation: Total Days ({total_risk_band_days}) == Life Age ({life_age}): {validation}")
    
    if not validation:
        print("‚ùå CRITICAL ERROR: Risk bands sum does not equal Life Age!")
        return False
    
    # Step 4: Get Current Price and Calculate Risk Value
    try:
        response = requests.get('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT', timeout=10)
        price_data = response.json()
        current_price = float(price_data['price'])
        print(f"4. ‚úÖ Current BTC Price: ${current_price:,.2f}")
        
        # Calculate risk value using polynomial formula
        a0 = -0.380790057100
        a1 = 1.718335491963e-5
        a2 = -1.213364209168e-10
        a3 = 4.390647720677e-16
        a4 = -5.830886880671e-22
        
        P = current_price
        risk_value = a0 + a1*P + a2*P*P + a3*P*P*P + a4*P*P*P*P
        risk_value = max(0, min(1, risk_value))  # Clamp to 0-1
        
        print(f"5. ‚úÖ Calculated Risk Value: {risk_value:.3f}")
        
        # Step 5: Determine Current Risk Band
        current_band = get_risk_band(risk_value)
        print(f"6. ‚úÖ Current Risk Band: {current_band}")
        
        # Step 6: Calculate Coefficient using new linear interpolation system
        from risk_coefficient import get_coefficient
        
        # Calculate coefficient using new system (assuming second day in same band)
        coefficient = get_coefficient(
            risk_value=risk_value,
            previous_risk_band=current_band,  # Same band
            last_band_change_date="2025-08-12"  # Previous day
        )
        # Define band-specific coefficient ranges
        band_coefficient_ranges = {
            "0.0-0.1": (1.538, 1.538),  # Single value
            "0.1-0.2": (1.221, 1.221),  # Single value
            "0.2-0.3": (1.157, 1.157),  # Single value
            "0.3-0.4": (1.000, 1.000),  # Single value
            "0.4-0.5": (1.016, 1.016),  # Single value
            "0.5-0.6": (1.101, 1.411),  # Range
            "0.6-0.7": (1.411, 1.537),  # Range
            "0.7-0.8": (1.537, 1.568),  # Range
            "0.8-0.9": (1.568, 1.600),  # Range
            "0.9-1.0": (1.600, 1.600)   # Single value
        }
        
        # Get the range for current band
        current_band_range = band_coefficient_ranges.get(current_band, (1.0, 1.6))
        min_coef, max_coef = current_band_range
        
        print(f"7. ‚úÖ Calculated Coefficient: {coefficient:.6f}")
        print(f"   ‚úÖ Band Range: {min_coef:.3f} ‚â§ {coefficient:.6f} ‚â§ {max_coef:.3f}: {min_coef <= coefficient <= max_coef}")
        
        # Step 7: Calculate Base Score
        def calculate_base_score(risk_value):
            if risk_value <= 0.25 or risk_value >= 0.75:
                return 100
            elif (risk_value > 0.25 and risk_value <= 0.40) or (risk_value >= 0.60 and risk_value < 0.75):
                return 80
            else:  # 0.40 < risk_value < 0.60
                return 70
        
        base_score = calculate_base_score(risk_value)
        print(f"8. ‚úÖ Base Score: {base_score} points")
        
        # Step 8: Calculate Final Score
        final_score = base_score * coefficient
        print(f"9. ‚úÖ Final Score: {base_score} √ó {coefficient} = {final_score:.2f}")
        
        # Step 9: Show Risk Bands Breakdown
        print("\nüìä Risk Bands Breakdown:")
        for band, info in risk_bands.items():
            print(f"   {band}: {info['days']} days ({info['percentage']:.2f}%)")
        
        # Step 10: Verify Current Band Data
        current_band_data = risk_bands.get(current_band, {})
        print(f"\nüéØ Current Band ({current_band}) Data:")
        print(f"   Days: {current_band_data.get('days', 0)}")
        print(f"   Percentage: {current_band_data.get('percentage', 0):.2f}%")
        
        print("\n‚úÖ BTC Workflow Verification COMPLETE!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error in workflow test: {e}")
        return False

if __name__ == "__main__":
    test_btc_workflow()
