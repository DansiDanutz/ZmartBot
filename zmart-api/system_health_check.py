#!/usr/bin/env python3
"""
ZmartBot System Health Check
Auto-generated by Claude Doctor
"""

import subprocess
import requests
import psutil
import json
import sys
from datetime import datetime
from pathlib import Path

class HealthChecker:
    def __init__(self):
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "status": "healthy",
            "checks": {}
        }

    def check_service_port(self, name, port, endpoint="/health"):
        """Check if a service is running on a specific port"""
        try:
            response = requests.get(f"http://localhost:{port}{endpoint}", timeout=2)
            if response.status_code == 200:
                self.results["checks"][name] = {
                    "status": "✅ Running",
                    "port": port,
                    "response": response.json() if response.text else "OK"
                }
                return True
        except:
            pass

        self.results["checks"][name] = {
            "status": "❌ Not Running",
            "port": port
        }
        return False

    def check_database(self):
        """Check PostgreSQL connectivity"""
        try:
            result = subprocess.run(
                ["nc", "-zv", "localhost", "5432"],
                capture_output=True,
                text=True,
                timeout=2
            )
            if result.returncode == 0:
                self.results["checks"]["PostgreSQL"] = {
                    "status": "✅ Connected",
                    "port": 5432
                }
                return True
        except:
            pass

        self.results["checks"]["PostgreSQL"] = {
            "status": "❌ Not Connected",
            "port": 5432
        }
        return False

    def check_python_env(self):
        """Check Python environment"""
        import sys
        self.results["checks"]["Python"] = {
            "status": "✅ Active",
            "version": sys.version.split()[0],
            "virtual_env": sys.prefix if hasattr(sys, 'real_prefix') or sys.base_prefix != sys.prefix else None
        }
        return True

    def check_disk_space(self):
        """Check available disk space"""
        usage = psutil.disk_usage('/')
        free_gb = usage.free / (1024**3)

        if free_gb > 10:
            status = "✅ Sufficient"
        elif free_gb > 5:
            status = "⚠️  Low"
        else:
            status = "❌ Critical"

        self.results["checks"]["Disk Space"] = {
            "status": status,
            "free_gb": round(free_gb, 2),
            "percent_used": usage.percent
        }
        return free_gb > 5

    def check_memory(self):
        """Check available memory"""
        memory = psutil.virtual_memory()
        available_gb = memory.available / (1024**3)

        if memory.percent < 80:
            status = "✅ Sufficient"
        elif memory.percent < 90:
            status = "⚠️  High Usage"
        else:
            status = "❌ Critical"

        self.results["checks"]["Memory"] = {
            "status": status,
            "available_gb": round(available_gb, 2),
            "percent_used": memory.percent
        }
        return memory.percent < 90

    def run_all_checks(self):
        """Run all health checks"""
        print("🏥 Running ZmartBot System Health Check...\n")

        # Check core services
        services = [
            ("Main API", 8000),
            ("API Keys Manager", 8006),
            ("Control UI", 5000),
            ("WebSocket Server", 8080)
        ]

        for name, port in services:
            self.check_service_port(name, port)

        # Check system resources
        self.check_database()
        self.check_python_env()
        self.check_disk_space()
        self.check_memory()

        # Determine overall status
        critical_services = ["Main API", "PostgreSQL"]
        for service in critical_services:
            if service in self.results["checks"]:
                if "❌" in str(self.results["checks"][service].get("status", "")):
                    self.results["status"] = "unhealthy"
                    break

        # Print results
        print("=" * 50)
        print(f"Status: {'✅ HEALTHY' if self.results['status'] == 'healthy' else '❌ UNHEALTHY'}")
        print(f"Timestamp: {self.results['timestamp']}")
        print("=" * 50)

        for check, details in self.results["checks"].items():
            print(f"\n{check}:")
            for key, value in details.items():
                print(f"  {key}: {value}")

        # Save results to file
        results_file = Path("logs/health_check.json")
        results_file.parent.mkdir(exist_ok=True)
        with open(results_file, "w") as f:
            json.dump(self.results, f, indent=2, default=str)

        print(f"\n📊 Full report saved to: {results_file}")

        return self.results["status"] == "healthy"

if __name__ == "__main__":
    checker = HealthChecker()
    success = checker.run_all_checks()
    sys.exit(0 if success else 1)