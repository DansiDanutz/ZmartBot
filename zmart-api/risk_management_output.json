{
  "mdc_content": "# zmart-risk-management.mdc\n> Purpose: Comprehensive risk management and analysis service for ZmartBot trading system with advanced risk metrics, portfolio monitoring, and automated risk controls.\n\n## Service Overview\n**zmart_risk_management** is a sophisticated backend service that provides comprehensive risk management capabilities for the ZmartBot trading system. It calculates and monitors various risk metrics, provides portfolio risk assessment, and implements automated risk controls to protect trading capital.\n\n## Architecture\n**Type**: Backend Service (FastAPI-based)\n**Port**: 8010\n**Language**: Python 3.11+\n**Framework**: FastAPI, SQLAlchemy, Pandas, NumPy\n**Database**: PostgreSQL (risk metrics), Redis (caching)\n\n### Core Components\n- **Risk Calculation Engine**: Real-time risk metric computation\n- **Portfolio Monitor**: Continuous portfolio risk assessment\n- **Alert System**: Risk threshold monitoring and notifications\n- **Data Integration Layer**: Connects to trading APIs and databases\n- **Risk Analytics API**: RESTful API for risk data access\n\n## API Endpoints\n\n### Risk Calculation Endpoints\n- `POST /api/v1/risk/calculate-var` - Calculate Value at Risk\n- `POST /api/v1/risk/calculate-sharpe` - Calculate Sharpe Ratio\n- `POST /api/v1/risk/calculate-drawdown` - Calculate Maximum Drawdown\n- `POST /api/v1/risk/portfolio-assessment` - Full portfolio risk assessment\n- `GET /api/v1/risk/metrics/{symbol}` - Get risk metrics for symbol\n\n### Monitoring Endpoints\n- `GET /api/v1/risk/alerts` - Get active risk alerts\n- `POST /api/v1/risk/alerts/configure` - Configure risk alert thresholds\n- `GET /api/v1/risk/dashboard` - Risk dashboard data\n- `GET /api/v1/risk/reports` - Generate risk reports\n\n### Health & Status\n- `GET /health` - Service health check\n- `GET /ready` - Service readiness check\n- `GET /metrics` - Prometheus metrics\n- `GET /startup` - Startup probe endpoint\n\n## Risk Metrics\n\n### Value at Risk (VaR)\n- **95% VaR**: Maximum expected loss over 1-day period\n- **99% VaR**: Maximum expected loss over 1-day period (higher confidence)\n- **Historical VaR**: Based on historical price movements\n- **Parametric VaR**: Based on statistical distributions\n\n### Expected Shortfall (ES)\n- **Conditional VaR**: Expected loss beyond VaR threshold\n- **Tail Risk Measurement**: Captures extreme loss scenarios\n\n### Sharpe Ratio\n- **Risk-Adjusted Returns**: Return per unit of risk\n- **Benchmark Comparison**: Against risk-free rate\n- **Time Periods**: 1-day, 1-week, 1-month, 1-year\n\n### Maximum Drawdown\n- **Peak-to-Trough**: Maximum loss from peak to subsequent trough\n- **Recovery Time**: Time to recover from drawdown\n- **Drawdown Duration**: Length of drawdown periods\n\n### Volatility Metrics\n- **Historical Volatility**: Standard deviation of returns\n- **Implied Volatility**: Market-implied volatility\n- **Realized Volatility**: Actual volatility over time period\n\n### Correlation Analysis\n- **Portfolio Correlation**: Asset correlation matrix\n- **Market Correlation**: Correlation with market indices\n- **Sector Correlation**: Industry sector correlations\n\n## Integration\n\n### Dependencies\n- **zmart-api**: Trading data and market information\n- **mysymbols**: Portfolio and symbol management\n- **api-keys-manager-service**: Secure API access to external providers\n\n### External Integrations\n- **Trading Platforms**: KuCoin, Binance for real-time data\n- **Risk Data Providers**: Bloomberg, Reuters for market data\n- **Analytics Services**: Advanced risk modeling tools\n\n### Data Flow\n1. **Market Data Ingestion**: Real-time price and volume data\n2. **Portfolio Data Sync**: Current positions and holdings\n3. **Risk Calculation**: Real-time risk metric computation\n4. **Alert Generation**: Risk threshold monitoring\n5. **Dashboard Updates**: Risk visualization and reporting\n\n## Configuration\n\n### Environment Variables\n```bash\nRISK_DB_HOST=localhost\nRISK_DB_PORT=5432\nRISK_DB_NAME=zmart_risk\nRISK_DB_USER=risk_user\nRISK_DB_PASSWORD=secure_password\nREDIS_HOST=localhost\nREDIS_PORT=6379\nAPI_RATE_LIMIT=1000\nRISK_CALCULATION_INTERVAL=60\nALERT_CHECK_INTERVAL=30\n```\n\n### Risk Thresholds\n```yaml\nvar_thresholds:\n  warning: 0.02  # 2% VaR warning\n  critical: 0.05  # 5% VaR critical\n  emergency: 0.10 # 10% VaR emergency\n\ndrawdown_thresholds:\n  warning: 0.05   # 5% drawdown warning\n  critical: 0.15  # 15% drawdown critical\n  emergency: 0.25 # 25% drawdown emergency\n\nvolatility_thresholds:\n  warning: 0.30   # 30% volatility warning\n  critical: 0.50  # 50% volatility critical\n  emergency: 0.75 # 75% volatility emergency\n```\n\n## Monitoring\n\n### Health Checks\n- **Liveness**: Service is running and responsive\n- **Readiness**: Service is ready to handle requests\n- **Startup**: Service has completed initialization\n\n### Metrics\n- **Risk Calculation Latency**: Time to compute risk metrics\n- **Alert Generation Rate**: Number of alerts per minute\n- **API Response Time**: Endpoint response times\n- **Database Connection Pool**: Connection pool utilization\n- **Memory Usage**: Service memory consumption\n- **CPU Usage**: Service CPU utilization\n\n### Logging\n- **Structured Logs**: JSON format for easy parsing\n- **Log Levels**: DEBUG, INFO, WARNING, ERROR, CRITICAL\n- **Risk Events**: All risk calculations and alerts logged\n- **Performance Metrics**: API performance and timing data\n\n## Security\n\n### Authentication\n- **Service Token**: Required for all API access\n- **API Key Validation**: Secure API key management\n- **Rate Limiting**: 1000 requests per minute\n- **Burst Protection**: 100 requests burst limit\n\n### Data Protection\n- **Encryption**: All data encrypted in transit and at rest\n- **Access Control**: Role-based access to risk data\n- **Audit Logging**: All risk operations logged\n- **Data Retention**: Configurable data retention policies\n\n### API Security\n- **HTTPS Only**: All API communication over HTTPS\n- **Input Validation**: Strict input validation and sanitization\n- **SQL Injection Protection**: Parameterized queries\n- **XSS Protection**: Output encoding and validation\n\n## Performance\n\n### SLOs (Service Level Objectives)\n- **Availability**: 99.9% uptime\n- **Response Time**: < 100ms for risk calculations\n- **Throughput**: 1000 risk calculations per minute\n- **Accuracy**: 99.5% accuracy in risk metrics\n\n### Resource Limits\n- **Memory**: 512MB maximum usage\n- **CPU**: 0.5 CPU cores\n- **Connections**: 50 concurrent database connections\n- **Request Timeout**: 30 seconds maximum\n\n### Optimization\n- **Caching**: Redis-based caching for frequent calculations\n- **Batch Processing**: Batch risk calculations for efficiency\n- **Async Processing**: Non-blocking risk computations\n- **Database Optimization**: Indexed queries and connection pooling\n\n## Failure Modes\n\n### Database Connection Failed\n**Symptoms**: Cannot connect to risk database\n**Impact**: Risk calculations unavailable\n**Remediation**: Check database connectivity, restart service\n**Prevention**: Connection pooling, health checks\n\n### API Rate Limit Exceeded\n**Symptoms**: Too many requests to external APIs\n**Impact**: Delayed risk data updates\n**Remediation**: Implement backoff strategy, check rate limits\n**Prevention**: Rate limiting, request queuing\n\n### Risk Calculation Failed\n**Symptoms**: Risk metrics calculation errors\n**Impact**: Incomplete risk assessment\n**Remediation**: Check input data validity, restart calculation engine\n**Prevention**: Input validation, error handling\n\n### Memory Exhaustion\n**Symptoms**: High memory usage during peak trading hours\n**Impact**: Service slowdown or crashes\n**Remediation**: Restart service if memory exceeds 80%\n**Prevention**: Memory monitoring, garbage collection optimization\n\n## Dependencies\n\n### Required Services\n- **zmart-api**: Trading data and market information\n- **mysymbols**: Portfolio and symbol management\n- **api-keys-manager-service**: Secure API access\n\n### External Dependencies\n- **PostgreSQL**: Risk metrics database\n- **Redis**: Caching and session storage\n- **Trading APIs**: Market data providers\n- **Risk Data Providers**: External risk analytics\n\n### System Requirements\n- **Python 3.11+**: Runtime environment\n- **FastAPI**: Web framework\n- **SQLAlchemy**: Database ORM\n- **Pandas/NumPy**: Data analysis and calculations\n- **Redis**: Caching layer\n\n## Orchestration\n\n### Auto Start\n- **Enabled**: Yes\n- **Dependencies**: zmart-api, mysymbols, api-keys-manager-service\n- **Startup Order**: After dependencies are ready\n\n### Restart Policy\n- **Policy**: Always restart on failure\n- **Max Restarts**: 5 attempts\n- **Restart Delay**: 10 seconds between attempts\n- **Backoff Strategy**: Exponential backoff\n\n### Health Monitoring\n- **Check Interval**: 10 seconds\n- **Timeout**: 5 seconds\n- **Failure Threshold**: 3 consecutive failures\n- **Recovery Threshold**: 1 successful check\n\n## Rollback\n\n### Snapshot Requirements\n- **Required**: Yes\n- **Frequency**: Before major risk model updates\n- **Data Included**: Risk calculations, thresholds, configurations\n- **Retention**: 30 days of snapshots\n\n### Rollback Strategy\n- **Strategy**: Immediate rollback on critical failures\n- **Data Consistency**: Full data consistency check\n- **Validation**: Risk metric validation after rollback\n- **Notification**: Alert stakeholders of rollback\n\n### Data Protection\n- **Backup Strategy**: Daily automated backups\n- **Recovery Time**: < 5 minutes\n- **Data Integrity**: Checksums and validation\n- **Point-in-Time Recovery**: Support for specific timestamps\n\n## Load Balancing\n\n### Configuration\n- **Enabled**: No (single instance)\n- **Pool**: null\n- **Reason**: Risk calculations require state consistency\n\n### Scaling Considerations\n- **Horizontal Scaling**: Not supported (stateful service)\n- **Vertical Scaling**: Memory and CPU upgrades\n- **Read Replicas**: Database read replicas for queries\n- **Caching**: Redis-based caching for performance\n\n## Known Issues\n\n### High Memory Usage\n**Issue**: High memory usage during peak trading hours\n**Status**: Monitoring\n**Impact**: Potential service slowdown\n**Workaround**: Restart service if memory exceeds 80%\n**Long-term Fix**: Memory optimization and garbage collection tuning\n\n### Calculation Latency\n**Issue**: Risk calculations can be slow during high volatility\n**Status**: Investigating\n**Impact**: Delayed risk alerts\n**Workaround**: Increase calculation intervals\n**Long-term Fix**: Algorithm optimization and caching\n\n### API Rate Limits\n**Issue**: External API rate limits can cause delays\n**Status**: Monitoring\n**Impact**: Delayed market data updates\n**Workaround**: Implement request queuing\n**Long-term Fix**: Multiple data provider integration\n\n## Status\n✅ **DISCOVERED** - Risk management service with comprehensive risk metrics, portfolio monitoring, and automated risk controls\n\n## Changelog\n- **1.0.0** (2025-08-25): Initial risk management service implementation\n  - Portfolio risk assessment\n  - Risk calculation engine\n  - Integration with trading APIs\n  - Risk alerts and notifications\n  - VaR, Sharpe Ratio, Drawdown calculations\n  - Correlation analysis and volatility monitoring\n\n---\ndescription: \"Risk management and analysis service for ZmartBot trading system\"\nglobs:\n  - \"**/*.py\"\n  - \"**/*.yaml\"\n  - \"**/*.yml\"\nalwaysApply: true\nseverity: \"info\"\ntags: [\"risk-management\", \"backend\", \"trading\", \"analytics\"]\nupdated: \"2025-08-25\"\n",
  "validation": {
    "schema_compliance": true,
    "content_completeness": true,
    "technical_accuracy": true,
    "format_correctness": true
  },
  "metadata": {
    "generated_at": "2025-08-25T01:20:00Z",
    "model": "gpt-5",
    "input_hash": "sha256-risk-management-service",
    "context_files": ["risk_management_context.json", "service.yaml"]
  }
}
