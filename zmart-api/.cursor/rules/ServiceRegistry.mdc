
## Description
Core service component of the ZmartBot ecosystem providing essential functionality.

@agent: ServiceRegistryAgent

## ðŸ¤– MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: âœ… **ACTIVE** - Service Registry MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered service registry management and optimization
- **Memory Gateway**: Persistent service registry state and metadata
- **UI Automation**: Automated service registry monitoring and health checks
- **Figma Integration**: Service registry dashboard design and UI management
- **Supabase Integration**: Cloud-based service registry analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Registry**: AI-powered service registry management and optimization
- **Persistent State**: Cross-session service registry state and configuration management
- **Automated Monitoring**: Real-time service registry health and performance tracking
- **Visual Dashboard**: Interactive service registry management and testing interface
- **Cloud Analytics**: Comprehensive service registry usage and performance analytics

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8000/service-registry/health"

# Service registry operation via MCP
curl -X POST "http://127.0.0.1:8000/service-registry/register" -d '{"service": "example", "action": "register"}'
```

### **MCP Status**
- **Claude Code**: âœ… Active - AI-powered service registry management
- **ByteRover**: âœ… Active - Persistent service registry state management
- **UI TARS**: âœ… Active - Automated service registry monitoring
- **Figma**: âœ… Active - Service registry dashboard design
- **Supabase**: âœ… Active - Cloud-based service registry analytics

---

# Service Registry â€“ Control Plane
Manages dynamic service discovery, unique ports, SAVE/UNDO profiles, and dependency-ordered startup.

## ðŸš¨ **MANDATORY ZMARTBOT SERVICE ARCHITECTURE WORKFLOW**

### **CRITICAL WORKFLOW RULES (FORBIDDEN TO IGNORE)**

**ðŸš¨ NO EXCUSES - SYSTEM WILL CRASH IF RULES ARE BROKEN**

#### **Rule 1: Service Definition**
- **ANY .py file = SERVICE**: Every Python file represents a service
- **MANDATORY MDC**: Every .py file MUST have an associated MDC file
- **SERVICE COUNTING**: All .py files are counted as services in the system

#### **Rule 2: Port Assignment (Port Manager)**
- **MANDATORY PORT**: Any service trying to connect with other services MUST receive a port from Port Manager
- **PORT DATABASE**: Port Manager assigns a FREE port different from stored ports in database
- **CONFLICT RESOLUTION**: If port conflict detected, Port Manager automatically assigns new port
- **PERSISTENCE**: Port assignment is persisted and cannot be changed without proper workflow

#### **Rule 3: Passport Assignment (Integration Gate)**
- **PASSPORT REQUIRED**: Service MUST receive a passport to be integrated into system
- **MDC PREREQUISITE**: Passport is ONLY accepted if the .py service has an associated MDC file
- **UNIQUE IDENTITY**: Each passport provides unique service identity and tracking
- **SYSTEM ACCESS**: Without passport, service cannot access system resources

#### **Rule 4: Registration Process (Final Stage)**
- **IMPLEMENTATION COMPLETE**: Service implementation must be done and tested
- **STRICT WORKFLOW**: Registration follows mandatory steps documented in StopStartCycle and NewService MDC files
- **SUCCESS VERIFICATION**: Only proceed if all steps are successful
- **FINAL STATUS**: Successful registration upgrades service to "REGISTERED" status

#### **Rule 5: Registered Service Requirements**
- **AUTOMATIC STARTUP**: All registered services MUST start when system starts
- **ORCHESTRATION INTEGRATION**: Services must be assigned to Master Orchestration Agent
- **SAFE LEARNING**: Services must integrate with Master Orchestration Agent's safe learning system
- **CERTIFICATION**: All registered services MUST receive a certificate from Certification Service

#### **Rule 6: System Protection**
- **PROTECTION TRIGGER**: After registration completion, Protection Service is automatically triggered
- **DELETION PREVENTION**: Protection Service prevents registered services from being deleted
- **SYSTEM INTEGRITY**: Protection ensures system architecture integrity

### **SERVICE REGISTRY RESPONSIBILITIES**
- **SERVICE REGISTRATION**: Service Registry manages registration of all services
- **PORT UNIQUENESS**: Service Registry enforces unique port assignments
- **PROFILE MANAGEMENT**: Service Registry manages SAVE/UNDO profiles
- **DEPENDENCY ORDERING**: Service Registry manages dependency-ordered startup
- **WORKFLOW ENFORCEMENT**: Service Registry enforces the mandatory workflow rules

## Endpoints (on 127.0.0.1:8610)
- GET /services
- GET /services/active
- GET /profiles/current
- GET /profiles/default
- POST /services/register (X-Token if REGISTRY_TOKEN set)
- POST /services/{name}/status
- POST /profiles/save
- POST /profiles/undo

## Contract
- Each service has a unique port (enforced by DB).
- STOP = SAVE: promote TESTEDâ†’ACTIVE and snapshot profile.
- UNDO: roll back to the previous profile.
- State snapshots include service configurations and cached data for smooth startup.
- Snapshot creation during STOP operations, loading and transition during START operations.

description:
globs:
alwaysApply: true

## Requirements
- âœ… **Unique port assignment**
- âœ… **Database connectivity**
- âœ… **Valid service passport**
- âœ… **Complete MDC documentation**
- âœ… **Master Orchestration integration**


---


## Triggers
- **API endpoint requests**
- **Database events**
- **Workflow transitions**
