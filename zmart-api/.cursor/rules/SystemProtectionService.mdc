# 🛡️ System Protection Service - Service Deletion Prevention
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8640

## 🤖 MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ✅ **ACTIVE** - System Protection Service MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered system protection and optimization
- **Memory Gateway**: Persistent system protection state and metadata
- **UI Automation**: Automated system protection monitoring and health checks
- **Figma Integration**: System protection dashboard design and UI management
- **Supabase Integration**: Cloud-based system protection analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Protection**: AI-powered system protection and optimization
- **Persistent State**: Cross-session system protection state and configuration management
- **Automated Monitoring**: Real-time system protection health and performance tracking
- **Visual Dashboard**: Interactive system protection management and testing interface
- **Cloud Analytics**: Comprehensive system protection usage and performance analytics

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8640/health"

# System protection operation via MCP
curl -X POST "http://127.0.0.1:8640/protect" -d '{"service": "all", "action": "protect"}'
```

### **MCP Status**
- **Claude Code**: ✅ Active - AI-powered system protection
- **ByteRover**: ✅ Active - Persistent system protection state management
- **UI TARS**: ✅ Active - Automated system protection monitoring
- **Figma**: ✅ Active - System protection dashboard design
- **Supabase**: ✅ Active - Cloud-based system protection analytics

---

## Purpose
System Protection Service prevents registered services from being deleted, ensuring system architecture integrity and protecting critical services from accidental removal.

## Description
System Protection Service prevents registered services from being deleted, ensuring system archit...

## Overview
The System Protection Service is a critical security component that automatically triggers after service registration completion, preventing registered services from being deleted and maintaining system architecture integrity.

## 🚨 **MANDATORY ZMARTBOT SERVICE ARCHITECTURE WORKFLOW**

### **CRITICAL WORKFLOW RULES (FORBIDDEN TO IGNORE)**

**🚨 NO EXCUSES - SYSTEM WILL CRASH IF RULES ARE BROKEN**

#### **Rule 1: Service Definition**
- **ANY .py file = SERVICE**: Every Python file represents a service
- **MANDATORY MDC**: Every .py file MUST have an associated MDC file
- **SERVICE COUNTING**: All .py files are counted as services in the system

#### **Rule 2: Port Assignment (Port Manager)**
- **MANDATORY PORT**: Any service trying to connect with other services MUST receive a port from Port Manager
- **PORT DATABASE**: Port Manager assigns a FREE port different from stored ports in database
- **CONFLICT RESOLUTION**: If port conflict detected, Port Manager automatically assigns new port
- **PERSISTENCE**: Port assignment is persisted and cannot be changed without proper workflow

#### **Rule 3: Passport Assignment (Integration Gate)**
- **PASSPORT REQUIRED**: Service MUST receive a passport to be integrated into system
- **MDC PREREQUISITE**: Passport is ONLY accepted if the .py service has an associated MDC file
- **UNIQUE IDENTITY**: Each passport provides unique service identity and tracking
- **SYSTEM ACCESS**: Without passport, service cannot access system resources

#### **Rule 4: Registration Process (Final Stage)**
- **IMPLEMENTATION COMPLETE**: Service implementation must be done and tested
- **STRICT WORKFLOW**: Registration follows mandatory steps documented in StopStartCycle and NewService MDC files
- **SUCCESS VERIFICATION**: Only proceed if all steps are successful
- **FINAL STATUS**: Successful registration upgrades service to "REGISTERED" status

#### **Rule 5: Registered Service Requirements**
- **AUTOMATIC STARTUP**: All registered services MUST start when system starts
- **ORCHESTRATION INTEGRATION**: Services must be assigned to Master Orchestration Agent
- **SAFE LEARNING**: Services must integrate with Master Orchestration Agent's safe learning system
- **CERTIFICATION**: All registered services MUST receive a certificate from Certification Service

#### **Rule 6: System Protection**
- **PROTECTION TRIGGER**: After registration completion, Protection Service is automatically triggered
- **DELETION PREVENTION**: Protection Service prevents registered services from being deleted
- **SYSTEM INTEGRITY**: Protection ensures system architecture integrity

### **SYSTEM PROTECTION SERVICE RESPONSIBILITIES**
- **AUTOMATIC TRIGGER**: System Protection Service automatically triggers after registration completion
- **DELETION PREVENTION**: System Protection Service prevents registered services from being deleted
- **SYSTEM INTEGRITY**: System Protection Service ensures system architecture integrity
- **PROTECTION ENFORCEMENT**: System Protection Service enforces protection rules
- **WORKFLOW ENFORCEMENT**: System Protection Service enforces the mandatory workflow rules

## Critical Functions
- **Service Protection**: Prevents registered services from deletion
- **Architecture Integrity**: Maintains system architecture integrity
- **Protection Enforcement**: Enforces protection rules and policies
- **Audit Trail**: Maintains protection audit trail
- **Override Management**: Manages protection override procedures
- **Security Monitoring**: Monitors protection system security

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** Service Registry, Certification Service
- **Env Vars:** PROTECTION_TOKEN, SERVICE_REGISTRY_URL
- **Lifecycle:** start=`python3 system_protection_service.py --port 8640` | stop=`pkill -f system_protection_service` | migrate=`n/a`

## Key Features
- **Automatic Protection**: Automatically protects registered services
- **Deletion Prevention**: Prevents accidental service deletion
- **Architecture Integrity**: Maintains system architecture integrity
- **Override Controls**: Controlled override procedures for special cases
- **Audit Logging**: Complete audit trail of protection events
- **Integration**: Seamless integration with service registration workflow

## API Endpoints

### GET /health
- Summary: System protection service health check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Health status
  - 503: Service unavailable

### GET /ready
- Summary: System protection service readiness check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Ready status
  - 503: Not ready

### POST /api/protection/register
- Summary: Register service for protection
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"service_name": "string", "passport_id": "string", "certificate_id": "string"}`
- Responses:
  - 200: Service protected successfully
  - 400: Invalid service, passport, or certificate
  - 401: Authentication required
  - 404: Service not found

### GET /api/protection/status/{service_name}
- Summary: Get service protection status
- Auth Required: Yes
- Request:
  - Params: `{"service_name": "string"}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Protection status
  - 400: Invalid service name
  - 401: Authentication required
  - 404: Service not found

### POST /api/protection/override
- Summary: Override protection for service
- Auth Required: Yes (Admin only)
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"service_name": "string", "reason": "string", "admin_token": "string"}`
- Responses:
  - 200: Protection overridden successfully
  - 400: Invalid service or reason
  - 401: Authentication required
  - 403: Admin access required
  - 404: Service not found

### GET /api/protection/audit
- Summary: Get protection audit trail
- Auth Required: Yes (Admin only)
- Request:
  - Params: `{}`
  - Query: `{"service_name": "string", "start_date": "string", "end_date": "string"}`
  - Body: `{}`
- Responses:
  - 200: Audit trail data
  - 400: Invalid parameters
  - 401: Authentication required
  - 403: Admin access required

## Protection Process

### Step 1: Registration Trigger
1. **Service Registration**: Service completes registration process
2. **Certification**: Service receives certification from Certification Service
3. **Protection Trigger**: System Protection Service automatically triggers
4. **Protection Registration**: Service registered for protection

### Step 2: Protection Enforcement
1. **Deletion Prevention**: Service protected from deletion
2. **File Protection**: Service files protected from removal
3. **Configuration Protection**: Service configuration protected
4. **Registry Protection**: Service registry entries protected

### Step 3: Monitoring
1. **Protection Monitoring**: Continuous monitoring of protection status
2. **Threat Detection**: Detection of deletion attempts
3. **Alert Generation**: Alerts for protection violations
4. **Audit Logging**: Logging of all protection events

### Step 4: Override Management
1. **Override Request**: Admin override request processing
2. **Validation**: Validation of override reasons
3. **Approval**: Admin approval of override
4. **Execution**: Controlled execution of override

## Protection Rules

### Mandatory Protection
- ✅ **Registered Services**: All registered services are automatically protected
- ✅ **Certified Services**: All certified services are protected
- ✅ **Passport Services**: All services with passport IDs are protected
- ✅ **MDC Files**: All MDC files for protected services are protected
- ✅ **Configuration Files**: All configuration files for protected services are protected

### Protection Scope
- ✅ **Service Files**: Python files and related service files
- ✅ **MDC Documentation**: MDC files and documentation
- ✅ **Configuration**: Service configuration files
- ✅ **Registry Entries**: Service registry database entries
- ✅ **Passport Records**: Passport registry entries
- ✅ **Certificate Records**: Certificate registry entries

### Override Conditions
- **Admin Authorization**: Only admin users can override protection
- **Valid Reason**: Override must have valid reason
- **Audit Trail**: All overrides are logged in audit trail
- **Confirmation**: Override requires explicit confirmation
- **Notification**: All overrides trigger notifications

## Error Handling

### Protection Failures
- **Service Not Found**: Service not found in registry
- **Missing Certificate**: Service lacks valid certificate
- **Missing Passport**: Service lacks valid passport ID
- **Registry Issues**: Issues with service registry
- **Permission Denied**: Insufficient permissions for protection

### Recovery Procedures
- **Service Registration**: Complete service registration first
- **Certification**: Obtain certification for service
- **Passport Assignment**: Obtain passport ID for service
- **Registry Fix**: Fix registry issues
- **Permission Fix**: Fix permission issues

## Success Criteria

### Protection Success
- ✅ Service is registered in service registry
- ✅ Service has valid passport ID
- ✅ Service has valid certificate
- ✅ Service is protected from deletion
- ✅ Service files are protected
- ✅ MDC files are protected
- ✅ Configuration files are protected
- ✅ Registry entries are protected
- ✅ Protection monitoring is active
- ✅ Audit trail is maintained

### Post-Protection
- ✅ Service is protected from deletion
- ✅ Service architecture integrity is maintained
- ✅ Service can only be modified through proper channels
- ✅ Service deletion requires admin override
- ✅ All protection events are logged
- ✅ Protection status is monitored

## Integration Points

### With Service Registry
- **Service Validation**: Validates service registration status
- **Protection Registration**: Registers services for protection
- **Status Updates**: Updates protection status

### With Certification Service
- **Certificate Validation**: Validates service certificates
- **Protection Trigger**: Triggers protection after certification
- **Status Synchronization**: Synchronizes protection status

### With Master Orchestration Agent
- **Protection Notification**: Notifies Master Orchestration Agent of protection
- **Status Updates**: Updates protection status
- **Override Coordination**: Coordinates protection overrides

### With Passport Service
- **Passport Validation**: Validates service passport IDs
- **Identity Protection**: Protects service identities
- **Authentication**: Authenticates protection operations

## Security

### Authentication
- **Token-based**: Uses protection tokens for authentication
- **Admin Authorization**: Admin authorization for override operations
- **Service Validation**: Validates service identity before protection

### Authorization
- **Role-based**: Role-based access control for protection operations
- **Admin Override**: Admin override capabilities for special cases
- **Service-specific**: Service-specific protection authorization

### Data Protection
- **Protection Data**: Secure storage of protection data
- **Audit Logging**: Secure audit logging of all operations
- **Access Control**: Strict access control for protection data

## Monitoring

### Protection Monitoring
- **Service Protection**: Monitors protection status of services
- **Deletion Attempts**: Monitors deletion attempts
- **Override Events**: Monitors override events
- **Protection Violations**: Monitors protection violations

### Security Monitoring
- **Access Logs**: Monitors access to protection system
- **Override Logs**: Monitors override operations
- **Violation Logs**: Monitors protection violations
- **Audit Logs**: Monitors audit trail integrity

### Performance Monitoring
- **Response Times**: Monitors API response times
- **Protection Speed**: Monitors protection operation speed
- **Override Speed**: Monitors override operation speed
- **System Impact**: Monitors system impact of protection

## Status
✅ **ACTIVE** - System Protection Service operational and enforcing mandatory workflow rules

description:
globs:
alwaysApply: true

## Requirements
- ✅ **Unique port assignment**
- ✅ **Database connectivity**
- ✅ **Valid service passport**
- ✅ **Complete MDC documentation**
- ✅ **Health endpoint implementation**


---
description:
globs:
alwaysApply: true

## Requirements
- ✅ **Unique port assignment**
- ✅ **Database connectivity**
- ✅ **Valid service passport**
- ✅ **Complete MDC documentation**
- ✅ **Health endpoint implementation**


---


## Triggers
- **API endpoint requests**
- **Database events**
- **Workflow transitions**
