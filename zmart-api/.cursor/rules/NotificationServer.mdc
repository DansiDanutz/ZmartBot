# NotificationServer.mdc


## Summary
ZmartBot Notification Service - Comprehensive alerts and notifications system providing real-time trading alerts, system notifications, and multi-channel communication capabilities.

## Purpose
- **Alert Management**: Real-time trading alerts and market notifications
- **Notification Delivery**: System notifications and status updates
- **Multi-Channel Communication**: Support for various notification channels
- **User Engagement**: Keep traders informed of important market events

## Description
- **Alert Management**: Real-time trading alerts and market notifications
- **Notification Delive...

## Key Functions

### Core Notification Operations
- **Alert Generation**: Generate alerts based on market conditions and trading signals
- **Notification Management**: Create, manage, and deliver system notifications
- **Real-time Updates**: Live streaming of alerts and market events
- **Alert Categorization**: Organize alerts by type, severity, and symbol

### Alert Types
- **Liquidation Alerts**: Large liquidation cluster detection (HIGH severity)
- **Technical Alerts**: RSI oversold/overbought conditions (MEDIUM severity)
- **Price Alerts**: Breakout and price movement notifications (MEDIUM severity)
- **Volume Alerts**: Unusual volume spike detection (LOW severity)
- **Live Price Updates**: Real-time price and market data (INFO level)

### Notification Categories
- **System Notifications**: Software updates, maintenance, system status
- **Trading Notifications**: Trading signals, position updates, market analysis
- **Alert Notifications**: Triggered alerts, warning conditions, critical events

## Technical Implementation

### Service Configuration
- **Service Name**: `zmart-notification`
- **Default Port**: `8008`
- **Host**: `127.0.0.1`
- **Framework**: FastAPI with SQLite database integration

### Database Integration
- **Database Path**: `../data/my_symbols_v2.db`
- **Connection Pool**: Automatic connection management with retry logic
- **Data Source**: Integrates with MySymbols database for symbol information
- **Fallback Data**: Default symbols when database unavailable

### API Endpoints

#### Alert Management
- **All Alerts**: `GET /api/alerts` - Retrieve all active alerts
- **Symbol Alerts**: `GET /api/alerts/{symbol}` - Get alerts for specific symbol
- **Live Alerts**: `GET /api/alerts/live` - Real-time alert streaming

#### Notification Management
- **All Notifications**: `GET /api/notifications` - Get all notifications
- **Unread Notifications**: `GET /api/notifications/unread` - Get unread notifications

#### Health & Monitoring
- **Health Check**: `GET /health` - Service health status
- **Readiness Check**: `GET /ready` - Service readiness with dependency status
- **Database Status**: Integrated database connection monitoring

## Data Models

### Alert Structure
```json
{
    "id": "integer",
    "symbol": "string",
    "type": "liquidation|technical|price_alert|volume_alert",
    "message": "string",
    "severity": "high|medium|low",
    "timestamp": "ISO8601",
    "status": "active|resolved"
}
```

### Notification Structure
```json
{
    "id": "integer", 
    "type": "system|trading|alert",
    "title": "string",
    "message": "string",
    "severity": "info|medium|high",
    "timestamp": "ISO8601",
    "read": "boolean"
}
```

### Live Alert Data
```json
{
    "price": "float",
    "change_24h": "float",
    "volume": "integer"
}
```

## Alert Generation Logic

### Dynamic Alert Creation
- **Symbol-based Generation**: Creates alerts for active symbols from database
- **Multi-type Alerts**: Generates 4 different alert types per symbol
- **Severity Distribution**: Balanced severity levels (high, medium, low)
- **Timestamp Staggering**: Alerts distributed across time intervals

### Severity Classifications
- **HIGH**: Critical market events requiring immediate attention
- **MEDIUM**: Important signals requiring monitoring
- **LOW**: Informational alerts for reference
- **INFO**: Live data updates and status information

### Alert Aggregation
- **Total Count**: Complete alert inventory
- **Active Alerts**: Currently active alert count  
- **Severity Breakdown**: Count by severity level
- **Symbol Distribution**: Alerts grouped by trading symbol

## Performance Characteristics

### Response Times
- **Alert Retrieval**: Sub-second response for alert queries
- **Live Updates**: Real-time streaming with minimal latency
- **Database Queries**: Optimized queries with connection pooling
- **Concurrent Requests**: Multi-client support via FastAPI

### Scalability
- **Symbol Support**: Handles 10+ active symbols simultaneously
- **Alert Volume**: Manages hundreds of alerts efficiently
- **Notification Queue**: Handles high-volume notification processing
- **Database Scaling**: Supports growing alert and notification data

## Integration Points

### Database Dependencies
- **MySymbols Database**: Primary source for active trading symbols
- **Connection Management**: Robust database connection handling
- **Fallback Mechanism**: Continues operation with default symbols if DB unavailable
- **Data Consistency**: Ensures data integrity across service restarts

### Service Ecosystem
- **Technical Analysis**: Receives technical indicator alerts
- **Risk Management**: Gets risk-based notifications
- **WebSocket Service**: Real-time alert delivery
- **Frontend Dashboard**: Alert visualization and management

## Configuration

### Environment Variables
```bash
NOTIFICATION_SERVICE_PORT=8008
NOTIFICATION_SERVICE_HOST=127.0.0.1
DATABASE_PATH=../data/my_symbols_v2.db
ALERT_RETENTION_HOURS=24
NOTIFICATION_RETENTION_DAYS=7
```

### Service Settings
```python
SERVICE_CONFIG = {
    "name": "zmart-notification",
    "version": "1.0.0",
    "port": 8008,
    "host": "127.0.0.1"
}
```

## Error Handling & Resilience

### Database Error Handling
- **Connection Failures**: Graceful fallback to default symbols
- **Query Errors**: Comprehensive error logging and recovery
- **Data Validation**: Input validation and sanitization
- **Connection Recovery**: Automatic reconnection attempts

### Service Reliability
- **Exception Handling**: Global exception handler for unhandled errors
- **Graceful Degradation**: Continues operation with reduced functionality
- **Error Logging**: Detailed error logging for debugging
- **Health Monitoring**: Continuous service health validation

### Recovery Mechanisms
- **Service Restart**: Automatic recovery from service failures
- **Database Reconnect**: Database connection restoration
- **Alert Recovery**: Maintains alert state across restarts
- **Notification Queue**: Persistent notification handling

## Security Considerations

### API Security
- **CORS Configuration**: Proper cross-origin request handling
- **Input Validation**: Comprehensive input sanitization
- **SQL Injection Prevention**: Parameterized database queries
- **Error Information**: Controlled error message exposure

### Data Protection
- **Database Security**: Secure database access and permissions
- **Audit Logging**: Complete audit trail for notifications
- **Access Control**: Role-based notification access (future enhancement)
- **Rate Limiting**: Protection against notification spam (future enhancement)

## Operational Guidelines

### Deployment
- **Container Ready**: Docker-compatible deployment
- **Health Checks**: Kubernetes-ready health and readiness probes
- **Resource Requirements**: Minimal CPU and memory footprint
- **Scaling**: Horizontal scaling support

### Monitoring
- **Health Endpoints**: Automated health monitoring
- **Database Status**: Database connectivity monitoring
- **Alert Metrics**: Alert generation and delivery metrics
- **Performance Tracking**: Response time and throughput monitoring

### Maintenance
- **Alert Cleanup**: Regular cleanup of old alerts
- **Notification Archival**: Archive old notifications
- **Database Maintenance**: Regular database optimization
- **Log Management**: Log rotation and archival

## API Usage Examples

### Get All Alerts
```bash
curl http://localhost:8008/api/alerts
```

### Get Symbol-Specific Alerts
```bash
curl http://localhost:8008/api/alerts/BTCUSDT
```

### Get Live Alerts
```bash
curl http://localhost:8008/api/alerts/live
```

### Get Unread Notifications
```bash
curl http://localhost:8008/api/notifications/unread
```

## Command Line Usage
```bash
# Start with default settings
python notification_server.py

# Custom port and host
python notification_server.py --port 8008 --host 0.0.0.0

# Production deployment
uvicorn notification_server:app --host 0.0.0.0 --port 8008 --workers 2
```

## Future Enhancements

### Planned Features
- **Multi-Channel Delivery**: Email, SMS, push notifications
- **User Preferences**: Customizable alert preferences
- **Alert Filtering**: Advanced filtering and search capabilities
- **Notification Templates**: Customizable notification templates

### Integration Improvements
- **Real-time Subscriptions**: WebSocket-based real-time subscriptions
- **External Integrations**: Slack, Discord, Telegram notifications
- **Mobile Apps**: Native mobile app notifications
- **Browser Push**: Web push notifications

This service is essential for keeping traders informed and engaged with real-time market conditions and system status updates.

## Triggers
- **API endpoint requests**
- **Database events**
- **Health check requests**


## Requirements
- ✅ **Unique port assignment**
- ✅ **Database connectivity**
- ✅ **Complete MDC documentation**
- ✅ **Health endpoint implementation**
