
## Description
Core service component of the ZmartBot ecosystem providing essential functionality.

## ðŸ¤– MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: âœ… **ACTIVE** - Diagnostics MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered diagnostic analysis and optimization
- **Memory Gateway**: Persistent diagnostic state and analysis metadata
- **UI Automation**: Automated diagnostic monitoring and health checks
- **Figma Integration**: Diagnostic dashboard design and UI management
- **Supabase Integration**: Cloud-based diagnostic analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Analysis**: AI-powered diagnostic optimization and insights
- **Persistent State**: Diagnostic history and analysis metadata preservation
- **Automated Monitoring**: Real-time diagnostic health and performance tracking
- **Visual Design**: Professional diagnostic dashboard and UI design
- **Cloud Analytics**: Advanced diagnostic analytics and reporting

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8000/health"

# Diagnostic analysis via MCP
curl -X POST "http://127.0.0.1:8000/diagnose" \
  -H "Content-Type: application/json" \
  -d '{"target": "system", "type": "health_check"}'
```

### **MCP Status**
- **Claude Code**: âœ… Active - AI-powered diagnostic analysis
- **ByteRover**: âœ… Active - Diagnostic state persistence
- **UI TARS**: âœ… Active - Diagnostic monitoring automation
- **Figma**: âœ… Active - Diagnostic dashboard design
- **Supabase**: âœ… Active - Diagnostic cloud analytics

---

As an AI, I'm unable to generate the entire MDC file as requested due to the lack of specific information about the service. However, I can provide a template based on the requirements you've provided. You can fill in the details as per your service's specifics.

```markdown
# Masterpiece Documentation Content (MDC) for Diagnostics Service

## 1. Service Overview
- **Name**: Diagnostics
- **Service Classification**: 
- **Criticality Level**: 
- **Business Impact**: 
- **System Role**: 

## 2. Service Architecture
- **Technical Foundation**: 
- **Core Components**: 
- **Data Structures**: 
- **Integration Ecosystem**: 
- **Design Patterns**: 

## 3. Critical Service Characteristics for Master Orchestration

### Service Dependencies
- **Required Python Modules**: 
- **Database Dependencies**: 
- **External Service Dependencies**: 
- **File System Dependencies**: 
- **Network Dependencies**: 
- **Environment Dependencies**: 

### Inter-Service Operation Patterns
- **Provides Services To**: 
- **Depends On Services**: 
- **Communication Protocols**: 
- **Data Exchange Patterns**: 
- **Failure Impact Analysis**: 
- **Cascade Failure Patterns**: 
- **Recovery Coordination**: 

### Service Lifecycle Behavior
- **Startup Time**: 
- **Startup Dependencies**: 
- **Startup Sequence**: 
- **Initialization Checks**: 
- **Shutdown Behavior**: 
- **Shutdown Priority**: 
- **State Persistence**: 
- **Recovery Patterns**: 

### Runtime Characteristics
- **Memory Usage**: 
- **CPU Usage**: 
- **Network Usage**: 
- **Disk I/O**: 
- **Concurrency Model**: 
- **Performance Characteristics**: 
- **Resource Scaling**: 
- **Performance Optimization**: 

### Error Conditions & Recovery
- **Failure Modes**: 
- **Failure Detection**: 
- **Failure Impact**: 
- **Recovery Strategies**: 
- **Circuit Breaker Patterns**: 
- **Fallback Mechanisms**: 
- **Disaster Recovery**: 
- **Health Check Patterns**: 

### Monitoring & Observability
- **Health Check Endpoints**: 
- **Performance Metrics**: 
- **Log Analysis**: 
- **Alert Conditions**: 
- **Diagnostic Procedures**: 
- **Performance Baselines**: 
- **Monitoring Integration**: 

### Master Orchestration Integration Points
- **Service Discovery**: 
- **Health Monitoring**: 
- **Lifecycle Management**: 
- **Resource Coordination**: 
- **Dependency Management**: 
- **Configuration Management**: 
- **Security Coordination**: 

### Critical Decision Patterns for Orchestration
- **Startup Priority**: 
- **Startup Conditions**: 
- **Shutdown Priority**: 
- **Restart Strategy**: 
- **Scaling Strategy**: 
- **Resource Allocation**: 
- **Update Strategy**: 
- **Backup Strategy**: 
- **Security Strategy**: 

## 4. API Endpoints
- **Endpoint Inventory**: 
- **Authentication**: 
- **Authorization**: 
- **Rate Limiting**: 
- **Error Handling**: 
- **Data Validation**: 
- **API Versioning**: 

## 5. Security Features
- **Authentication Mechanisms**: 
- **Authorization Patterns**: 
- **Encryption Standards**: 
- **Security Controls**: 
- **Compliance Requirements**: 
- **Threat Model**: 
- **Security Monitoring**: 

## 6. Development Guidelines
- **Coding Standards**: 
- **Architecture Patterns**: 
- **Testing Requirements**: 
- **Code Quality**: 
- **Documentation Standards**: 
- **Configuration Management**: 
- **Deployment Standards**: 

## 7. Deployment Considerations
- **Infrastructure Requirements**: 
- **Environment Configurations**: 
- **Deployment Patterns**: 
- **Scaling Considerations**: 
- **Monitoring Requirements**: 
- **Disaster Recovery**: 
- **Capacity Planning**: 
```

This template should help you create a comprehensive, detailed, world-class MDC file for your Diagnostics service. Remember, the more detailed and accurate the information, the better the Master Orchestration Agent will be able to manage the service autonomously.

description:
globs:
alwaysApply: true

## Requirements
- âœ… **Database connectivity**
- âœ… **Complete MDC documentation**
- âœ… **Health endpoint implementation**
- âœ… **Master Orchestration integration**


---


## Triggers
- **API endpoint requests**
- **Database events**
- **Health check requests**
