# üéì Certification Service - Service Certification & Diploma Generation
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8630

## ü§ñ MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ‚úÖ **ACTIVE** - Certification Service MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered certification analysis and optimization
- **Memory Gateway**: Persistent certification state and service metadata
- **UI Automation**: Automated certification monitoring and health checks
- **Figma Integration**: Certification dashboard design and UI management
- **Supabase Integration**: Cloud-based certification analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Certification**: AI-powered certification validation and optimization
- **Persistent State**: Certification data and service metadata persistence
- **Automated Monitoring**: Real-time certification status monitoring
- **Professional UI**: Modern certification dashboard and management interface
- **Cloud Analytics**: Comprehensive certification analytics and reporting

### **MCP Usage Examples**
```bash
# Health check with MCP integration
curl -X GET "http://127.0.0.1:8630/health" \
  -H "X-MCP-Integration: claude-code,byterover,ui-tars,figma,supabase"

# Service certification with MCP support
curl -X POST "http://127.0.0.1:8630/api/certification/certify" \
  -H "Content-Type: application/json" \
  -H "X-MCP-Integration: claude-code,byterover,ui-tars,figma,supabase" \
  -d '{"service_name": "test-service", "passport_id": "ZMBT-BACKEND-20250810-ABC123"}'
```

### **MCP Integration Status**
- **Claude Code**: ‚úÖ Active - AI-powered certification analysis
- **ByteRover**: ‚úÖ Active - Persistent certification state management
- **UI TARS**: ‚úÖ Active - Automated certification monitoring
- **Figma**: ‚úÖ Active - Certification dashboard design
- **Supabase**: ‚úÖ Active - Cloud-based certification analytics

## Purpose
Certification service responsible for generating production certificates for all registered services, ensuring compliance with ZmartBot architecture standards and providing official service validation.

## Description
Certification service responsible for generating production certificates for all registered servi...

## Overview
The Certification Service is a critical component of the ZmartBot architecture that issues official certificates to registered services, validating their compliance with system standards and enabling production deployment.

## üö® **MANDATORY ZMARTBOT SERVICE ARCHITECTURE WORKFLOW**

### **CRITICAL WORKFLOW RULES (FORBIDDEN TO IGNORE)**

**üö® NO EXCUSES - SYSTEM WILL CRASH IF RULES ARE BROKEN**

### **üö® CRITICAL CERTIFICATION EXCEPTION - PORT MANAGER**

**THE PORT MANAGER IS THE ONLY EXCEPTION TO CERTIFICATION RULES:**

- **ONLY CERTIFIED SERVICE**: Port Manager is the ONLY service that has a certificate
- **NOT IN MASTER ORCHESTRATION**: Port Manager is NOT included in Master Orchestration Agent
- **ORCHESTRATION START ONLY**: Port Manager is included ONLY in OrchestrationStart process
- **UNIQUE STATUS**: This is the ONLY exception to the standard certification workflow
- **CRITICAL RULE**: Breaking this rule will crash the system

### **üéì MANDATORY CERTIFICATION CONDITIONS**

**ALL SERVICES MUST MEET THESE CONDITIONS TO OBTAIN CERTIFICATION:**

1. **UNIQUE PORT ASSIGNMENT**: A unique port is assigned by Port Manager
2. **PASSPORT ASSIGNMENT**: A passport is assigned by Passport Service
3. **WORKFLOW COMPLIANCE**: The StopStartCycle and NewService steps are passed successfully
4. **REGISTRATION SLOT**: A slot is allocated in the Registration service database
5. **ORCHESTRATION START**: The instance is assigned to OrchestrationStart process
6. **MASTER ORCHESTRATION**: The instance is assigned to Master Orchestration Agent and Self-learning system

**üö® PORT MANAGER EXCEPTION**: Only the Port Manager has an exception regarding the Master Orchestration Agent assignment (condition #6 does not apply to Port Manager)

#### **Rule 1: Service Definition**
- **ANY .py file = SERVICE**: Every Python file represents a service
- **MANDATORY MDC**: Every .py file MUST have an associated MDC file
- **SERVICE COUNTING**: All .py files are counted as services in the system

#### **Rule 2: Port Assignment (Port Manager)**
- **MANDATORY PORT**: Any service trying to connect with other services MUST receive a port from Port Manager
- **PORT DATABASE**: Port Manager assigns a FREE port different from stored ports in database
- **CONFLICT RESOLUTION**: If port conflict detected, Port Manager automatically assigns new port
- **PERSISTENCE**: Port assignment is persisted and cannot be changed without proper workflow

#### **Rule 3: Passport Assignment (Integration Gate)**
- **PASSPORT REQUIRED**: Service MUST receive a passport to be integrated into system
- **MDC PREREQUISITE**: Passport is ONLY accepted if the .py service has an associated MDC file
- **UNIQUE IDENTITY**: Each passport provides unique service identity and tracking
- **SYSTEM ACCESS**: Without passport, service cannot access system resources

#### **Rule 4: Registration Process (Final Stage)**
- **IMPLEMENTATION COMPLETE**: Service implementation must be done and tested
- **STRICT WORKFLOW**: Registration follows mandatory steps documented in StopStartCycle and NewService MDC files
- **SUCCESS VERIFICATION**: Only proceed if all steps are successful
- **FINAL STATUS**: Successful registration upgrades service to "REGISTERED" status

#### **Rule 5: Registered Service Requirements**
- **AUTOMATIC STARTUP**: All registered services MUST start when system starts
- **ORCHESTRATION INTEGRATION**: Services must be assigned to Master Orchestration Agent
- **SAFE LEARNING**: Services must integrate with Master Orchestration Agent's safe learning system
- **CERTIFICATION**: All registered services MUST receive a certificate from Certification Service

#### **Rule 6: System Protection**
- **PROTECTION TRIGGER**: After registration completion, Protection Service is automatically triggered
- **DELETION PREVENTION**: Protection Service prevents registered services from being deleted
- **SYSTEM INTEGRITY**: Protection ensures system architecture integrity

### **CERTIFICATION SERVICE RESPONSIBILITIES**
- **MANDATORY CERTIFICATION**: All registered services MUST receive a certificate from Certification Service
- **COMPLIANCE VALIDATION**: Certification Service validates service compliance with architecture standards
- **DIPLOMA GENERATION**: Certification Service generates official service diplomas
- **PRODUCTION APPROVAL**: Certification Service provides final approval for production deployment
- **WORKFLOW ENFORCEMENT**: Certification Service enforces the mandatory workflow rules

## Critical Functions
- **Service Certification**: Validates and certifies registered services
- **Diploma Generation**: Creates official service diplomas and certificates
- **Compliance Checking**: Ensures services meet architecture standards
- **Production Approval**: Provides final approval for production deployment
- **Certificate Management**: Manages and tracks all service certificates
- **Audit Trail**: Maintains complete certification audit trail

## üö® CRITICAL: Source of Truth

**The Certification Service is the ONLY authoritative source for certification status.**
- **NEVER use database APPROVE events** to determine certification status
- **Database APPROVE events are for workflow tracking only**
- **Certification Service validation is independent and comprehensive**
- **Always check certification service logs and API for accurate status**
- **Certification Service performs its own validation logic independent of database events**

## üîç Certification Validation Logic

The Certification Service performs comprehensive validation with the following checks:

### **Mandatory Validations (ALL must pass):**
1. **Passport Validation**: Service has valid passport ID
2. **Port Assignment**: Service has unique port assignment
3. **StopStartCycle**: Service completed stop/start cycle
4. **NewService Workflow**: Service completed registration workflow
5. **OrchestrationStart Integration**: Service integrated with OrchestrationStart
6. **Master Orchestration Agent Inclusion**: Service assigned to Master Orchestration Agent

### **üö® PORT MANAGER EXCEPTION:**
- **Port Manager** is the **ONLY** service that does **NOT** require Master Orchestration Agent inclusion
- **Port Manager** is included **ONLY** in OrchestrationStart process
- **Port Manager** is the **ONLY** exception to the standard certification workflow

### **Additional Validations:**
7. **Service Health**: Service is responding and healthy
8. **MDC File**: Service has associated MDC documentation

### **System Protection:**
- **Triggered AFTER** certification is issued
- **Prevents** certified services from being deleted
- **Ensures** system architecture integrity

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** Service Registry, Passport Service
- **Env Vars:** CERTIFICATION_TOKEN, SERVICE_REGISTRY_URL
- **Lifecycle:** start=`python3 certification_service.py --port 8630` | stop=`pkill -f certification_service` | migrate=`n/a`

## Key Features
- **Automated Certification**: Automatic certification of compliant services
- **Diploma Templates**: Professional diploma templates for services
- **Compliance Validation**: Comprehensive compliance checking
- **Certificate Storage**: Secure certificate storage and management
- **Audit Logging**: Complete audit trail of all certifications
- **Integration**: Seamless integration with service registration workflow

## API Endpoints

### GET /health
- Summary: Certification service health check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Health status
  - 503: Service unavailable

### GET /ready
- Summary: Certification service readiness check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Ready status
  - 503: Not ready

### POST /api/certification/certify
- Summary: Certify a registered service
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"service_name": "string", "passport_id": "string"}`
- Responses:
  - 200: Service certified successfully
  - 400: Invalid service or passport
  - 401: Authentication required
  - 404: Service not found

### GET /api/certification/certificates/{service_name}
- Summary: Get service certificate
- Auth Required: Yes
- Request:
  - Params: `{"service_name": "string"}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Service certificate
  - 400: Invalid service name
  - 401: Authentication required
  - 404: Certificate not found

### POST /api/certification/diploma/generate
- Summary: Generate service diploma
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"service_name": "string", "certificate_id": "string"}`
- Responses:
  - 200: Diploma generated successfully
  - 400: Invalid service or certificate
  - 401: Authentication required
  - 404: Service or certificate not found

### GET /api/certification/compliance/check
- Summary: Check service compliance
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{"service_name": "string"}`
  - Body: `{}`
- Responses:
  - 200: Compliance check result
  - 400: Invalid service name
  - 401: Authentication required
  - 404: Service not found

## Certification Process

### Step 1: Service Validation
1. **Port Manager Exception Check**: Verify if service is Port Manager (ONLY exception to certification rules)
2. **Passport Verification**: Verify service has valid passport ID (except Port Manager)
3. **Registration Check**: Confirm service is registered in service registry (except Port Manager)
4. **MDC Documentation**: Verify service has complete MDC documentation (except Port Manager)
5. **Port Assignment**: Confirm service has valid port assignment (except Port Manager)

### Step 2: Compliance Checking
1. **Architecture Standards**: Validate service follows ZmartBot architecture
2. **Workflow Compliance**: Verify service follows mandatory workflow rules
3. **Integration Status**: Check service integration with Master Orchestration Agent
4. **Health Monitoring**: Verify service health monitoring is active

### Step 3: Certificate Generation
1. **Certificate Creation**: Generate unique certificate for service
2. **Diploma Generation**: Create official service diploma
3. **Storage**: Store certificate and diploma securely
4. **Audit Log**: Record certification in audit trail

### Step 4: Production Approval
1. **Final Validation**: Perform final compliance validation
2. **Approval Grant**: Grant production approval
3. **Notification**: Notify Master Orchestration Agent of certification
4. **Protection Trigger**: Trigger System Protection Service

## Compliance Requirements

### Mandatory Requirements
- ‚úÖ **Port Manager Exception**: Port Manager is the ONLY service with certificate (special case)
- ‚úÖ **Passport ID**: Service must have valid passport ID (except Port Manager)
- ‚úÖ **Service Registration**: Service must be registered in service registry (except Port Manager)
- ‚úÖ **MDC Documentation**: Service must have complete MDC documentation (except Port Manager)
- ‚úÖ **Port Assignment**: Service must have valid port assignment (except Port Manager)
- ‚úÖ **Orchestration Integration**: Service must be integrated with Master Orchestration Agent (except Port Manager)
- ‚úÖ **Health Monitoring**: Service must have active health monitoring (except Port Manager)

### Architecture Standards
- ‚úÖ **Workflow Compliance**: Service must follow mandatory workflow rules
- ‚úÖ **Service Definition**: Service must be properly defined as Python file with MDC
- ‚úÖ **Integration Standards**: Service must meet integration requirements
- ‚úÖ **Security Standards**: Service must meet security requirements
- ‚úÖ **Performance Standards**: Service must meet performance requirements

## Error Handling

### Certification Failures
- **Invalid Service**: Service not found or not registered
- **Missing Passport**: Service lacks valid passport ID
- **Incomplete Documentation**: Service lacks complete MDC documentation
- **Integration Issues**: Service not properly integrated
- **Compliance Violations**: Service fails compliance checks

### Recovery Procedures
- **Service Registration**: Complete service registration first
- **Passport Assignment**: Obtain passport ID for service
- **Documentation Completion**: Complete MDC documentation
- **Integration Fix**: Fix integration issues
- **Compliance Correction**: Address compliance violations

## Success Criteria

### Certification Success
- ‚úÖ **Port Manager Exception**: Port Manager is the ONLY service with certificate (special case)
- ‚úÖ Service has valid passport ID (except Port Manager)
- ‚úÖ Service is registered in service registry (except Port Manager)
- ‚úÖ Service has complete MDC documentation (except Port Manager)
- ‚úÖ Service has valid port assignment (except Port Manager)
- ‚úÖ Service is integrated with Master Orchestration Agent (except Port Manager)
- ‚úÖ Service has active health monitoring (except Port Manager)
- ‚úÖ Service meets all compliance requirements (except Port Manager)
- ‚úÖ Certificate and diploma generated successfully
- ‚úÖ Production approval granted
- ‚úÖ System Protection Service triggered

### Post-Certification
- ‚úÖ Service is officially certified
- ‚úÖ Service can be deployed to production
- ‚úÖ Service is protected from deletion
- ‚úÖ Service is included in system startup
- ‚úÖ Service is monitored and managed by Master Orchestration Agent

## Integration Points

### With Service Registry
- **Service Validation**: Validates service registration status
- **Metadata Access**: Accesses service metadata for certification
- **Status Updates**: Updates service certification status

### With Passport Service
- **Passport Verification**: Verifies service passport ID
- **Identity Validation**: Validates service identity
- **Authentication**: Authenticates service for certification

### With Master Orchestration Agent
- **Certification Notification**: Notifies Master Orchestration Agent of certification
- **Production Approval**: Grants production approval
- **Integration Status**: Updates integration status

### With System Protection Service
- **Protection Trigger**: Triggers system protection after certification
- **Deletion Prevention**: Prevents certified services from deletion
- **System Integrity**: Maintains system architecture integrity

## Security

### Authentication
- **Token-based**: Uses certification tokens for authentication
- **Service Validation**: Validates service identity before certification
- **Audit Trail**: Maintains complete audit trail of all operations

### Authorization
- **Role-based**: Role-based access control for certification operations
- **Service-specific**: Service-specific authorization for certification
- **Admin Override**: Admin override capabilities for special cases

### Data Protection
- **Certificate Storage**: Secure storage of certificates and diplomas
- **Audit Logging**: Secure audit logging of all operations
- **Access Control**: Strict access control for certification data

## Monitoring

### Health Monitoring
- **Service Health**: Monitors certification service health
- **Certificate Status**: Tracks certificate status and validity
- **Compliance Status**: Monitors compliance status of services

### Performance Monitoring
- **Response Times**: Monitors API response times
- **Throughput**: Tracks certification throughput
- **Error Rates**: Monitors error rates and failures

### Audit Monitoring
- **Certification Events**: Monitors all certification events
- **Access Logs**: Tracks access to certification data
- **Compliance Violations**: Monitors compliance violations

## Status
‚úÖ **ACTIVE** - Certification service operational and enforcing mandatory workflow rules

description:
globs:
alwaysApply: true

## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---
description:
globs:
alwaysApply: true

## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---


## Triggers
- **API endpoint requests**
- **Database events**
- **Workflow transitions**
