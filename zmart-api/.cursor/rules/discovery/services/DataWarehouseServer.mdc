# Datawarehouseserver - Merged MDC Configuration

## üîó Merged from 2 duplicate files
**Merged Files**: DataWarehouseServer.mdc, data_warehouse_server.mdc
**Merge Date**: 2025-08-27 10:39:58
**Primary Source**: DataWarehouseServer.mdc

## üìã Primary Configuration
# Datawarehouseserver - Merged MDC Configuration

## üîó Merged from 2 duplicate files
**Merged Files**: DataWarehouseServer.mdc, data_warehouse_server.mdc
**Merge Date**: 2025-08-26 09:03:52
**Primary Source**: DataWarehouseServer.mdc

## üìã Primary Configuration
# DataWarehouseServer.mdc

## Summary
ZmartBot Data Warehouse Service - Centralized data storage, aggregation, and analytics service providing historical data, real-time aggregations, and analytical insights for the trading ecosystem.

## Purpose
- **Data Storage**: Centralized repository for market data, trading history, and analytics
- **Data Aggregation**: Real-time processing and aggregation of trading data
- **Analytics Engine**: Provides analytical insights and historical data analysis
- **Data Management**: Handles data warehousing operations and storage optimization

## Key Functions

### Core Data Operations
- **Historical Data Management**: Stores and retrieves historical market data for symbols
- **Data Aggregation**: Processes and aggregates trading data for analytical purposes
- **Analytics Processing**: Computes various analytical metrics and indicators
- **Storage Management**: Manages data warehouse storage and optimization

### API Endpoints
- **Health & Monitoring**: `/health`, `/ready`, `/metrics` for service observability
- **Warehouse Status**: `/api/v1/data/warehouse/status` - data warehouse operational status
- **Historical Data**: `/api/v1/data/historical/{symbol}` - historical price and volume data
- **Aggregated Data**: `/api/v1/data/aggregate/{symbol}` - daily aggregations and statistics
- **Analytics Data**: `/api/v1/data/analytics/{symbol}` - technical analysis results

### Data Models
- **Historical Records**: Timestamp, price, volume data points
- **Aggregated Metrics**: Daily averages, volume totals, price changes, volatility
- **Analytics Results**: RSI, MACD, Bollinger Bands, moving averages
- **Warehouse Statistics**: Table counts, data points, storage usage

## Technical Implementation

### Service Configuration
- **Service Name**: `zmart-data-warehouse`
- **Default Port**: `8015`
- **Host**: `127.0.0.1`
- **Framework**: FastAPI with async/await support

### Data Processing
- **Storage Capacity**: 25 tables, 1M+ data points
- **Storage Usage**: 15.5GB current usage
- **Query Performance**: 150 queries per minute capacity
- **Backup Schedule**: Regular backups with last backup tracking

### Integration Points
- **Database Systems**: Connects to various data storage backends
- **Real-time Feeds**: Processes live market data streams
- **Analytics Pipeline**: Feeds processed data to ML and technical analysis services
- **API Gateway**: Exposes RESTful APIs for data access

## Dependencies & Requirements

### System Requirements
- **Python 3.8+**: Core runtime environment
- **FastAPI**: Web framework and API server
- **Uvicorn**: ASGI server for production deployment
- **Database Engine**: SQLite/PostgreSQL for data persistence

### External Integrations
- **Market Data Feeds**: Real-time and historical data ingestion
- **Storage Systems**: Database and file system storage
- **Monitoring Stack**: Metrics and health check integration
- **Service Mesh**: Integration with ZmartBot service ecosystem

## Configuration

### Environment Variables
```bash
DATA_WAREHOUSE_PORT=8015
DATA_WAREHOUSE_HOST=127.0.0.1
DATABASE_URL=sqlite:///data/warehouse.db
STORAGE_PATH=/data/warehouse
```

### Service Registration
- **Service ID**: `data-warehouse-service`
- **Health Endpoint**: `/health`
- **Metrics Endpoint**: `/metrics`
- **API Version**: `v1`

## Performance Characteristics

### Scalability
- **Query Throughput**: 150 queries/minute baseline
- **Data Volume**: Handles 1M+ data points efficiently
- **Storage Scaling**: 25+ table capacity with optimization
- **Concurrent Connections**: Multi-client support via FastAPI

### Reliability
- **Health Monitoring**: Comprehensive health and readiness checks
- **Error Handling**: Robust exception handling and logging
- **Data Integrity**: Consistent data storage and retrieval
- **Backup Strategy**: Regular data backup and recovery procedures

## Security Considerations

### Data Protection
- **Access Control**: CORS middleware for secure API access
- **Data Validation**: Input validation for all API endpoints
- **Audit Logging**: Comprehensive logging for data access and modifications
- **Encryption**: Data encryption at rest and in transit (when configured)

### API Security
- **CORS Policy**: Configurable cross-origin resource sharing
- **Rate Limiting**: Query rate limiting capabilities
- **Authentication**: Bearer token support (when implemented)
- **Input Sanitization**: SQL injection prevention and data validation

## Operational Guidelines

### Deployment
- **Containerized**: Docker-ready with health checks
- **Service Discovery**: Kubernetes-compatible service registration
- **Load Balancing**: Supports horizontal scaling with load balancers
- **Monitoring**: Prometheus/Grafana compatible metrics

### Maintenance
- **Health Monitoring**: Regular health check automation
- **Performance Tuning**: Query optimization and storage management
- **Data Archival**: Historical data archival procedures
- **Capacity Planning**: Storage growth monitoring and scaling

## Error Handling

### Common Issues
- **Database Connectivity**: Connection pool management and retry logic
- **Storage Capacity**: Disk space monitoring and alerting
- **Query Performance**: Slow query identification and optimization
- **Data Consistency**: Integrity checks and consistency validation

### Recovery Procedures
- **Service Restart**: Automated recovery from service failures
- **Data Recovery**: Backup restoration procedures
- **Performance Recovery**: Query optimization and resource management
- **Connection Recovery**: Database reconnection and failover

## Integration with ZmartBot Ecosystem

### Service Dependencies
- **Symbol Management**: Integrates with MySymbolsDatabase for symbol data
- **Risk Metrics**: Provides data to RiskManagement service
- **Technical Analysis**: Feeds data to TechnicalAnalysis service
- **Machine Learning**: Supplies training data to ML services

### Data Flow
- **Ingestion**: Real-time market data ingestion and processing
- **Processing**: Data aggregation and analytical computations
- **Storage**: Persistent storage of processed data
- **Distribution**: API-based data distribution to consuming services

## Command Line Usage
```bash
# Start with default settings
python data_warehouse_server.py

# Custom port and host
python data_warehouse_server.py --port 8015 --host 0.0.0.0

# Production deployment
uvicorn data_warehouse_server:app --host 0.0.0.0 --port 8015 --workers 4
```

## API Examples

### Get Warehouse Status
```bash
curl http://localhost:8015/api/v1/data/warehouse/status
```

### Get Historical Data
```bash
curl http://localhost:8015/api/v1/data/historical/BTCUSDT
```

### Get Aggregated Data
```bash
curl http://localhost:8015/api/v1/data/aggregate/ETHUSDT
```

This service is a critical component of the ZmartBot data infrastructure, providing centralized data management and analytics capabilities for the entire trading ecosystem.

## üìÑ Additional Content from data_warehouse_server.mdc
# data_warehouse_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8015

## Purpose
ZmartBot Data Warehouse Service
Data storage, aggregation, and analytics service

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/data_warehouse/data_warehouse_server.py.py` | stop=`pkill -f data_warehouse_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8015** ‚úÖ **ACTIVE** - network connection
- ****** ‚úÖ **ACTIVE** - dependency connection

### Potential Connections
- **zmart-data-warehouse** ‚è≥ **POTENTIAL** - High-potential integration between DataWarehouseServer and zmart-data-warehouse - Strong synergy opportunity (Confidence: 100%)
- **notification_server** ‚è≥ **POTENTIAL** - High-potential integration between DataWarehouseServer and notification_server - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ‚è≥ **POTENTIAL** - High-potential integration between DataWarehouseServer and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **START_zmartbot** ‚è≥ **POTENTIAL** - High-potential integration between DataWarehouseServer and START_zmartbot - Strong synergy opportunity (Confidence: 80%)
- **my-symbols-extended-service** ‚è≥ **POTENTIAL** - High-potential integration between DataWarehouseServer and my-symbols-extended-service - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/data_warehouse/data_warehouse_server.py"]
alwaysApply: true
---

---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-26T09:03:52.863129

## üìÑ Additional Content from data_warehouse_server.mdc
# data_warehouse_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8015

## Purpose
ZmartBot Data Warehouse Service
Data storage, aggregation, and analytics service

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/data_warehouse/data_warehouse_server.py.py` | stop=`pkill -f data_warehouse_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8015** ‚úÖ **ACTIVE** - network connection
- ****** ‚úÖ **ACTIVE** - dependency connection

### Potential Connections
- **DataWarehouseServer** ‚è≥ **POTENTIAL** - High-potential integration between data_warehouse_server and DataWarehouseServer - Strong synergy opportunity (Confidence: 89%)
- **zmart-data-warehouse** ‚è≥ **POTENTIAL** - High-potential integration between data_warehouse_server and zmart-data-warehouse - Strong synergy opportunity (Confidence: 80%)
- **notification_server** ‚è≥ **POTENTIAL** - Moderate integration opportunity between data_warehouse_server and notification_server - Consider for future development (Confidence: 70%)
- **PortManagerService** ‚è≥ **POTENTIAL** - Moderate integration opportunity between data_warehouse_server and PortManagerService - Consider for future development (Confidence: 70%)
- **my-symbols-extended-service** ‚è≥ **POTENTIAL** - Moderate integration opportunity between data_warehouse_server and my-symbols-extended-service - Consider for future development (Confidence: 70%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/data_warehouse/data_warehouse_server.py"]
alwaysApply: true
---

---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-27T10:39:58.312141