# zmart-dashboard.mdc
> Type: service | Version: 1.0.0 | Owner: zmartbot | Status: ACTIVE | Level: 2 | Port: 3400
Core service component of the ZmartBot ecosystem providing essential functionality.

# zmart-dashboard.mdc
> Type: frontend | Version: 1.0.0 | Owner: zmartbot | Port: 3400

## Overview
ZmartBot professional dashboard providing real-time trading interface, portfolio management, and market analysis visualization with WebSocket connections and live data updates.

## Architecture & Integration
- **Service Type:** frontend
- **Dependencies:** zmart-api
- **Env Vars:** BINANCE_API_KEY, KUCOIN_API_KEY, CRYPTOMETER_API_KEY
- **Lifecycle:** start=`python3 start_guard.py --name frontend --port 3400 --cmd 'python3 professional_dashboard_server.py --port 3400' --max-wait 20` | stop=`pkill -f professional_dashboard_server` | migrate=`n/a`

## API Endpoints

### GET /
- Summary: Main dashboard interface
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Dashboard HTML interface
  - 500: Server error

### GET /health
- Summary: Dashboard health check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Health status
  - 503: Service unavailable

### GET /ready
- Summary: Dashboard readiness check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Ready status
  - 503: Not ready

### GET /api/dashboard/status
- Summary: Dashboard system status
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: System status information
  - 500: Server error

### GET /api/dashboard/portfolio
- Summary: Get portfolio overview
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Portfolio data
  - 401: Authentication required

### GET /api/dashboard/market-overview
- Summary: Get market overview data
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Market overview data
  - 500: Server error

### GET /api/dashboard/alerts
- Summary: Get active trading alerts
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Active alerts list
  - 401: Authentication required

### POST /api/dashboard/alerts
- Summary: Create new trading alert
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"symbol": "string", "condition": "string", "price": "float", "action": "string"}`
- Responses:
  - 200: Alert created successfully
  - 400: Invalid alert parameters
  - 401: Authentication required

### GET /api/dashboard/symbols
- Summary: Get available trading symbols
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Available symbols list
  - 500: Server error

### GET /api/dashboard/charts/{symbol}
- Summary: Get chart data for symbol
- Auth Required: No
- Request:
  - Params: `{"symbol": "string"}`
  - Query: `{"timeframe": "string", "limit": "int"}`
  - Body: `{}`
- Responses:
  - 200: Chart data
  - 404: Symbol not found

### WebSocket /ws/dashboard
- Summary: Real-time dashboard updates
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 101: WebSocket connection established
  - 401: Authentication required


## Triggers
- **API endpoint requests**
- **Workflow transitions**
- **Health check requests**

## Health & Readiness
- Liveness: `/health`
- Readiness: `/ready`
- Timeouts: startup_grace=20s, http_timeout=30s

## Observability
- Metrics: `/metrics`
- Logs: format=jsonl
- Dashboards: Dashboard Performance, User Interface Metrics

## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: Yes
- Ordering Hints: zmart-api → zmart-dashboard

## Performance & SLO (Initial)
- Baseline p95 (ms): 150
- Notes: Real-time dashboard with WebSocket connections and live data updates

## Failure Modes & Runbooks
- **api-connection-failed** — Symptoms: Dashboard shows no data, API errors — Remediation: Check zmart-api connectivity, restart dashboard service
- **websocket-disconnect** — Symptoms: Real-time updates stop working — Remediation: Reconnect WebSocket, check network connectivity
- **memory-leak** — Symptoms: Dashboard becomes slow, high memory usage — Remediation: Monitor memory usage, implement cleanup, restart service

## Rollback
- Snapshot required: Yes
- Playbook: isolate → restore_latest_snapshot → verify → reactivate

## Load Balancing
- Enabled: Yes
- Pool: frontend_pool

## Known Issues
- None recorded

## Changelog
- 1.0.0 (2025-08-24): Initial professional dashboard with real-time trading interface




## Service Connections & Dependencies

### Current Active Connections
- **port-3400** ✅ **ACTIVE** - network connection
- ****** ✅ **ACTIVE** - dependency connection

### Potential Connections
- **notification_server** ⏳ **POTENTIAL** - High-potential integration between zmart-dashboard and notification_server - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ⏳ **POTENTIAL** - High-potential integration between zmart-dashboard and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **my-symbols-extended-service** ⏳ **POTENTIAL** - High-potential integration between zmart-dashboard and my-symbols-extended-service - Strong synergy opportunity (Confidence: 80%)
- **update-master-orchestration** ⏳ **POTENTIAL** - High-potential integration between zmart-dashboard and update-master-orchestration - Strong synergy opportunity (Confidence: 80%)
- **BackendDoctorPack** ⏳ **POTENTIAL** - High-potential integration between zmart-dashboard and BackendDoctorPack - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution


## Requirements
- ✅ **Unique port assignment**
- ✅ **Complete MDC documentation**
- ✅ **Health endpoint implementation**
- ✅ **Master Orchestration integration**
