
## Description
Core service component of the ZmartBot ecosystem providing essential functionality.

## ü§ñ MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ‚úÖ **ACTIVE** - Service Enrollment Automation MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered service enrollment automation and optimization
- **Memory Gateway**: Persistent service enrollment state and metadata
- **UI Automation**: Automated service enrollment monitoring and health checks
- **Figma Integration**: Service enrollment dashboard design and UI management
- **Supabase Integration**: Cloud-based service enrollment analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Automation**: AI-powered service enrollment automation and optimization
- **Persistent State**: Cross-session service enrollment state and configuration management
- **Automated Monitoring**: Real-time service enrollment health and performance tracking
- **Visual Dashboard**: Interactive service enrollment management and testing interface
- **Cloud Analytics**: Comprehensive service enrollment usage and performance analytics

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8000/service-enrollment/health"

# Service enrollment automation via MCP
curl -X POST "http://127.0.0.1:8000/service-enrollment/automate" -d '{"service": "example", "action": "enroll"}'
```

### **MCP Status**
- **Claude Code**: ‚úÖ Active - AI-powered service enrollment automation
- **ByteRover**: ‚úÖ Active - Persistent service enrollment state management
- **UI TARS**: ‚úÖ Active - Automated service enrollment monitoring
- **Figma**: ‚úÖ Active - Service enrollment dashboard design
- **Supabase**: ‚úÖ Active - Cloud-based service enrollment analytics

---

# ServiceEnrollmentAutomation.mdc
> Type: rule | Version: 1.1.0 | Owner: zmartbot | Purpose: Prevent Service Enrollment Issues

## üö® **CRITICAL WARNING: SERVICE COUNTING ISSUES**

**‚ö†Ô∏è ROOT CAUSE IDENTIFIED**: The "Registered Services" count discrepancies were caused by services being registered in passport registry but **NOT** being added to Master Orchestration Agent. This step is **ABSOLUTELY CRITICAL** for accurate service counting.

**‚úÖ SOLUTION IMPLEMENTED**: The registration process now automatically includes Master Orchestration Agent updates via `update_master_orchestration_agent()` method.

**üîç VERIFICATION REQUIRED**: Always run `check_service_counts()` after registration to ensure accuracy.

## üéØ **AUTOMATIC SERVICE ENROLLMENT RULE**

### **CRITICAL REQUIREMENT**
**NEVER register a service without automatically updating orchestration files!**

### **Mandatory Enrollment Process**

#### **Step 1: Service Registration**
When a new service is registered with a passport ID, the following MUST happen automatically:

1. **Update Master Orchestration Agent** (`.cursor/rules/MasterOrchestrationAgent.mdc`)
   - Change status from "DISCOVERED" to "ACTIVE"
   - Add passport ID information
   - Update service count
   - **CRITICAL**: Use automated `update_master_orchestration_agent()` method

2. **Update OrchestrationStart** (`.cursor/rules/OrchestrationStart.mdc`)
   - Add service to startup order
   - Update service categories summary
   - Update passport services count

3. **Update Service Registration Automation** (`zmart-api/service_registration_automation.py`)
   - Add service to `service_startup_order` list
   - Update any relevant automation logic
   - **CRITICAL**: Automatically call `update_master_orchestration_agent()` during registration

4. **Verify Count Accuracy** (MANDATORY)
   - Run `check_service_counts()` to verify all systems match
   - Run `verify_master_agent_sync()` to ensure synchronization
   - Fix any discrepancies immediately

#### **Step 2: Verification Checklist**
After registration, verify:
- ‚úÖ Service appears in Master Orchestration Agent as ACTIVE
- ‚úÖ Service is included in OrchestrationStart startup order
- ‚úÖ Service is added to service registration automation
- ‚úÖ Passport ID is properly recorded
- ‚úÖ Service count is updated in all files

### **Automated Integration Pattern**

```python
# PSEUDOCODE: Automatic Enrollment Process
def enroll_service_in_orchestration(service_name, passport_id, port, service_type):
    """
    Automatically enroll a newly registered service in all orchestration systems
    """
    
    # 1. Update Master Orchestration Agent
    update_master_orchestration_agent(
        service_name=service_name,
        status="ACTIVE",
        passport_id=passport_id,
        port=port,
        service_type=service_type
    )
    
    # 2. Update OrchestrationStart
    update_orchestration_start(
        service_name=service_name,
        port=port,
        passport_id=passport_id
    )
    
    # 3. Update Service Registration Automation
    update_service_registration_automation(
        service_name=service_name,
        port=port
    )
    
    # 4. Verify integration
    verify_orchestration_integration(service_name)
    
    return True
```

### **Prevention Rules**

#### **Rule 1: No Manual Registration**
- **NEVER** manually register a service without following the complete enrollment process
- **ALWAYS** use the automated enrollment system
- **VERIFY** all orchestration files are updated

#### **Rule 2: Status Synchronization**
- **NEVER** leave a service as "DISCOVERED" if it has a passport ID
- **ALWAYS** update status to "ACTIVE" when passport is assigned
- **VERIFY** status consistency across all files

#### **Rule 3: Count Accuracy**
- **ALWAYS** update service counts in all relevant files
- **VERIFY** counts match between Master Orchestration Agent and OrchestrationStart
- **DOCUMENT** any discrepancies immediately

#### **Rule 4: Startup Order**
- **ALWAYS** add new services to the startup order
- **VERIFY** proper placement based on dependencies
- **TEST** startup sequence after changes

### **Error Prevention Checklist**

Before completing any service registration:

- [ ] Service has passport ID
- [ ] Master Orchestration Agent updated to ACTIVE
- [ ] OrchestrationStart includes service in startup order
- [ ] Service Registration Automation updated
- [ ] Service count incremented in all files
- [ ] Passport ID recorded in all relevant locations
- [ ] No status mismatches between files
- [ ] Startup order is logical and dependency-aware

### **Recovery Process**

If a service is found to be registered but not properly enrolled:

1. **Immediate Action**: Run the enrollment process
2. **Verification**: Check all orchestration files
3. **Documentation**: Update any missing information
4. **Testing**: Verify the service starts properly in orchestration
5. **Prevention**: Implement safeguards to prevent recurrence

### **Integration Points**

#### **Files That Must Be Updated**
1. `.cursor/rules/MasterOrchestrationAgent.mdc`
2. `.cursor/rules/OrchestrationStart.mdc`
3. `zmart-api/service_registration_automation.py`
4. Any other orchestration-related configuration files

#### **Automation Triggers**
- New passport ID assignment
- Service status change from DISCOVERED to ACTIVE
- New service.yaml file creation
- Service registration in passport registry

### **Quality Assurance**

#### **Automated Checks**
- Service count consistency validation
- Status synchronization verification
- Startup order dependency validation
- Passport ID presence verification

#### **Manual Verification**
- Review orchestration files after each registration
- Test startup sequence with new service
- Verify service appears in all dashboards
- Confirm health checks pass

### **Documentation Requirements**

#### **Registration Log**
- Service name and passport ID
- Registration timestamp
- Orchestration files updated
- Verification results
- Any issues encountered and resolved

#### **Change Tracking**
- Version numbers updated
- Changelog entries added
- Backup of previous state
- Rollback procedures documented


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**
- ‚úÖ **Master Orchestration integration**


---

**This rule ensures that NO service registration is complete without full orchestration integration!**


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**
- ‚úÖ **Master Orchestration integration**


---
**Document Version**: 1.1.0
**Last Updated**: 2025-08-28T14:00:00Z
**Status**: ‚úÖ **ACTIVE** - Enforced for all service registrations
**Owner**: ZmartBot Development Team
**Critical Update**: Master Orchestration Agent update functionality added to prevent counting discrepancies
description:
globs:
alwaysApply: true

## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**
- ‚úÖ **Master Orchestration integration**


---


## Triggers
- **Health check requests**
