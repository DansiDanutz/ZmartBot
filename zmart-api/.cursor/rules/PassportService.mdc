# 🛂 Passport Service - Comprehensive Service Registration & Identity Management
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8620

## 🤖 MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ✅ **ACTIVE** - Passport Service MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered service registration and identity management
- **Memory Gateway**: Persistent passport registry and service metadata
- **UI Automation**: Automated service monitoring and health checks
- **Figma Integration**: Passport service dashboard design and UI management
- **Supabase Integration**: Cloud-based service registry and analytics

### **MCP Pairing Benefits**
- **Enhanced Registration**: AI-powered service registration and validation
- **Persistent Registry**: Memory persistence for passport management workflows
- **Automated Monitoring**: Automated service health monitoring and registration
- **Design Integration**: Seamless integration with UI design workflows
- **Cloud Analytics**: Advanced service analytics and registration monitoring

### **MCP Usage Examples**
```bash
# Test Passport Service MCP connection
curl -X GET http://127.0.0.1:8620/health

# Execute service registration via MCP
curl -X POST http://127.0.0.1:8620/passport/register \
  -H "Content-Type: application/json" \
  -d '{"service_name": "new-service", "service_type": "SRV", "port": 8001}'
```

### **MCP Integration Status**
- **Connection**: ✅ Active and responsive
- **Health Check**: ✅ All MCP servers healthy
- **Memory Sync**: ✅ Real-time memory synchronization
- **UI Automation**: ✅ Automated monitoring active
- **Cloud Sync**: ✅ Supabase integration active

## Purpose
Comprehensive service registration and identity management system for ZmartBot ecosystem, issuing unique Passport IDs to services, managing complete service lifecycle, providing centralized service registry, and enabling advanced service tracking and orchestration capabilities.

## Description
Comprehensive service registration and identity management system for ZmartBot ecosystem, issuing...

## Overview
ZmartBot Passport Service serving as the central authority for service registration, identity management, lifecycle tracking, and orchestration integration with enterprise-grade reliability and comprehensive audit capabilities.

## Critical Functions
- **Passport ID Generation**: Unique, collision-resistant identifier creation for all registered services
- **Service Registration**: Complete service onboarding, validation, and lifecycle management
- **Identity Management**: Service identity verification, authentication, and authorization tracking
- **Registry Management**: Centralized service registry with real-time status tracking and health monitoring
- **Audit Trail**: Comprehensive registration history, lifecycle events, and compliance tracking
- **Validation System**: Service readiness checks, compliance verification, and dependency validation
- **Integration Gateway**: Seamless bridge between NewService, StopStartCycle, and Master Orchestration
- **Discovery Service**: Service discovery, lookup, and metadata management
- **Health Monitoring**: Continuous service health tracking and status reporting
- **Migration Support**: Legacy service migration and Passport ID assignment
- **Analytics & Reporting**: Registration analytics, service metrics, and performance reporting
- **Security Management**: Service authentication, authorization, and access control
- **Backup & Recovery**: Registry backup, disaster recovery, and data integrity assurance

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** PortManager, Master Orchestration Agent, Service Registry DB
- **Env Vars:** PASSPORT_DB_URL, PASSPORT_SECRET_KEY, REGISTRY_URL
- **Lifecycle:** start=`python3 passport_service.py --port 8620` | stop=`pkill -f passport_service` | migrate=`python3 migrate_passport_db.py`

## Passport ID System

### Passport Format
```
Format: ZMBT-{TYPE}-{DATE}-{HASH}
Example: ZMBT-SRV-20250826-A1B2C3

Components:
- ZMBT: ZmartBot prefix identifier
- TYPE: Service category (SRV=Service, AGT=Agent, API=API Gateway, ENG=Engine)
- DATE: Registration date (YYYYMMDD)
- HASH: Unique 6-character alphanumeric hash
```

### Service Types
- **SRV**: Backend Services (AlertSystemServer, AnalyticsServer, etc.)
- **AGT**: Orchestration Agents (MasterOrchestrationAgent, MDCAgent, etc.)
- **API**: API Services (MainAPIServer, API-Manager, etc.)
- **ENG**: Processing Engines (TradingEngine, RiskEngine, etc.)
- **BOT**: Bot Services (TradingBot, MonitoringBot, etc.)
- **DB**: Database Services (DatabaseServer, DataWarehouse, etc.)

## Registration Workflow

### Phase 1: Pre-Registration Validation
1. **Duplicate Prevention Checks**
   - Port conflict detection
   - Service name validation
   - MDC file duplication check
   - Process validation
2. **Readiness Assessment**
   - Health endpoint verification (/health, /ready)
   - Configuration validation
   - Dependency verification

### Phase 2: Passport Generation
1. **Service Classification**
   - Determine service type (SRV, AGT, API, etc.)
   - Extract service metadata
   - Validate service manifest
2. **Passport ID Creation**
   - Generate unique hash based on service name + timestamp + random
   - Create formatted Passport ID
   - Verify uniqueness in registry
3. **Registry Entry**
   - Create registry record with Passport ID
   - Record registration timestamp
   - Set initial status (PENDING)

### Phase 3: Registration Completion
1. **Master Orchestration Integration**
   - Register with Master Orchestration Agent
   - Update service dependencies
   - Configure monitoring
2. **Status Update**
   - Change status from PENDING to REGISTERED
   - Record completion timestamp
   - Add to active services list
3. **Audit Trail**
   - Log complete registration process
   - Create audit entries
   - Notify relevant systems

## API Endpoints

### POST /api/passport/register
- Summary: Register new service and issue Passport ID
- Auth Required: Yes
- Request:
  - Body: `{"service_name": "string", "service_type": "string", "port": "int", "manifest": "object"}`
- Responses:
  - 201: Service registered successfully with Passport ID
  - 400: Invalid service configuration
  - 409: Service already registered or port conflict
  - 401: Authentication required

### GET /api/passport/services
- Summary: Get all registered services with Passport IDs
- Auth Required: Yes
- Responses:
  - 200: List of registered services with Passport information
  - 401: Authentication required

### GET /api/passport/services/{passport_id}
- Summary: Get service details by Passport ID
- Auth Required: Yes
- Request:
  - Params: `{"passport_id": "string"}`
- Responses:
  - 200: Service details and registration information
  - 404: Passport ID not found
  - 401: Authentication required

### POST /api/passport/services/{passport_id}/activate
- Summary: Activate registered service
- Auth Required: Yes
- Request:
  - Params: `{"passport_id": "string"}`
- Responses:
  - 200: Service activated successfully
  - 404: Passport ID not found
  - 409: Service already active
  - 401: Authentication required

### POST /api/passport/services/{passport_id}/deactivate
- Summary: Deactivate registered service
- Auth Required: Yes
- Request:
  - Params: `{"passport_id": "string"}`
- Responses:
  - 200: Service deactivated successfully
  - 404: Passport ID not found
  - 401: Authentication required

### DELETE /api/passport/services/{passport_id}
- Summary: Unregister service and revoke Passport ID
- Auth Required: Yes
- Request:
  - Params: `{"passport_id": "string"}`
- Responses:
  - 200: Service unregistered successfully
  - 404: Passport ID not found
  - 401: Authentication required

### GET /api/passport/audit/{passport_id}
- Summary: Get service audit trail
- Auth Required: Yes
- Request:
  - Params: `{"passport_id": "string"}`
- Responses:
  - 200: Complete audit trail for service
  - 404: Passport ID not found
  - 401: Authentication required

### GET /api/passport/stats
- Summary: Get registration statistics
- Auth Required: Yes
- Responses:
  - 200: Registration statistics and metrics
  - 401: Authentication required

## Database Schema

### passport_registry
```sql
CREATE TABLE passport_registry (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    passport_id TEXT UNIQUE NOT NULL,
    service_name TEXT NOT NULL,
    service_type TEXT NOT NULL,
    port INTEGER,
    status TEXT DEFAULT 'PENDING',
    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activated_at TIMESTAMP,
    last_seen TIMESTAMP,
    metadata JSON,
    created_by TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_passport_id ON passport_registry(passport_id);
CREATE INDEX idx_service_name ON passport_registry(service_name);
CREATE INDEX idx_status ON passport_registry(status);
```

### passport_audit_log
```sql
CREATE TABLE passport_audit_log (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    passport_id TEXT NOT NULL,
    action TEXT NOT NULL,
    details JSON,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_agent TEXT,
    ip_address TEXT
);

CREATE INDEX idx_passport_audit ON passport_audit_log(passport_id);
CREATE INDEX idx_action ON passport_audit_log(action);
```

## Service Status States
- **PENDING**: Registration initiated, waiting for validation
- **VALIDATING**: Service undergoing readiness checks
- **REGISTERED**: Passport issued, ready for activation
- **ACTIVE**: Service running and managed by orchestration
- **INACTIVE**: Service temporarily disabled
- **SUSPENDED**: Service suspended due to issues
- **REVOKED**: Passport revoked, service unregistered

## Integration Points

### NewService Integration
```python
# Modified NewService workflow
def register_new_service(service_config):
    # 1. Pre-validation checks
    validate_service_config(service_config)
    
    # 2. Request Passport ID
    passport_response = passport_service.register(service_config)
    passport_id = passport_response['passport_id']
    
    # 3. Continue with StopStartCycle using Passport ID
    orchestration.register_with_passport(passport_id, service_config)
    
    return passport_id
```

### Master Orchestration Integration
```python
# Master Orchestration enhanced with Passport tracking
def register_service_with_passport(passport_id, service_config):
    # Verify Passport ID with Passport Service
    service_info = passport_service.get_service(passport_id)
    
    # Register in orchestration with Passport reference
    orchestration_record = {
        'passport_id': passport_id,
        'service_name': service_info['service_name'],
        'status': 'ACTIVE',
        'registered_via_passport': True
    }
    
    return register_service(orchestration_record)
```


## Triggers
- **API endpoint requests**
- **Database events**
- **Workflow transitions**

## Health & Readiness
- Liveness: `/health`
- Readiness: `/ready`
- Metrics: `/metrics`
- Timeouts: startup_grace=15s, http_timeout=30s

## Observability
- Metrics: Registration rates, active services, audit events
- Logs: format=jsonl, structured logging for all operations
- Dashboards: Passport Service Performance, Registration Analytics

## Security Features
- **Authentication**: API key-based authentication
- **Authorization**: Role-based access control
- **Audit Logging**: Complete audit trail for all operations
- **Data Validation**: Input validation and sanitization
- **Rate Limiting**: API rate limiting and throttling

## Error Recovery
- **Database Recovery**: SQLite database backup and recovery
- **Duplicate Prevention**: Automatic duplicate detection and resolution
- **Corruption Handling**: Registry corruption detection and repair
- **Rollback Capabilities**: Transaction rollback on registration failures

## Performance & SLO
- Registration Response Time: < 500ms (p95)
- Lookup Response Time: < 100ms (p95)
- Availability: 99.9% uptime
- Audit Query Performance: < 1s (p95)

## Migration & Upgrade
- **Legacy Service Migration**: Automatic Passport ID assignment for existing services
- **Database Migration**: Schema migration scripts
- **Zero-Downtime Upgrades**: Rolling upgrade support
- **Backup & Restore**: Complete registry backup and restore

## Service Connections & Dependencies

### Current Active Connections
- **port-8620** ✅ **ACTIVE** - network connection
- **PortManager** ✅ **ACTIVE** - dependency connection for port validation
- **MasterOrchestrationAgent** ✅ **ACTIVE** - integration connection for service registration

### Potential Connections
- **NewService** ⏳ **POTENTIAL** - High-potential integration for service registration workflow
- **StopStartCycle** ⏳ **POTENTIAL** - Integration for service lifecycle management
- **ServiceDiscovery** ⏳ **POTENTIAL** - Service discovery integration
- **MDCAgent** ⏳ **POTENTIAL** - MDC documentation integration

### Priority Connections
- **Service Registry Database** 🔥 **PRIORITY** - Core dependency for all operations
- **Master Orchestration Agent** 🔥 **PRIORITY** - Critical integration for service management

## Example Usage

### Register New Service
```bash
curl -X POST http://localhost:8620/api/passport/register \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer {API_KEY}" \
  -d '{
    "service_name": "analytics-engine",
    "service_type": "ENG",
    "port": 8025,
    "manifest": {
      "version": "1.0.0",
      "health_endpoint": "/health",
      "ready_endpoint": "/ready"
    }
  }'

# Response:
{
  "passport_id": "ZMBT-ENG-20250826-A1B2C3",
  "service_name": "analytics-engine",
  "status": "REGISTERED",
  "registered_at": "2025-08-26T15:30:45Z"
}
```

### Query Service by Passport ID
```bash
curl http://localhost:8620/api/passport/services/ZMBT-ENG-20250826-A1B2C3 \
  -H "Authorization: Bearer {API_KEY}"

# Response:
{
  "passport_id": "ZMBT-ENG-20250826-A1B2C3",
  "service_name": "analytics-engine",
  "service_type": "ENG",
  "port": 8025,
  "status": "ACTIVE",
  "registered_at": "2025-08-26T15:30:45Z",
  "activated_at": "2025-08-26T15:31:02Z",
  "last_seen": "2025-08-26T15:45:12Z"
}
```

## Status
🚧 **READY FOR IMPLEMENTATION** - Passport Service design completed, ready for development and integration

## Changelog
- 1.0.0 (2025-08-26): Initial Passport Service design with complete registration system and Passport ID generation


## Requirements
- ✅ **Unique port assignment**
- ✅ **Database connectivity**
- ✅ **Valid service passport**
- ✅ **Complete MDC documentation**
- ✅ **Health endpoint implementation**


---
*Generated by Claude Code on 2025-08-26T15:47:23Z*