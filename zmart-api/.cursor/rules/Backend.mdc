
## Description
Core backend service component of the ZmartBot ecosystem providing essential functionality.

@agent: BackendService

## ðŸ¤– MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: âœ… **ACTIVE** - Backend MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered backend optimization and analysis
- **Memory Gateway**: Persistent backend state and metadata
- **UI Automation**: Automated backend monitoring and health checks
- **Figma Integration**: Backend dashboard design and UI management
- **Supabase Integration**: Cloud-based backend analytics and reporting

### **MCP Integration Benefits**
- **AI-Powered Backend Management**: Intelligent backend optimization and analysis
- **Persistent State**: Backend state and metadata storage
- **Automated Monitoring**: Real-time backend health and performance monitoring
- **Visual Dashboard**: Backend process visualization and status tracking
- **Cloud Analytics**: Backend performance metrics and optimization insights

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8000/health" \
  -H "Content-Type: application/json"

# Backend management via MCP
curl -X POST "http://127.0.0.1:8000/backend/optimize" \
  -H "Content-Type: application/json" \
  -d '{"action": "cache_optimization", "service": "trading"}'
```

### **MCP Status**
- **Claude Code**: âœ… Active - AI-powered backend optimization
- **ByteRover**: âœ… Active - Persistent backend state management
- **UI TARS**: âœ… Active - Automated backend monitoring
- **Figma**: âœ… Active - Backend dashboard design
- **Supabase**: âœ… Active - Cloud-based backend analytics

# Backend - FastAPI Server (Port 8000)

## Overview
The **official backend** of the ZmartBot project is the **FastAPI Server** running on **port 8000**. This is the core API server that provides all trading operations, data processing, external API integrations, and business logic for the entire ZmartBot platform.

## Backend Architecture

### **Core Framework**
- **Framework**: FastAPI (Python 3.11+)
- **Port**: 8000 (official backend port)
- **Architecture**: RESTful API with WebSocket support
- **Database**: PostgreSQL, Redis, InfluxDB, SQLite
- **Authentication**: JWT-based authentication system

### **API Structure**
- **Base URL**: `http://localhost:8000`
- **API Version**: `/api/v1/`
- **Documentation**: `/docs` (Swagger UI)
- **Health Check**: `/health`

## Backend Components

### 1. **Trading API Endpoints**
- **My Symbols**: `/api/v1/trading/my-symbols` - Manage trading symbols
- **Portfolio**: `/api/v1/portfolio` - Portfolio management and tracking
- **Orders**: `/api/v1/orders` - Order placement and management
- **Positions**: `/api/v1/positions` - Position tracking and management
- **Risk Management**: `/api/v1/risk` - Risk assessment and controls

### 2. **Market Data Services**
- **Real-time Prices**: `/api/v1/market/prices` - Live price feeds
- **Historical Data**: `/api/v1/market/history` - Historical price data
- **Market Indicators**: `/api/v1/market/indicators` - Technical indicators
- **Market Sentiment**: `/api/v1/market/sentiment` - Market sentiment analysis

### 3. **Alert System**
- **Enhanced Alerts**: `/api/v1/alerts/enhanced` - Advanced trading alerts
- **Technical Alerts**: `/api/v1/alerts/technical` - Technical analysis alerts
- **Risk Alerts**: `/api/v1/alerts/risk` - Risk management alerts
- **Alert History**: `/api/v1/alerts/history` - Alert performance tracking

### 4. **External API Integrations**
- **KuCoin API**: Futures trading, account management, market data
- **Binance API**: Market data, price feeds, trading operations
- **Cryptometer API**: Advanced market analysis and indicators
- **KingFisher API**: Liquidation analysis and risk assessment
- **OpenAI API**: AI-powered analysis and predictions

### 5. **Data Processing Services**
- **RiskMetric Engine**: Risk assessment and scoring
- **Pattern Recognition**: Technical pattern detection
- **Signal Processing**: Trading signal generation
- **Data Analytics**: Market data analysis and insights

## Database Management

### **Primary Databases**
- **PostgreSQL**: Main application database
- **Redis**: Caching and session management
- **InfluxDB**: Time-series data storage
- **SQLite**: Local configuration and logs

### **Database Services**
- **Connection Pooling**: Optimized database connections
- **Data Migration**: Automated schema updates
- **Backup Management**: Automated backup systems
- **Data Validation**: Input validation and sanitization

## External API Integrations

### **KuCoin Integration**
- **Futures Trading**: Leveraged trading operations
- **Account Management**: Balance and position tracking
- **Market Data**: Real-time market feeds
- **Order Management**: Advanced order types

### **Binance Integration**
- **Spot Trading**: Spot market operations
- **Market Data**: Comprehensive market information
- **Price Feeds**: Real-time price updates
- **Trading Pairs**: Extensive symbol coverage

### **Cryptometer Integration**
- **Market Analysis**: Advanced market indicators
- **Risk Assessment**: Comprehensive risk metrics
- **Pattern Recognition**: Technical pattern analysis
- **Sentiment Analysis**: Market sentiment indicators

### **KingFisher Integration**
- **Liquidation Analysis**: Liquidation cluster detection
- **Risk Assessment**: Advanced risk scoring
- **Market Structure**: Market microstructure analysis
- **Toxic Flow**: Toxic order flow detection

## Security Features

### **Authentication & Authorization**
- **JWT Tokens**: Secure token-based authentication
- **Role-based Access**: User role management
- **API Key Management**: Secure API key handling
- **Session Management**: Secure session handling

### **Data Protection**
- **Input Validation**: Comprehensive input sanitization
- **SQL Injection Protection**: Parameterized queries
- **XSS Protection**: Cross-site scripting prevention
- **Rate Limiting**: API rate limiting and throttling

### **Encryption**
- **HTTPS**: Secure communication protocol
- **Data Encryption**: Sensitive data encryption
- **Key Management**: Secure key storage and rotation
- **Audit Logging**: Comprehensive security logging

## Performance Optimization

### **Caching System**
- **Redis Caching**: High-performance data caching
- **Memory Optimization**: Efficient memory usage
- **Query Optimization**: Database query optimization
- **Response Caching**: API response caching

### **Async Processing**
- **Asynchronous Operations**: Non-blocking API operations
- **Background Tasks**: Background data processing
- **WebSocket Support**: Real-time data streaming
- **Event-driven Architecture**: Event-based processing

### **Load Balancing**
- **Request Distribution**: Load balancing capabilities
- **Health Checks**: Service health monitoring
- **Auto-scaling**: Automatic scaling capabilities
- **Failover**: High availability and failover

## Monitoring & Logging

### **System Monitoring**
- **Health Checks**: `/health` endpoint monitoring
- **Performance Metrics**: Response time tracking
- **Error Monitoring**: Error tracking and alerting
- **Resource Usage**: CPU, memory, disk monitoring

### **Logging System**
- **Structured Logging**: JSON-formatted logs
- **Log Levels**: DEBUG, INFO, WARNING, ERROR, CRITICAL
- **Log Rotation**: Automated log rotation
- **Log Analysis**: Log analysis and reporting

### **Metrics Collection**
- **API Metrics**: Request/response metrics
- **Database Metrics**: Database performance metrics
- **External API Metrics**: Integration performance
- **Business Metrics**: Trading and business metrics

## Error Handling

### **Exception Management**
- **Global Exception Handler**: Centralized error handling
- **Custom Exceptions**: Domain-specific exceptions
- **Error Responses**: Standardized error responses
- **Error Recovery**: Automatic error recovery

### **Validation**
- **Request Validation**: Input data validation
- **Response Validation**: Output data validation
- **Schema Validation**: Data schema validation
- **Business Rule Validation**: Business logic validation

## Configuration Management

### **Environment Configuration**
- **Environment Variables**: Secure configuration management
- **Configuration Files**: YAML/JSON configuration
- **Secrets Management**: Secure secrets handling
- **Feature Flags**: Feature toggle management

### **API Configuration**
- **Rate Limiting**: API rate limit configuration
- **CORS Settings**: Cross-origin resource sharing
- **Authentication**: Authentication configuration
- **Logging**: Logging configuration

## Development Features

### **API Documentation**
- **Swagger UI**: Interactive API documentation
- **OpenAPI Specification**: Standard API specification
- **Code Examples**: Request/response examples
- **Testing Tools**: Built-in testing capabilities

### **Development Tools**
- **Hot Reload**: Development server hot reload
- **Debug Mode**: Debug mode with detailed logging
- **Testing Framework**: Comprehensive testing suite
- **Code Quality**: Linting and code quality tools

## Integration Points

### **With Frontend (Port 3400)**
- **RESTful APIs**: Standard HTTP API communication
- **WebSocket**: Real-time data streaming
- **CORS**: Cross-origin resource sharing
- **Authentication**: Secure frontend-backend communication

### **With Orchestration Agent**
- **Service Coordination**: Service lifecycle management
- **Health Monitoring**: Service health tracking
- **Data Synchronization**: Data consistency management
- **Event Handling**: Event-driven communication

### **With Port Manager**
- **Port Assignment**: Dynamic port management
- **Service Registration**: Service registration and discovery
- **Conflict Resolution**: Port conflict resolution
- **Resource Management**: Resource allocation and management

### **With Master Orchestration Agent**
- **Intelligence Integration**: AI-powered decision making
- **Learning Integration**: Machine learning integration
- **Pattern Recognition**: Advanced pattern analysis
- **Predictive Analytics**: Predictive modeling integration

## Success Criteria

### **Performance**
- âœ… Sub-second API response times
- âœ… 99.9% uptime availability
- âœ… High throughput handling
- âœ… Low latency operations

### **Reliability**
- âœ… Robust error handling
- âœ… Automatic recovery mechanisms
- âœ… Data consistency guarantees
- âœ… Fault tolerance capabilities

### **Security**
- âœ… Secure authentication
- âœ… Data protection
- âœ… API security
- âœ… Audit compliance

### **Scalability**
- âœ… Horizontal scaling support
- âœ… Load balancing capabilities
- âœ… Resource optimization
- âœ… Performance monitoring

The FastAPI Backend on port 8000 is the robust, scalable, and secure core of the ZmartBot platform, providing all the necessary APIs, data processing, and business logic for comprehensive trading operations.
description:
globs:
alwaysApply: true

## Requirements
- âœ… **Unique port assignment**
- âœ… **Database connectivity**
- âœ… **Health endpoint implementation**
- âœ… **Master Orchestration integration**


---

## Triggers
- **API endpoint requests**
- **Database events**
- **Health check requests**
