# ðŸ©º Doctor Service - AI-Powered System Diagnostics & Recovery
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8700

## ðŸ¤– MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: âœ… **ACTIVE** - Doctor Service MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered diagnostic analysis and solution generation
- **Memory Gateway**: Persistent diagnostic history and learning metadata
- **UI Automation**: Automated service monitoring and health checks
- **Figma Integration**: Doctor service dashboard design and UI management
- **Supabase Integration**: Cloud-based diagnostic analytics and reporting

### **MCP Pairing Benefits**
- **Enhanced Diagnostics**: AI-powered problem analysis and solution generation
- **Persistent Learning**: Memory persistence for diagnostic workflows and learning
- **Automated Monitoring**: Automated service health monitoring and diagnostics
- **Design Integration**: Seamless integration with UI design workflows
- **Cloud Analytics**: Advanced diagnostic analytics and reporting monitoring

### **MCP Usage Examples**
```bash
# Test Doctor Service MCP connection
curl -X GET http://127.0.0.1:8700/health

# Execute diagnostic analysis via MCP
curl -X POST http://127.0.0.1:8700/api/doctor/diagnose \
  -H "Content-Type: application/json" \
  -d '{"service_name": "zmart-api", "problem_description": "Service not responding"}'
```

### **MCP Integration Status**
- **Connection**: âœ… Active and responsive
- **Health Check**: âœ… All MCP servers healthy
- **Memory Sync**: âœ… Real-time memory synchronization
- **UI Automation**: âœ… Automated monitoring active
- **Cloud Sync**: âœ… Supabase integration active

## Purpose
AI-powered diagnostic service for ZmartBot ecosystem that analyzes service problems, generates intelligent solutions, and provides automated recovery strategies when auto-fix mechanisms fail.

## Description
AI-powered diagnostic service for ZmartBot ecosystem that analyzes service problems, generates in...

## Overview
Advanced AI diagnostic system that receives problem reports from the Service Dashboard, analyzes service issues using ChatGPT integration, and provides comprehensive solutions for system recovery and optimization.

## Critical Functions
- **AI Problem Analysis**: Uses ChatGPT to analyze complex service issues
- **Solution Generation**: Creates step-by-step recovery procedures
- **Root Cause Analysis**: Identifies underlying causes of service failures
- **Prevention Recommendations**: Suggests improvements to prevent future issues
- **Command Generation**: Provides executable commands for problem resolution
- **Integration with Orchestration**: Seamlessly works with Master Orchestration Agent
- **Learning System**: Continuously improves diagnostic accuracy
- **Emergency Response**: Handles critical service failures with priority

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** passport-service, master-orchestration-agent
- **AI Integration:** ChatGPT API for advanced analysis
- **Database:** SQLite for diagnostic history and learning
- **Env Vars:** DOCTOR_SERVICE_TOKEN, OPENAI_API_KEY, ORCHESTRATION_URL
- **Lifecycle:** start=`./start_doctor_service.sh` | stop=`./stop_doctor_service.sh` | restart=`./restart_doctor_service.sh`

## Key Features
- **Multi-Modal Analysis**: Processes text, logs, health data, and system metrics
- **Contextual Understanding**: Analyzes service dependencies and interactions
- **Solution Ranking**: Provides multiple solutions ranked by success probability
- **Execution Planning**: Creates safe, step-by-step execution plans
- **Rollback Procedures**: Always includes rollback strategies
- **Documentation**: Generates comprehensive diagnostic reports
- **API Integration**: RESTful API for dashboard and orchestration integration

## API Endpoints

### POST /api/doctor/diagnose
- Summary: Analyze service problem and generate solution
- Auth Required: Yes (Bearer doctor-service-token)
- Request:
  - Headers: `{"Authorization": "Bearer doctor-service-token", "Content-Type": "application/json"}`
  - Body: `{
    "service_name": "string",
    "problem_description": "string",
    "service_details": "object",
    "mdc_content": "string",
    "health_status": "object",
    "auto_fix_attempted": "boolean",
    "priority": "low|normal|high|critical"
  }`
- Responses:
  - 200: Diagnostic analysis with solutions
  - 400: Invalid request format
  - 401: Authentication required
  - 429: Rate limit exceeded
  - 500: AI analysis failed

### GET /api/doctor/diagnosis/{diagnosis_id}
- Summary: Get specific diagnosis details
- Auth Required: Yes
- Request:
  - Params: `{"diagnosis_id": "string"}`
- Responses:
  - 200: Diagnosis details
  - 404: Diagnosis not found

### POST /api/doctor/execute-solution
- Summary: Execute recommended solution
- Auth Required: Yes
- Request:
  - Body: `{
    "diagnosis_id": "string",
    "solution_id": "string",
    "confirmation": "boolean"
  }`
- Responses:
  - 200: Execution started
  - 400: Invalid parameters
  - 409: Service busy

### GET /api/doctor/history
- Summary: Get diagnostic history
- Auth Required: Yes
- Request:
  - Query: `{"service_name": "string?", "limit": "int?", "status": "string?"}`
- Responses:
  - 200: Diagnostic history list

### POST /api/doctor/feedback
- Summary: Provide feedback on solution effectiveness
- Auth Required: Yes
- Request:
  - Body: `{
    "diagnosis_id": "string",
    "solution_id": "string",
    "success": "boolean",
    "feedback": "string",
    "execution_time": "number"
  }`
- Responses:
  - 200: Feedback recorded

### GET /health
- Summary: Doctor service health check
- Auth Required: No
- Responses:
  - 200: Service healthy

## Diagnostic Process Flow

### 1. Problem Reception
```mermaid
graph TD
    A[Service Dashboard] -->|Problem Report| B[Doctor Service]
    B --> C{Validate Request}
    C -->|Valid| D[Queue Analysis]
    C -->|Invalid| E[Return Error]
    D --> F[AI Analysis Pipeline]
```

### 2. AI Analysis Pipeline
```mermaid
graph TD
    A[Problem Data] --> B[Context Enrichment]
    B --> C[ChatGPT Analysis]
    C --> D[Solution Generation]
    D --> E[Safety Validation]
    E --> F[Response Formatting]
    F --> G[Database Storage]
```

### 3. Solution Execution
```mermaid
graph TD
    A[Solution Request] --> B{Safety Check}
    B -->|Safe| C[Execute Commands]
    B -->|Unsafe| D[Manual Review Required]
    C --> E[Monitor Progress]
    E --> F[Rollback if Failed]
    E --> G[Success Confirmation]
```

## AI Integration Specifications

### ChatGPT Prompt Template
```
You are an expert system administrator analyzing a service problem in the ZmartBot trading platform.

CONTEXT:
- Service: {service_name}
- Type: {service_type}
- Port: {service_port}
- Passport ID: {passport_id}
- Problem: {problem_description}

SERVICE DETAILS:
{service_details}

HEALTH STATUS:
{health_status}

AUTO-FIX ATTEMPTS:
{auto_fix_results}

MDC DOCUMENTATION:
{mdc_content}

ANALYSIS REQUIRED:
1. Root cause analysis
2. Step-by-step solution (prioritize safety)
3. Prevention recommendations
4. Monitoring improvements
5. Risk assessment for each solution step

FORMAT RESPONSE AS:
{
  "diagnosis": "detailed analysis",
  "root_cause": "primary cause identification",
  "solutions": [
    {
      "priority": 1,
      "description": "solution description",
      "commands": ["command1", "command2"],
      "risk_level": "low|medium|high",
      "estimated_time": "5 minutes",
      "rollback_plan": ["rollback_command1"]
    }
  ],
  "prevention": "prevention recommendations",
  "monitoring": "monitoring improvements"
}
```

### Response Processing
- **Safety Validation**: All commands validated against safe operation rules
- **Dependency Checking**: Ensures solution doesn't break service dependencies
- **Resource Impact**: Estimates CPU, memory, and disk impact
- **Time Estimation**: Provides execution time estimates
- **Success Probability**: ML-based success rate prediction

## Database Schema

### diagnoses table
```sql
CREATE TABLE diagnoses (
    id TEXT PRIMARY KEY,
    service_name TEXT NOT NULL,
    problem_description TEXT NOT NULL,
    problem_level TEXT NOT NULL,
    diagnosis_result JSON NOT NULL,
    ai_model_version TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending',
    execution_result JSON,
    feedback JSON
);
```

### solutions table
```sql
CREATE TABLE solutions (
    id TEXT PRIMARY KEY,
    diagnosis_id TEXT NOT NULL,
    solution_data JSON NOT NULL,
    priority INTEGER,
    execution_status TEXT DEFAULT 'pending',
    success_rate REAL,
    execution_time INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (diagnosis_id) REFERENCES diagnoses (id)
);
```

### feedback table
```sql
CREATE TABLE feedback (
    id TEXT PRIMARY KEY,
    diagnosis_id TEXT NOT NULL,
    solution_id TEXT NOT NULL,
    success BOOLEAN,
    feedback_text TEXT,
    execution_time INTEGER,
    improvements JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (diagnosis_id) REFERENCES diagnoses (id),
    FOREIGN KEY (solution_id) REFERENCES solutions (id)
);
```

## Service Configuration

### Environment Variables
```bash
DOCTOR_SERVICE_PORT=8700
DOCTOR_SERVICE_TOKEN=doctor-service-token
OPENAI_API_KEY=your-openai-api-key
ORCHESTRATION_SERVICE_URL=http://localhost:8002
PASSPORT_SERVICE_URL=http://localhost:8620
DATABASE_PATH=/Users/dansidanutz/Desktop/ZmartBot/data/doctor_service.db
LOG_LEVEL=INFO
MAX_CONCURRENT_DIAGNOSES=5
AI_TIMEOUT_SECONDS=60
ENABLE_AUTO_EXECUTION=false
```

### Startup Script (start_doctor_service.sh)
```bash
#!/bin/bash
echo "ðŸ©º Starting Doctor Service..."
cd /Users/dansidanutz/Desktop/ZmartBot/services/doctor-service
source venv/bin/activate
python3 doctor_service.py --port 8700 --host 0.0.0.0
```

## Safety & Security Features

### Command Safety Rules
- **Whitelist Approach**: Only pre-approved commands allowed
- **Dry Run Mode**: All commands tested in safe mode first
- **Resource Limits**: CPU and memory usage limits enforced
- **Backup Requirements**: Critical operations require backup
- **Confirmation Required**: High-risk operations need manual confirmation

### Data Protection
- **Encrypted Storage**: All diagnostic data encrypted at rest
- **API Security**: JWT token authentication with rotation
- **Audit Logging**: Complete audit trail of all operations
- **Data Retention**: Automatic cleanup after 90 days
- **Privacy Protection**: No sensitive data sent to external APIs

## Integration Points

### Service Dashboard Integration
```javascript
// Send problem to Doctor Service
const response = await fetch('http://localhost:8700/api/doctor/diagnose', {
    method: 'POST',
    headers: {
        'Authorization': 'Bearer doctor-service-token',
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(problemReport)
});
```

### Orchestration Integration
```python
# Execute solution via orchestration
orchestration_client.execute_commands(
    service_name=service_name,
    commands=solution.commands,
    rollback_plan=solution.rollback_plan
)
```

## Monitoring & Observability

### Health Metrics
- **AI Response Time**: ChatGPT API response latency
- **Diagnosis Success Rate**: Percentage of successful diagnoses
- **Solution Effectiveness**: Success rate of executed solutions
- **Queue Depth**: Number of pending diagnoses
- **Resource Usage**: CPU, memory, disk usage
- **Error Rates**: API errors, AI failures, execution failures

### Alerting Rules
- **High Queue Depth**: > 10 pending diagnoses
- **AI API Failures**: > 5% failure rate
- **Low Success Rate**: < 80% solution success rate
- **Resource Exhaustion**: > 90% CPU or memory usage
- **Critical Service Down**: Priority service failures

## Learning & Improvement

### Machine Learning Components
- **Success Prediction**: ML model to predict solution success rates
- **Problem Classification**: Automatic categorization of problems
- **Solution Ranking**: Intelligent ranking based on historical data
- **Pattern Recognition**: Identifies recurring issues
- **Optimization Suggestions**: Recommends system improvements

### Continuous Learning
- **Feedback Loop**: User feedback improves AI prompts
- **Success Tracking**: Monitors solution effectiveness over time
- **Model Updates**: Regular updates to prediction models
- **Knowledge Base**: Builds comprehensive problem-solution database

## Error Handling & Recovery

### Failure Scenarios
- **AI API Unavailable**: Fallback to rule-based diagnostics
- **Solution Execution Failed**: Automatic rollback procedures
- **Service Overload**: Queue management and prioritization
- **Database Corruption**: Automatic backup restoration
- **Network Issues**: Retry mechanisms with exponential backoff

### Recovery Procedures
1. **Service Restart**: Automated service restart for minor issues
2. **Database Recovery**: Restore from latest backup
3. **AI Fallback**: Use cached responses for common problems
4. **Manual Intervention**: Escalate to system administrators
5. **Emergency Mode**: Limited functionality for critical issues

## Performance & SLO

### Service Level Objectives
- **Availability**: 99.9% uptime
- **Response Time**: < 30 seconds for diagnosis
- **AI Analysis Time**: < 60 seconds per problem
- **Solution Success Rate**: > 85% effectiveness
- **Queue Processing**: < 5 minutes average wait time

### Performance Optimization
- **Caching**: Cache common diagnoses and solutions
- **Connection Pooling**: Efficient database connections
- **Async Processing**: Non-blocking I/O operations
- **Load Balancing**: Distribute load across multiple instances
- **Resource Management**: Intelligent resource allocation

## Deployment & Scaling

### Single Instance Deployment
- **Development**: Single process for development/testing
- **Production**: With health checks and monitoring
- **Resource Requirements**: 2 CPU cores, 4GB RAM, 10GB disk

### High Availability Deployment
- **Load Balancer**: Multiple service instances
- **Database Clustering**: Replicated database setup
- **Cache Layer**: Redis for shared caching
- **Message Queue**: RabbitMQ for async processing
- **Monitoring Stack**: Prometheus + Grafana

## Future Enhancements

### Planned Features
- **Visual Diagnostics**: Web-based diagnostic interface
- **Predictive Analysis**: Predict problems before they occur
- **Advanced AI Models**: Integration with GPT-4 and specialized models
- **Mobile Notifications**: Push notifications for critical issues
- **Integration APIs**: REST and GraphQL APIs for external tools

### Research Areas
- **Anomaly Detection**: ML-based anomaly detection
- **Natural Language Interface**: Chat-based diagnostic interface
- **Automated Testing**: AI-generated test cases
- **Performance Prediction**: ML-based performance forecasting
- **Self-Healing Systems**: Automated problem prevention

## Failure Modes & Runbooks

### ai-api-timeout
**Symptoms**: AI analysis requests timing out, slow response times
**Impact**: Delayed diagnoses, service requests queuing up
**Detection**: Response time > 60 seconds, API timeout errors
**Remediation**:
1. Check OpenAI API status and rate limits
2. Verify network connectivity to OpenAI servers
3. Restart Doctor Service if persistent
4. Fallback to cached responses for common issues

### database-corruption
**Symptoms**: Database errors, data inconsistency, service crashes
**Impact**: Loss of diagnostic history, service unavailable
**Detection**: SQLite errors, data validation failures
**Remediation**:
1. Stop Doctor Service immediately
2. Backup current database state
3. Restore from latest known good backup
4. Run database integrity checks
5. Restart service and verify functionality

### solution-execution-failure
**Symptoms**: Solutions failing to execute, rollback procedures activated
**Impact**: Problems not resolved, potential system instability
**Detection**: High failure rate, orchestration API errors
**Remediation**:
1. Review solution safety validation
2. Check orchestration service connectivity
3. Verify command permissions and syntax
4. Update AI prompts to generate safer solutions
5. Manual intervention for critical services

### queue-overflow
**Symptoms**: Diagnostic queue growing, increased response times
**Impact**: Delayed problem resolution, user frustration
**Detection**: Queue depth > 20, average wait time > 10 minutes
**Remediation**:
1. Scale up service instances temporarily
2. Prioritize critical service diagnoses
3. Clear completed/failed diagnoses from queue
4. Analyze for recurring problems causing queue buildup
5. Optimize AI processing pipeline

## Development & Testing

### Development Environment
- **Local Setup**: Docker-compose environment
- **Testing Database**: SQLite in-memory database
- **Mock AI API**: Simulated ChatGPT responses
- **Test Services**: Mock services for testing diagnostics

### Testing Strategy
- **Unit Tests**: Individual component testing
- **Integration Tests**: API endpoint testing
- **AI Response Tests**: Mock AI response validation
- **End-to-End Tests**: Complete diagnostic workflow
- **Load Tests**: Performance under high load
- **Chaos Testing**: Failure scenario testing

### Quality Assurance
- **Code Coverage**: > 90% test coverage
- **Static Analysis**: Automated code quality checks
- **Security Scanning**: Vulnerability assessments
- **Performance Profiling**: Resource usage optimization
- **Documentation**: Comprehensive API documentation

## Status
âœ… **OPERATIONAL** - Advanced AI diagnostic service fully implemented and running on port 8700

## Implementation Details
- **Service Location**: `/Users/dansidanutz/Desktop/ZmartBot/services/doctor-service/`
- **Main Service**: `doctor_service.py` (1000+ lines of production-ready code)
- **Database**: SQLite with comprehensive schema for diagnoses, solutions, feedback
- **Dependencies**: FastAPI, OpenAI, SQLAlchemy, aiosqlite, and 40+ production libraries
- **Scripts**: Complete startup/stop/restart automation scripts
- **Integration**: Fully integrated with Service Dashboard for seamless workflow

## Operational Features
- âœ… **AI Analysis Pipeline**: ChatGPT integration for intelligent problem diagnosis
- âœ… **Safety Validation**: Command execution with safety rules and rollback procedures
- âœ… **Learning System**: Feedback-based improvement with success rate tracking
- âœ… **Database Storage**: Complete audit trail and diagnostic history
- âœ… **RESTful API**: Production endpoints for diagnosis, history, feedback
- âœ… **Health Monitoring**: Real-time health checks and service status
- âœ… **Background Processing**: Async task handling for statistics and optimization
- âœ… **Service Dashboard Integration**: Seamless auto-fix â†’ Doctor workflow

## Current Metrics
- **Port**: 8700 (Active and responding)
- **Passport ID**: ZMBT-SRV-20250826-51B6B9 (Officially registered)
- **Health Status**: Healthy and operational
- **Database**: Initialized and ready (/Users/dansidanutz/Desktop/ZmartBot/data/doctor_service.db)
- **API Endpoints**: 8 production endpoints active
- **Dependencies**: 42 libraries installed and functional
- **Integration**: Service Dashboard successfully communicating
- **Registry Status**: ACTIVE in Passport Service (port 8620)

## Changelog
- 1.0.0 (2025-08-26): Initial Doctor Service specification with AI integration, comprehensive diagnostics, and automated recovery capabilities
- 1.1.0 (2025-08-26): **COMPLETE IMPLEMENTATION** - Full production service deployed with:
  - Complete FastAPI service with 1000+ lines of production code
  - AI-powered diagnostic pipeline with ChatGPT integration
  - Comprehensive database schema with SQLite backend
  - Safety validation and command execution system
  - Learning system with feedback loop and success tracking
  - Complete service management scripts (start/stop/restart)
  - Full integration with Service Dashboard for auto-fix workflow
  - Production-ready deployment with health monitoring
  - 42 production dependencies installed and configured
  - Real-time API endpoints operational on port 8700
- 1.1.1 (2025-08-26): **PASSPORT REGISTRATION COMPLETE** - Official ZmartBot identity assigned:
  - **Passport ID**: ZMBT-SRV-20250826-51B6B9 (Backend Service Classification)
  - **Registry Status**: ACTIVE in Passport Service database
  - **Service Type**: SRV (Backend Service) in ZmartBot taxonomy
  - **Identity Management**: Full lifecycle tracking and audit trail enabled
  - **Orchestration Integration**: Master Orchestration Agent recognition enabled
  - **Security Management**: Service authentication and authorization tracking active


## Requirements
- âœ… **Unique port assignment**
- âœ… **Database connectivity**
- âœ… **Valid service passport**
- âœ… **Complete MDC documentation**
- âœ… **Health endpoint implementation**


---
*Generated by MDCAgent on 2025-08-26; input: service-dashboard-integration; context: autofix-doctor-workflow*

## Triggers
- **API endpoint requests**
- **Database events**
- **Workflow transitions**
