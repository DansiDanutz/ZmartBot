# üè¢ ZMARTBOT SYSTEM - COMPREHENSIVE OPERATIONAL GUIDE
*Based on .cursor/rules/*.mdc files and PROJECT_INVENTORY.md*
*Last Updated: 2025-08-22*

## üéØ **CORE SYSTEM ARCHITECTURE**

### **üöÄ OFFICIAL STARTUP PROCEDURE**
**MANDATORY: Use ONLY the official startup sequence**

#### **Option 1: Official Orchestration Script (RECOMMENDED)**
```bash
# From project root directory
./START_ZMARTBOT.sh
```

#### **Option 2: Manual Startup (Advanced Users)**
```bash
# 1. Navigate to zmart-api directory (SINGLE SOURCE OF TRUTH)
cd /Users/dansidanutz/Desktop/ZmartBot/zmart-api

# 2. Activate virtual environment
source venv/bin/activate

# 3. Start Backend API Server (Port 8000)
nohup python run_dev.py > api_server.log 2>&1 &

# 4. Start Frontend Dashboard Server (Port 3400)
nohup python professional_dashboard_server.py > dashboard.log 2>&1 &

# 5. Verify both servers are running
lsof -i :8000  # Should show Python processes
lsof -i :3400  # Should show Python process
lsof -i :5173  # Should be EMPTY (no processes)
```

### **üõë OFFICIAL SHUTDOWN PROCEDURE**
```bash
# Use official stop script
./STOP_ZMARTBOT.sh
```

## üîí **PERMANENT PORT LOCKING SYSTEM**

### **üéØ PORT ASSIGNMENTS (PERMANENTLY LOCKED)**
| Service | Port | Status | Description |
|---------|------|--------|-------------|
| **zmart_api** | 8000 | ‚úÖ Active | Main ZmartBot API Server |
| **zmart_dashboard** | 3400 | ‚úÖ Active | Frontend Dashboard Server |
| **kingfisher_api** | 8001 | ‚ö†Ô∏è Starting | KingFisher Image Analysis API |
| **orchestration** | 8002 | ‚ö†Ô∏è Starting | Orchestration Agent |
| **postgresql** | 5432 | ‚ö†Ô∏è Starting | PostgreSQL Database |
| **redis** | 6379 | ‚ö†Ô∏è Starting | Redis Cache |
| **influxdb** | 8087 | ‚ö†Ô∏è Starting | InfluxDB Time Series |

### **üö´ PORT CONFLICT PREVENTION RULES**
1. **If service wants a port that's free** ‚Üí **Gets that port permanently**
2. **If service wants a port that's assigned** ‚Üí **Auto-declined, gets new port**
3. **All assignments are permanent** ‚Üí **Never change once assigned**

## üéØ **CORE SYSTEM COMPONENTS**

### **1. START_ZMARTBOT.sh - System Startup Orchestrator**
- **Purpose**: Official system startup with permanent port locking
- **Features**: 
  - Automatic environment setup and validation
  - Dependency management and installation
  - **Permanent port locking system integration**
  - **Zero port conflicts guaranteed**
  - Server startup with health verification
  - **Orchestration agent startup with database orchestrator**
  - Complete system status reporting
- **Usage**: `./START_ZMARTBOT.sh`
- **Status**: ‚úÖ ACTIVE - Official startup method

### **2. OrchestrationStart - Project Startup Coordinator**
- **Purpose**: Coordinates project startup, ensuring proper port management
- **Workflow**:
  1. Ensure frontend and backend are on ports 3400 and 8000
  2. Check Port Manager database with all assigned ports
  3. Check new ports assigned if STOP_ZMARTBOT happened before
  4. Ensure old ports and new ports are updated in database
- **Status**: ‚úÖ ACTIVE - Coordinates all startup processes

### **3. PortManager - Dynamic Port Assignment**
- **Purpose**: Post-startup service managing dynamic port assignments
- **Features**:
  - Always starts AFTER system startup (NOT before, NOT simultaneously)
  - Checks Port Manager Database for new services
  - Assigns new ports that differ from already assigned
  - Prevents duplicates with instant removal
  - Maintains port registry integrity
- **Status**: ‚úÖ ACTIVE - Manages dynamic port assignments

### **4. MasterOrchestrationAgent - System Master Coordinator**
- **Purpose**: Self-learning master of the project, understanding and coordinating all components
- **Features**:
  - Core service management
  - Integration with STOP_ZMARTBOT and Port Manager Database
  - START_ZMARTBOT system integration
  - Behavior monitoring and learning
  - Self-learning capabilities
  - DoctorKill integration
- **Status**: ‚úÖ ACTIVE - Master coordination system

### **5. DoctorKill - Security and Cleanup Script**
- **Purpose**: Security and cleanup script identifying and eliminating conflicts
- **Features**:
  - Virus script detection
  - Process conflict resolution
  - Port conflict cleanup
  - System integrity protection
- **Status**: ‚úÖ ACTIVE - Security and cleanup system

### **6. STOP_ZMARTBOT.sh - SAVE Mechanism**
- **Purpose**: SAVE mechanism for new services, adding them to Port Manager Database
- **Workflow**:
  1. Service discovery
  2. Port registration
  3. Orchestration update
  4. Database sync
  5. Shutdown
- **Important**: New ports are added only if STOP_ZMARTBOT was preceded by START_ZMARTBOT
- **Status**: ‚úÖ ACTIVE - SAVE mechanism for new services

## üé® **FRONTEND SYSTEM (Port 3400)**

### **Professional Dashboard**
- **Location**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/professional_dashboard/`
- **Purpose**: Official frontend, the Professional Dashboard
- **Features**:
  - Trading interface
  - Live alerts
  - Technical analysis
  - Symbol management
  - Professional features
- **Technical Specifications**:
  - React framework
  - Vite build system
  - API integration
  - Performance optimization
  - Security features
- **Supported Timeframes**: 15m, 1h, 4h, 1d
- **Status**: ‚úÖ ACTIVE - Official frontend

### **Symbol Management**
- **Cross-exchange validation**: Binance and KuCoin Futures
- **Liquidity requirements**: High trading volume and liquidity
- **21 indicators**: Real-time technical analysis
- **Real-time prices**: Live market data
- **Market analysis**: Cross-signal, win ratio, liquidation, whale flow
- **Symbol cards**: Cross-exchange data, liquidity, win ratio, risk assessment

## üîß **BACKEND SYSTEM (Port 8000)**

### **FastAPI Server**
- **Location**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/src/main.py`
- **Purpose**: Official backend, the FastAPI Server
- **Architecture**:
  - Trading API
  - Market data
  - Alert system
  - External API integrations
  - Data processing
- **Features**:
  - Database management
  - Security implementation
  - Performance optimization
  - Monitoring systems
  - Error handling
  - Development features
- **Status**: ‚úÖ ACTIVE - Official backend

## üóÑÔ∏è **DATABASE SYSTEMS**

### **PortManagerDatabase - Central Registry**
- **Purpose**: Single source of truth for port management
- **Features**:
  - SQLite database structure
  - `port_assignments` table
  - `temporary_port_assignments` table
  - `service_types` table
  - Service categories (core, dynamic, reserved)
  - Port assignment rules
  - Database operations (registration, assignment, validation)
  - Service management
  - Database queries
  - Integration with system components
  - Maintenance procedures
- **Database Update Rules**: New ports added only if STOP_ZMARTBOT was preceded by START_ZMARTBOT
- **Status**: ‚úÖ ACTIVE - Central port registry

### **MySymbolsDatabase - Core Trading Portfolio**
- **Purpose**: Central repository for all trading symbols, market data, indicators, and alerts
- **Features**:
  - Maximum 10 symbols from Binance and KuCoin Futures
  - Real-time market data
  - 21 technical indicators
  - Alert system integration
  - Trading integration
  - Database queries
- **Dynamic Symbol Management**:
  - Symbols can be added, replaced, or deleted dynamically
  - Major impact on all system services when changes occur
  - Automatic updates across all services
  - Service impact management
  - Master orchestration integration
- **Status**: ‚úÖ ACTIVE - Core trading portfolio

### **21indicatorsDatabase - Technical Analysis Storage**
- **Purpose**: Centralized storage system for all technical analysis data
- **Structure**:
  - `indicator_snapshots` table
  - `pattern_analysis` table
  - `indicator_screenshots` table
- **Features**:
  - Frontend integration
  - Backend API integration
  - Alert system integration
  - AI analysis integration
  - Trading system integration
  - Update frequency management
- **Status**: ‚úÖ ACTIVE - Technical analysis storage

## üìä **TECHNICAL INDICATORS SYSTEM**

### **21 Technical Indicators**
1. **RSI** - Relative Strength Index
2. **MACD** - Moving Average Convergence Divergence
3. **Bollinger Bands** - Volatility and trend analysis
4. **EMA** - Exponential Moving Average
5. **SMA** - Simple Moving Average
6. **Stochastic Oscillator** - Momentum and overbought/oversold
7. **ATR** - Average True Range
8. **CCI** - Commodity Channel Index
9. **ADX** - Average Directional Index
10. **OBV** - On-Balance Volume
11. **VWAP** - Volume Weighted Average Price
12. **Williams %R** - Momentum oscillator
13. **ROC** - Rate of Change
14. **MFI** - Money Flow Index
15. **DMI** - Directional Movement Index
16. **Parabolic SAR** - Trend following
17. **Aroon Indicator** - Trend strength
18. **Momentum Indicator** - Price momentum
19. **TRIX Indicator** - Triple exponential average
20. **Ultimate Oscillator** - Multi-timeframe momentum
21. **Keltner Channel** - Volatility-based channels

### **IndicatorCard System**
- **Purpose**: Visual representation of technical analysis data
- **Features**:
  - Color-coded explanations (Green for bullish, Red for bearish, Grey for neutral)
  - Market sentiment importance
  - Win rate impact analysis
  - Real-time updates
  - Professional styling
- **Status**: ‚úÖ ACTIVE - Technical analysis visualization

## üö® **LIVE ALERTS SYSTEM**

### **Live Alerts Architecture**
- **Purpose**: Real-time alert system with comprehensive monitoring
- **Features**:
  - Alert flow management
  - Implemented triggers (RSI, MACD, Bollinger Bands, Volume Analysis)
  - Alert processing
  - Indicator card updates
  - Database integration
  - Success criteria monitoring

### **Special Alert Systems**

#### **Messi Alerts**
- **Philosophy**: High-frequency, precision-based trading
- **Trading Style**: Quick entries and exits, rapid momentum shifts
- **Trigger Mechanisms**:
  - RSI Oscillation: Rapid RSI oscillations
  - Volume Spike: Unusual volume activity
  - Momentum Shift: Sudden momentum changes
- **Dynamic Indicator Changes**: RSI, Volume, Momentum
- **Status**: ‚úÖ ACTIVE - Messi alert system

#### **Pele Alerts**
- **Philosophy**: Strategic, trend-following approach
- **Trading Style**: Strong trend continuation, breakout trading
- **Trigger Mechanisms**:
  - Trend Continuation: Strong trend continuation signals
  - Breakout: Price breakout patterns
  - Support/Resistance Level: Key level interactions
- **Dynamic Indicator Changes**: EMA/SMA, Bollinger Bands, ATR
- **Status**: ‚úÖ ACTIVE - Pele alert system

#### **Maradona Alerts**
- **Philosophy**: Divergence and reversal detection
- **Trading Style**: Counter-trend opportunities, reversal trading
- **Trigger Mechanisms**:
  - Divergence: Multiple divergence patterns
  - Reversal: Trend reversal signals
  - Extreme Conditions: Extreme market conditions
- **Dynamic Indicator Changes**: RSI, MACD, Stochastic Oscillator
- **Status**: ‚úÖ ACTIVE - Maradona alert system

#### **Whale Alerts**
- **Philosophy**: Large institutional movement detection
- **Trading Style**: Following smart money, accumulation/distribution
- **Trigger Mechanisms**:
  - Volume Spike: Massive volume activity
  - Order Flow: Large order flow patterns
  - Accumulation: Institutional accumulation
  - Distribution: Institutional distribution
- **Dynamic Indicator Changes**: Volume Analysis, OBV, MFI
- **Status**: ‚úÖ ACTIVE - Whale alert system

## üîÑ **SYSTEM INTEGRATION WORKFLOW**

### **New Service Integration Process**
1. **Start the new service** (e.g., Alerts system)
2. **Port Manager assigns a port** automatically
3. **Test the service** to ensure it's working correctly
4. **STOP the system** using STOP_ZMARTBOT.sh
5. **Restart the system** - new service is now included in startup
6. **Master Orchestration** now monitors the new service

### **Symbol Management Workflow**
1. **Add/Replace/Delete symbols** in MySymbolsDatabase
2. **System-wide updates** triggered automatically:
   - 21 Indicators Database updates
   - Live Alerts System updates
   - Technical Analysis Services updates
   - Market Data Collection updates
   - Frontend Components updates
   - Trading Systems updates
3. **Master Orchestration Agent** notified of changes
4. **All services synchronized** to prevent data inconsistencies

## üõ°Ô∏è **SECURITY AND PROTECTION**

### **Commands Denylist**
- **System Destruction Commands**: Blocked for safety
- **Dangerous Downloads & Execution**: Prevented
- **File System Manipulation**: Protected
- **Git Dangerous Operations**: Restricted
- **Package Management Dangers**: Controlled
- **Network & Security**: Monitored
- **Database Operations**: Secured
- **Docker & Container Dangers**: Protected

### **Protection Settings**
- **File-Deletion Protection**: Prevent automatic file deletion
- **MCP Tools Protection**: Require explicit permission
- **Git Protection**: Prevent force pushes to main branches
- **System Protection**: Block system shutdown/reboot commands

## üìã **OPERATIONAL GUIDELINES**

### **Before Running Any Command**
1. **Verify the command** - Understand what it does
2. **Check the target** - Ensure it's the right location
3. **Backup if needed** - Protect important data
4. **Test in safe environment** - Use sandbox when possible
5. **Ask for confirmation** - Get explicit approval

### **Working Directory**
- **Primary Directory**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api`
- **Project Root**: `/Users/dansidanutz/Desktop/ZmartBot/`
- **Frontend**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/professional_dashboard/`
- **Backend**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/src/`

### **Port Management Rules**
- **8000**: Backend API (permanently locked)
- **3400**: Frontend Dashboard (permanently locked)
- **Other ports**: Auto-assigned by Port Manager
- **No conflicts**: Permanent port locking prevents all conflicts

### **Service Dependencies**
When symbols are added, replaced, or deleted, the following services are **automatically updated**:
1. **21 Indicators Database**: All indicator calculations and historical data
2. **Live Alerts System**: All alert monitoring and trigger systems
3. **Technical Analysis Services**: All analysis and pattern recognition
4. **Market Data Collection**: Real-time price and volume data
5. **Frontend Components**: All UI elements and visualizations
6. **Trading Systems**: Portfolio management and risk controls
7. **Master Orchestration Agent**: System-wide coordination

## üéØ **SUCCESS CRITERIA**

### **System Performance**
- ‚úÖ **Zero Port Conflicts**: Permanent port locking system active
- ‚úÖ **Service Coordination**: All services properly synchronized
- ‚úÖ **Data Integrity**: All databases maintaining consistency
- ‚úÖ **Real-time Updates**: Live data flowing correctly
- ‚úÖ **Alert System**: All 4 alert types (Messi, Pele, Maradona, Whale) operational
- ‚úÖ **Technical Analysis**: All 21 indicators displaying correctly
- ‚úÖ **Symbol Management**: Dynamic symbol changes working properly

### **Operational Excellence**
- ‚úÖ **Startup Reliability**: START_ZMARTBOT.sh working consistently
- ‚úÖ **Shutdown Safety**: STOP_ZMARTBOT.sh saving all configurations
- ‚úÖ **Port Management**: Port Manager assigning ports correctly
- ‚úÖ **Master Orchestration**: Coordinating all system components
- ‚úÖ **Security**: DoctorKill protecting system integrity
- ‚úÖ **Documentation**: All .mdc files providing clear guidance

## üö® **CRITICAL RULES**

### **NEVER DO**
- ‚ùå Start servers on port 5173
- ‚ùå Use `npm run dev` or Vite development server
- ‚ùå Start servers from wrong directories
- ‚ùå Use outdated startup scripts
- ‚ùå Modify port assignments manually
- ‚ùå Bypass the permanent port locking system

### **ALWAYS DO**
- ‚úÖ Use START_ZMARTBOT.sh for system startup
- ‚úÖ Use STOP_ZMARTBOT.sh for system shutdown
- ‚úÖ Work in the zmart-api directory
- ‚úÖ Follow the permanent port locking system
- ‚úÖ Let Port Manager handle port assignments
- ‚úÖ Notify Master Orchestration of changes
- ‚úÖ Test all changes before deployment

## üìû **EMERGENCY PROCEDURES**

### **System Recovery**
1. **Stop all services**: `./STOP_ZMARTBOT.sh`
2. **Clean up processes**: Use DoctorKill if needed
3. **Restart system**: `./START_ZMARTBOT.sh`
4. **Verify all services**: Check port assignments and health

### **Port Conflict Resolution**
1. **Check current assignments**: Port Manager database
2. **Identify conflicts**: DoctorKill diagnosis
3. **Clean up orphaned processes**: Automatic cleanup
4. **Restart affected services**: Automatic restart

### **Data Recovery**
1. **Check database integrity**: All databases operational
2. **Verify symbol data**: MySymbolsDatabase consistency
3. **Test alert systems**: All alert types working
4. **Validate indicators**: All 21 indicators displaying

---

*This .claude file consolidates all system rules, architecture, and operational guidelines from the .mdc files and PROJECT_INVENTORY.md. Follow these guidelines to ensure proper system operation and maintenance.*



