
## Description
Core backend service component of the ZmartBot ecosystem providing essential functionality.

@agent: BackendFrontendProtectionAgent

## ü§ñ MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ‚úÖ **ACTIVE** - Backend Frontend Protection MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered security analysis and protection optimization
- **Memory Gateway**: Persistent security state and protection metadata
- **UI Automation**: Automated security monitoring and protection checks
- **Figma Integration**: Security dashboard design and UI management
- **Supabase Integration**: Cloud-based security analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Security**: AI-powered threat detection and prevention
- **Persistent Protection**: Cross-session security state management
- **Automated Monitoring**: Real-time security status tracking
- **Visual Security Management**: Security dashboard and monitoring UI
- **Cloud Analytics**: Security metrics and threat analysis

### **MCP Usage Examples**
```bash
# Health check
curl -X GET http://127.0.0.1:8999/health

# Security status
curl -X GET http://127.0.0.1:8999/security/status

# Protection status
curl -X GET http://127.0.0.1:8999/protection/status
```

### **MCP Integration Status**
- **Claude Code**: ‚úÖ Active - AI security analysis
- **ByteRover**: ‚úÖ Active - Security state persistence
- **UI TARS**: ‚úÖ Active - Security monitoring automation
- **Figma**: ‚úÖ Active - Security dashboard design
- **Supabase**: ‚úÖ Active - Security analytics

# Backend & Frontend Protection System - CRITICAL COMPONENT

## Overview
The **Backend & Frontend Protection System** is a critical security component that prevents deletion, replacement, or unauthorized modifications of the most important ZmartBot components. This system MUST be run manually and cannot be automated or replaced.

## üö® CRITICAL IMPORTANCE

### **Why This Protection is Essential**
- **Backend (run_dev.py + src/main.py)**: Core API server with all trading operations
- **Frontend (professional_dashboard_server.py + components)**: User interface and trading platform
- **Prevents**: Accidental deletion, malicious replacement, unauthorized modifications
- **Ensures**: System integrity and operational continuity
- **Requires**: Manual intervention for any changes

## üîí Protection Components

### **Backend Protection System**
- **File**: `protect_backend.py`
- **Purpose**: Protects critical backend files from modification/deletion
- **Protected Files**:
  - `run_dev.py` - Backend startup script (CRITICAL)
  - `src/main.py` - Main FastAPI application (CRITICAL)
  - `src/routes/` - API routes directory (CRITICAL)
  - `src/services/` - Services directory (CRITICAL)
  - `src/config/` - Configuration directory (CRITICAL)

### **Frontend Protection System**
- **File**: `protect_frontend.py`
- **Purpose**: Protects critical frontend files from modification/deletion
- **Protected Files**:
  - `professional_dashboard_server.py` - Frontend server (CRITICAL)
  - `professional_dashboard/App.jsx` - Main React app (CRITICAL)
  - `professional_dashboard/api-proxy.js` - API proxy (CRITICAL)
  - `professional_dashboard/components/` - React components (CRITICAL)
  - `professional_dashboard/App.css` - Main styling (CRITICAL)
  - `professional_dashboard/index.html` - HTML entry (CRITICAL)
  - `professional_dashboard/main.jsx` - React entry (CRITICAL)

## üõ°Ô∏è Protection Features

### **File Integrity Monitoring**
- **SHA256 Hashing**: Calculates cryptographic hashes of all protected files
- **Continuous Monitoring**: Checks file integrity every 30 seconds
- **Violation Detection**: Immediately detects any file modifications
- **Automatic Response**: Stops processes if integrity is compromised

### **File Permission Protection**
- **Read-Only Files**: Sets files to read-only (644 permissions)
- **Directory Protection**: Sets directories to read-execute (755 permissions)
- **Prevents Modification**: Blocks unauthorized file changes
- **Manual Override Required**: Only manual intervention can modify files

### **Process Protection**
- **Automatic Shutdown**: Stops backend/frontend if integrity violated
- **Security Response**: Immediate response to any tampering
- **Logging**: Comprehensive logging of all protection events
- **Alert System**: Immediate alerts for security violations

## üìã Manual Commands

### **Initialize Protection (MANDATORY)**
```bash
# Initialize Backend Protection
python3 protect_backend.py init

# Initialize Frontend Protection
python3 protect_frontend.py init
```

### **Start Monitoring**
```bash
# Monitor Backend (run in separate terminal)
python3 protect_backend.py monitor

# Monitor Frontend (run in separate terminal)
python3 protect_frontend.py monitor
```

### **Check Status**
```bash
# Check Backend Protection Status
python3 protect_backend.py status

# Check Frontend Protection Status
python3 protect_frontend.py status
```

### **Verify Integrity**
```bash
# Verify Backend Integrity
python3 protect_backend.py verify

# Verify Frontend Integrity
python3 protect_frontend.py verify
```

## üîß Protection Workflow

### **Step 1: Initialize Protection**
1. **Run Backend Protection**: `python3 protect_backend.py init`
2. **Run Frontend Protection**: `python3 protect_frontend.py init`
3. **Verify Initialization**: Check logs for successful initialization
4. **Set Permissions**: Files automatically set to read-only

### **Step 2: Start Monitoring**
1. **Backend Monitor**: `python3 protect_backend.py monitor` (Terminal 1)
2. **Frontend Monitor**: `python3 protect_frontend.py monitor` (Terminal 2)
3. **Continuous Protection**: 24/7 monitoring active

### **Step 3: Regular Verification**
1. **Daily Checks**: Run `verify` command daily
2. **Status Monitoring**: Check protection status regularly
3. **Log Review**: Monitor protection logs for any issues

## üö® Emergency Procedures

### **If Protection Detects Violations**
1. **Immediate Response**: Processes automatically stopped
2. **Log Analysis**: Check protection logs for details
3. **File Restoration**: Restore files from backup if needed
4. **Re-initialization**: Re-run protection initialization
5. **System Restart**: Restart protected services

### **If Files Are Accidentally Modified**
1. **Stop Monitoring**: Ctrl+C to stop protection monitors
2. **Restore Files**: Restore from backup or version control
3. **Re-initialize**: Run `init` command again
4. **Restart Monitoring**: Start protection monitors again

### **If Protection Scripts Are Modified**
1. **Critical Alert**: This indicates system compromise
2. **Immediate Action**: Restore protection scripts from backup
3. **System Audit**: Full system security audit required
4. **Re-secure**: Complete re-initialization of protection

## üìä Protection Logs

### **Backend Protection Log**
- **File**: `backend_protection.log`
- **Content**: All backend protection events
- **Monitoring**: Check regularly for violations

### **Frontend Protection Log**
- **File**: `frontend_protection.log`
- **Content**: All frontend protection events
- **Monitoring**: Check regularly for violations

### **Log Analysis**
```bash
# View recent protection events
tail -f backend_protection.log
tail -f frontend_protection.log

# Search for violations
grep "VIOLATION" backend_protection.log
grep "VIOLATION" frontend_protection.log
```

## üîê Security Best Practices

### **Access Control**
- **Limited Access**: Only authorized personnel can modify protected files
- **Audit Trail**: All modifications must be logged and approved
- **Backup Verification**: Regular backup integrity checks
- **Version Control**: All changes must go through version control

### **Monitoring Requirements**
- **24/7 Monitoring**: Protection must run continuously
- **Regular Checks**: Daily integrity verification
- **Alert Response**: Immediate response to any alerts
- **Log Review**: Weekly log analysis and review

### **Change Management**
- **Approval Required**: All changes must be pre-approved
- **Testing**: Changes must be tested before deployment
- **Rollback Plan**: Always have rollback procedures ready
- **Documentation**: All changes must be documented

## ‚ö†Ô∏è Important Warnings

### **Critical Restrictions**
- **NO AUTOMATION**: Protection scripts cannot be automated
- **MANUAL ONLY**: All protection operations must be manual
- **NO REPLACEMENT**: Protection system cannot be replaced
- **NO DELETION**: Protected files cannot be deleted

### **System Dependencies**
- **Backend Protection**: Required for API server integrity
- **Frontend Protection**: Required for user interface integrity
- **System Stability**: Protection ensures system stability
- **Security**: Protection prevents unauthorized access

## üéØ Success Criteria

### **Protection Effectiveness**
- ‚úÖ **Zero Unauthorized Modifications**: No unauthorized file changes
- ‚úÖ **Immediate Violation Detection**: Instant detection of any tampering
- ‚úÖ **Automatic Response**: Immediate response to violations
- ‚úÖ **System Integrity**: Maintained system integrity

### **Operational Requirements**
- ‚úÖ **24/7 Monitoring**: Continuous protection monitoring
- ‚úÖ **Manual Control**: Full manual control over protection
- ‚úÖ **Comprehensive Logging**: Complete audit trail
- ‚úÖ **Emergency Response**: Effective emergency procedures

## üìû Emergency Contacts

### **If Protection Fails**
1. **Immediate Action**: Stop all system operations
2. **Security Audit**: Full system security audit
3. **File Restoration**: Restore all protected files
4. **System Re-secure**: Complete re-initialization
5. **Contact Administrator**: Immediate administrator notification

### **If Files Are Compromised**
1. **Isolate System**: Disconnect from network
2. **Assess Damage**: Determine extent of compromise
3. **Restore Integrity**: Restore from known good backups
4. **Re-initialize Protection**: Complete protection re-initialization
5. **Security Review**: Full security review and hardening

The Backend & Frontend Protection System is the critical security foundation of the ZmartBot platform, ensuring the integrity and reliability of the most important system components.

description: Critical protection system for backend and frontend files
globs: ["zmart-api/protect_*.py", ".cursor/rules/BackendFrontendProtection.mdc"]
alwaysApply: true

## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Complete MDC documentation**


---
description:
globs:
alwaysApply: true

## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Complete MDC documentation**


---


## Triggers
- **API endpoint requests**
- **Workflow transitions**
