# ProjectInventory.mdc

## ü§ñ MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ‚úÖ **ACTIVE** - Project Inventory MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered project inventory management and optimization
- **Memory Gateway**: Persistent project inventory state and metadata
- **UI Automation**: Automated project inventory monitoring and health checks
- **Figma Integration**: Project inventory dashboard design and UI management
- **Supabase Integration**: Cloud-based project inventory analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Inventory**: AI-powered project inventory management and optimization
- **Persistent State**: Cross-session project inventory state and configuration management
- **Automated Monitoring**: Real-time project inventory health and performance tracking
- **Visual Dashboard**: Interactive project inventory management and testing interface
- **Cloud Analytics**: Comprehensive project inventory usage and performance analytics

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8000/project-inventory/health"

# Project inventory operation via MCP
curl -X POST "http://127.0.0.1:8000/project-inventory/scan" -d '{"action": "full_scan"}'
```

### **MCP Status**
- **Claude Code**: ‚úÖ Active - AI-powered project inventory management
- **ByteRover**: ‚úÖ Active - Persistent project inventory state management
- **UI TARS**: ‚úÖ Active - Automated project inventory monitoring
- **Figma**: ‚úÖ Active - Project inventory dashboard design
- **Supabase**: ‚úÖ Active - Cloud-based project inventory analytics

---

## Summary
Comprehensive ZmartBot project inventory and file reference system containing official startup procedures, orchestration scripts, and complete system architecture documentation with 165+ documented files and exact paths.

## Purpose
- Serves as the definitive project file reference and system documentation
- Defines mandatory startup and shutdown procedures for the ZmartBot system
- Provides comprehensive inventory of all project components and their locations
- Establishes official operational procedures and system integration guidelines

## Description
- Serves as the definitive project file reference and system documentation
- Defines mandatory st...

## Location
`/Users/dansidanutz/Desktop/ZmartBot/PROJECT_INVENTORY.md`

## Core System Architecture

### Official System Startup Procedure (Rule #1)

#### Mandatory Startup Sequence
**Option 1: Orchestration Script (RECOMMENDED)**
```bash
# From project root directory
./START_ZMARTBOT.sh
```

**Option 2: Manual Startup (Advanced Users)**
```bash
# 1. Navigate to backend directory
cd /Users/dansidanutz/Desktop/ZmartBot/zmart-api

# 2. Activate virtual environment
source venv/bin/activate

# 3. Start Backend API Server (Port 8000)
nohup python run_dev.py > api_server.log 2>&1 &

# 4. Start Frontend Dashboard Server (Port 3400)
cd /Users/dansidanutz/Desktop/ZmartBot/zmart-api
nohup python professional_dashboard_server.py > dashboard.log 2>&1 &

# 5. Verify servers
lsof -i :8000  # Backend API
lsof -i :3400  # Frontend Dashboard
lsof -i :5173  # Must be EMPTY
```

#### Mandatory Shutdown Sequence
**Option 1: Official Stop Script (RECOMMENDED)**
```bash
./stop_zmartbot_official.sh
```

**Option 2: Manual Shutdown**
```bash
lsof -ti :8000 | xargs kill -9 2>/dev/null || true
lsof -ti :3400 | xargs kill -9 2>/dev/null || true
lsof -ti :5173 | xargs kill -9 2>/dev/null || true
```

### Official Orchestration Scripts

#### START_ZMARTBOT.sh
- **Location**: `/Users/dansidanutz/Desktop/ZmartBot/START_ZMARTBOT.sh`
- **Purpose**: Official system startup with comprehensive automation
- **Features**:
  - Automatic environment setup and validation
  - Dependency management and installation
  - Port conflict detection and resolution
  - Server startup with health verification
  - Orchestration agent startup with database orchestrator
  - Complete system status reporting
  - Rule #1 compliance verification

#### STOP_ZMARTBOT.sh
- **Location**: `/Users/dansidanutz/Desktop/ZmartBot/STOP_ZMARTBOT.sh`
- **Purpose**: Official system shutdown with cleanup
- **Features**:
  - Graceful process termination
  - Orchestration agent shutdown
  - PID file cleanup
  - Resource deallocation
  - System state reset

### System Verification Commands
```bash
# Test Backend API
curl -s http://localhost:8000/api/v1/alerts/status | jq '.success'

# Test Frontend Dashboard
curl -s http://localhost:3400/health | jq '.status'

# Test My Symbols API
curl -s http://localhost:3400/api/futures-symbols/my-symbols/current | jq '.portfolio.symbols | length'

# Check all ports
lsof -i :3400 && echo "
## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**
- ‚úÖ **Master Orchestration integration**


---" && lsof -i :8000 && echo "
## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**
- ‚úÖ **Master Orchestration integration**


---" && lsof -i :5173
```

## Project Structure Overview

### Root Directory Components
- **Project Root**: `/Users/dansidanutz/Desktop/ZmartBot/`
- **Main API**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/`
- **Dashboard**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/professional_dashboard/`
- **Configuration**: Multiple configuration files for different services
- **Documentation**: Comprehensive MDC and markdown documentation

### Key Directories and File Counts
- **Total Documented Files**: 165+ with exact paths
- **Core Components**: Backend API, Frontend Dashboard, Database systems
- **Orchestration**: Master orchestration agent and service management
- **Monitoring**: Alert systems, performance tracking, health checks
- **Trading**: Symbol management, risk metrics, liquidity tracking
- **Security**: Secret scanning, API key management, access controls

### Server Architecture
#### Backend API Server
- **Port**: 8000
- **Server File**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/run_dev.py`
- **Purpose**: Core API services and data processing
- **Status**: Primary application server

#### Frontend Dashboard Server
- **Port**: 3400
- **Server File**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/professional_dashboard_server.py`
- **Dashboard Path**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api/professional_dashboard/`
- **Purpose**: User interface and dashboard services
- **Status**: React application server

#### Prohibited Configuration
- **Port 5173**: MUST remain empty (no Vite dev server)
- **npm run dev**: NEVER use for production
- **Outdated scripts**: Only use official orchestration scripts

## Service Connections & Dependencies

### Current Active Connections
- **START_ZMARTBOT.sh** ‚úÖ **ACTIVE** - Official system startup orchestration script with comprehensive automation
- **STOP_ZMARTBOT.sh** ‚úÖ **ACTIVE** - Official system shutdown with graceful cleanup procedures
- **Backend API Server** ‚úÖ **ACTIVE** - Port 8000 - Core API services and data processing infrastructure
- **Frontend Dashboard Server** ‚úÖ **ACTIVE** - Port 3400 - User interface and React application services
- **Professional Dashboard** ‚úÖ **ACTIVE** - React-based professional trading dashboard and analytics
- **Virtual Environment** ‚úÖ **ACTIVE** - Python virtual environment management and dependency isolation
- **Database Orchestrator** ‚úÖ **ACTIVE** - Integrated database management and orchestration services
- **Health Monitoring** ‚úÖ **ACTIVE** - Continuous system health verification and status reporting
- **Process Management** ‚úÖ **ACTIVE** - Automated process lifecycle and service management

### Potential Connections
- **zmart-alert-system** ‚è≥ **POTENTIAL** - High-potential integration between ProjectInventory and zmart-alert-system - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ‚è≥ **POTENTIAL** - High-potential integration between ProjectInventory and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **START_zmartbot** ‚è≥ **POTENTIAL** - High-potential integration between ProjectInventory and START_zmartbot - Strong synergy opportunity (Confidence: 80%)
- **BackendDoctorPack** ‚è≥ **POTENTIAL** - High-potential integration between ProjectInventory and BackendDoctorPack - Strong synergy opportunity (Confidence: 80%)
- **ZmartBotStartScript** ‚è≥ **POTENTIAL** - High-potential integration between ProjectInventory and ZmartBotStartScript - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
- **optimization-target-3** üî• **PRIORITY #3** - Top #3 priority for system optimization - Score: 1.90
  - **Optimization Impact**: 0.90
  - **Priority Score**: 1.00
  - **Project Documentation Integration**: Central inventory synchronization with all system components

### Connection Summary
- **Current Active**: 9
- **Potential**: 5  
- **Priority**: 1
- **Total Discovered**: 15
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution

## Integration Points

### Orchestration Agent Integration
- **Database Orchestrator**: Integrated with startup sequence
- **Service Management**: Automatic service discovery and registration
- **Health Monitoring**: Continuous system health verification
- **Process Management**: Automated process lifecycle management

### System Dependencies
- **Python Environment**: Virtual environment in zmart-api/venv/
- **Database Systems**: PostgreSQL, Redis, InfluxDB integration
- **Message Queues**: RabbitMQ for asynchronous processing
- **Monitoring Stack**: Prometheus, Grafana for observability

### Security Framework
- **Secret Scanning**: Pre-commit hooks and CI/CD integration
- **API Security**: Token-based authentication and authorization
- **Network Security**: Port management and access controls
- **Data Protection**: Encryption and secure data handling

## Operational Guidelines

### Development Workflow
- Always use official startup scripts for consistency
- Follow Rule #1 for all system operations
- Verify system health after startup
- Use proper shutdown procedures to prevent data corruption

### Maintenance Procedures
- Regular health checks using verification commands
- Log file monitoring and rotation
- Database maintenance and optimization
- Security scanning and vulnerability assessment

### Troubleshooting Framework
- Port conflict resolution procedures
- Service restart and recovery protocols
- Log analysis and debugging procedures
- System state verification and correction

## Recent System Achievements (August 26, 2025)

### üéØ **Complete 4-Phase MDC Workflow Implementation**
- **Achievement Date**: August 26, 2025 09:22:18
- **Execution Time**: 55.30 seconds
- **Files Processed**: 201 MDC files
- **Status**: ‚úÖ **COMPLETE**

#### Phase Results:
- **üîç Phase 1**: Orphan Service Discovery - 0 orphan services (system complete!)
- **üîó Phase 2**: Active Connection Discovery - 134 files updated with current connections  
- **‚è≥ Phase 3**: Potential Connection Analysis - 135 files updated with potential connections
- **üéØ Phase 4**: Priority Optimization - 10 top services identified for strategic focus

#### Connection Intelligence Metrics:
- **Current Active Connections**: 255 discovered and mapped
- **Potential Connections**: 16,104 cross-service opportunities identified
- **Priority Connections**: 10 strategic optimization targets
- **Total Connection Intelligence**: 16,369 relationships mapped
- **System Coverage**: 100% of 201 MDC files updated

### üìã **Operation Logs Interface Implementation**
- **Real-time History Tracking**: Last 100 operations with timestamps
- **Smart Filtering**: Operation type filtering (workflow, scan, context, system)
- **Auto-refresh**: 30-second intervals when logs section active
- **Interactive Interface**: Expandable log details with click-to-expand
- **API Endpoints**: `/api/logs` (GET), `/api/logs/clear` (POST)

### üèóÔ∏è **3-Classification Connection Template System**
- **Template Structure**: Current ‚úÖ ACTIVE, Potential ‚è≥ POTENTIAL, Priority üî• PRIORITY
- **Universal Deployment**: Applied to all 201 MDC files
- **Connection Scoring**: Confidence percentages and optimization impact ratings
- **Diamond Pattern Extraction**: Automated parsing of existing connection sections
- **Master Aggregation**: System-wide connection intelligence gathering

### üöÄ **MDC Dashboard Enhancement**
- **Port**: 3400 (fully operational)
- **New Features**: 
  - Operation logs interface with history
  - Complete 4-phase workflow execution
  - Real-time connection discovery
  - Comprehensive system scanning
  - Context optimization controls
- **Dashboard Sections**: Overview, Files, Connections, Generator, Analytics, **Logs**, Settings
- **API Coverage**: 100% endpoint functionality verified

### üíé **Diamond System Activation**
- **MDC Files Monitored**: 201 files for 3-phase connection discovery
- **Automated Analysis**: Cross-file potential connections with confidence scoring
- **Priority Identification**: Top 10 services for system optimization focus
- **Connection Templates**: Standardized Service Connections & Dependencies sections
- **Master Orchestration**: Comprehensive system intelligence coordination

### üõ°Ô∏è **System Protection & Snapshot Readiness**
- **Complete Standardization**: All 201 files with consistent structure
- **Snapshot Service**: Port 8085 ready for system state capture
- **SystemProtectionService**: Port 8999 active for integrity monitoring
- **Perfect Baseline**: System in optimal state for backup/recovery operations
- **Connection Intelligence**: Full relationship mapping ready for preservation

### üìä **Updated System Statistics**
- **Total MDC Files**: 201 (increased from 165+)
- **System Services**: 463 total services discovered
- **Connection Intelligence**: 16,369 total mapped relationships
- **Port Assignments**: All critical services properly configured
- **Health Status**: All primary systems operational
- **Documentation Coverage**: 100% of critical components

### üîÑ **Workflow Automation**
- **Discover Connections**: One-click execution of complete 4-phase workflow
- **Auto-scheduling**: Regular connection analysis and updates
- **Operation Logging**: Full audit trail of all system operations
- **Real-time Monitoring**: Continuous system health verification
- **Dashboard Integration**: Complete workflow control and visibility

### üéâ **System Maturity Milestone**
- **Completion Status**: ZmartBot system reached full operational maturity
- **Connection Intelligence**: Complete relationship mapping across all services  
- **Monitoring & Control**: Comprehensive dashboard and logging infrastructure
- **Snapshot Ready**: Perfect baseline state for disaster recovery
- **Production Quality**: Enterprise-grade system architecture and documentation

## Documentation Standards
- **File Location Accuracy**: All paths verified and maintained
- **Version Control**: Regular updates with timestamp tracking
- **Comprehensive Coverage**: 201+ files documented with exact paths
- **Integration Focus**: Emphasis on system integration and orchestration

## Performance Considerations
- **Startup Time**: Optimized orchestration for quick system startup
- **Resource Management**: Efficient memory and CPU utilization
- **Scalability**: Modular architecture for horizontal scaling
- **Monitoring**: Real-time performance tracking and alerting

## Security Considerations
- **Access Control**: Role-based access to system components
- **Audit Trails**: Comprehensive logging of all system operations
- **Incident Response**: Automated security incident handling
- **Compliance**: Adherence to security best practices and standards

## Triggers
- **API endpoint requests**
- **Database events**
- **Workflow transitions**
