
## Description
Core service component of the ZmartBot ecosystem providing essential functionality.

## ü§ñ MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ‚úÖ **ACTIVE** - Service Health Documentation MCP Integration
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `figma`, `supabase`
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`
**Integration Type**: Multi-MCP Service Integration

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered service health documentation and optimization
- **Memory Gateway**: Persistent service health documentation state and metadata
- **UI Automation**: Automated service health documentation monitoring and health checks
- **Figma Integration**: Service health documentation dashboard design and UI management
- **Supabase Integration**: Cloud-based service health documentation analytics and reporting

### **MCP Integration Benefits**
- **Enhanced Documentation**: AI-powered service health documentation and optimization
- **Persistent State**: Cross-session service health documentation state and configuration management
- **Automated Monitoring**: Real-time service health documentation health and performance tracking
- **Visual Dashboard**: Interactive service health documentation management and testing interface
- **Cloud Analytics**: Comprehensive service health documentation usage and performance analytics

### **MCP Usage Examples**
```bash
# Health check via MCP
curl -X GET "http://127.0.0.1:8000/service-health-docs/health"

# Service health documentation via MCP
curl -X POST "http://127.0.0.1:8000/service-health-docs/update" -d '{"service": "all", "action": "update_docs"}'
```

### **MCP Status**
- **Claude Code**: ‚úÖ Active - AI-powered service health documentation
- **ByteRover**: ‚úÖ Active - Persistent service health documentation state management
- **UI TARS**: ‚úÖ Active - Automated service health documentation monitoring
- **Figma**: ‚úÖ Active - Service health documentation dashboard design
- **Supabase**: ‚úÖ Active - Cloud-based service health documentation analytics

---

# Service Health Documentation
> Type: documentation | Version: 1.0.0 | Owner: zmartbot | Updated: 2025-08-26

## Overview
Comprehensive documentation for ZmartBot service health monitoring, troubleshooting, and maintenance procedures to prevent system issues.

## Health Monitoring Standards

### Health Endpoint Requirements
All services MUST implement:
```
GET /health
Response: {"status": "healthy", "timestamp": "ISO_DATE", "service": "SERVICE_NAME"}
Status Codes: 200 (healthy), 503 (unhealthy)
```

### Service Categories by Health Status
**‚úÖ Production Services (Must be healthy):**
- zmart-api (Port 8000) - Core API server
- zmart-dashboard (Port 3400) - Web interface
- master-orchestration-agent (Port 8002) - Service controller
- my-symbols-extended-service (Port 8005) - Symbol management
- api-keys-manager-service (Port 8006) - Security management

**üîß Trading Services (Critical for trading):**
- zmart-analytics (Port 8007) - Data analysis
- zmart_backtesting (Port 8013) - Strategy testing
- zmart_machine_learning (Port 8014) - AI/ML processing
- zmart_risk_management (Port 8010) - Risk analysis
- zmart_technical_analysis (Port 8011) - Technical indicators

**üîó Exchange Connectors (Must be healthy for trading):**
- binance (Port 8303) - Binance exchange
- kucoin (Port 8302) - KuCoin exchange

**‚ö†Ô∏è Test Services (Optional - can be offline):**
- test-analytics-service (Port 8003) - Testing only
- test-websocket-service (Port 8004) - Testing only
- kingfisher-module (Port 8100) - Integrated module, not standalone

## Troubleshooting Guide

### Common Issues and Fixes

**Issue: Service shows as offline but should be running**
1. Check if process is running: `ps aux | grep SERVICE_NAME`
2. Check if port is in use: `lsof -i :PORT`
3. Check startup command in database
4. Restart through orchestration agent

**Issue: Health endpoint not responding**
1. Verify service implements /health endpoint
2. Check service logs for errors
3. Test direct connection: `curl http://localhost:PORT/health`
4. Check firewall/network issues

**Issue: Database connection issues**
1. Verify database path: `src/data/service_registry.db`
2. Check database schema with: `sqlite3 src/data/service_registry.db ".schema"`
3. Run health check script: `python3 force_health_check.py`

## Startup Command Locations

### Correct File Paths (Updated 2025-08-26)
- **Analytics Services**: `analytics/analytics_server.py`
- **WebSocket Services**: `websocket/websocket_server.py`
- **Symbol Services**: `symbols_extended_server.py`
- **Main API**: `start_backend_safe.py`
- **Dashboard**: `professional_dashboard_server.py`

### Integrated Services (No standalone servers)
- **kingfisher-module**: Integrated into main API
- **binance/kucoin**: Exchange connectors managed by main API
- **mysymbols**: Internal API managed by main API

## Maintenance Procedures

### Daily Health Checks
1. Run: `python3 force_health_check.py`
2. Check Service Dashboard at http://localhost:3401
3. Verify 20+ services are healthy
4. Check logs for any error patterns

### Weekly Maintenance
1. Update service registry: `python3 update_all_passports.py`
2. Update orchestration knowledge: `python3 update_master_orchestration.py`
3. Review and update startup commands if needed
4. Check for new services to add passport protection

### Emergency Recovery
1. If services fail to start, check startup commands in database
2. Verify file paths match actual locations
3. Use orchestration agent API endpoints for manual control
4. Check for conflicting processes on required ports

## Health Status Targets
- **Minimum Acceptable**: 20/23 services healthy (87%)
- **Production Target**: 22/23 services healthy (95%)
- **Perfect Status**: 23/23 services healthy (100%)

**Current Status** (2025-08-26): 20/23 healthy (87%) - Production Ready ‚úÖ

## API Endpoints for Health Management

### Master Orchestration Agent (Port 8002)
- `GET /health` - Orchestration agent health
- `GET /api/orchestration/services` - All service status
- `GET /api/orchestration/passport/protected` - Protected services
- `POST /api/orchestration/services/{service}/start` - Start service
- `POST /api/orchestration/services/{service}/stop` - Stop service
- `POST /api/orchestration/services/{service}/restart` - Restart service

### Service Dashboard (Port 3401)
- Web interface for real-time service monitoring
- Passport protection warnings for critical services
- Real-time health status updates every 30 seconds

## Scripts and Tools

### Health Management Scripts
- `force_health_check.py` - Manual health status update
- `update_all_passports.py` - Update passport protection
- `update_master_orchestration.py` - Update orchestration knowledge
- `update_startup_commands.py` - Fix startup command paths

### Database Management
```sql
-- Check service status
SELECT service_name, health_status, connection_status, passport_id FROM service_registry;

-- Update service health
UPDATE service_registry SET health_status = 'healthy', connection_status = 'connected' WHERE service_name = 'SERVICE_NAME';

-- Add missing columns if needed
ALTER TABLE service_registry ADD COLUMN IF NOT EXISTS start_time TIMESTAMP;
```

## Changelog
- 1.0.0 (2025-08-26): Initial comprehensive health documentation created
- Fixed 23 service passport protection system
- Updated all startup commands with correct file paths
- Established 87% health rate as production-ready standard


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Health endpoint implementation**
- ‚úÖ **Master Orchestration integration**


---
*This documentation prevents future service management issues by providing clear procedures, troubleshooting steps, and maintenance guidelines.*

## Triggers
- **API endpoint requests**
- **Database events**
- **Health check requests**
