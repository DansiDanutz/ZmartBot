{
  "mdc_content": "# zmart-machine-learning.mdc\n> Purpose: Advanced machine learning system for ZmartBot trading with predictive models, pattern recognition, and automated strategy generation.\n\n## Service Overview\n**zmart_machine_learning** is a sophisticated backend service that provides advanced machine learning capabilities for the ZmartBot trading system. It manages predictive models, pattern recognition, feature engineering, and automated strategy generation to enable data-driven trading decisions and automated strategy optimization.\n\n## Architecture\n**Type**: Backend Service (FastAPI-based)\n**Port**: 8014\n**Language**: Python 3.11+\n**Framework**: FastAPI, TensorFlow, PyTorch, Scikit-learn, Pandas, NumPy\n**Database**: PostgreSQL (model metadata), Redis (caching), MongoDB (model artifacts)\n**Compute**: GPU-enabled computing for deep learning models\n**ML Platform**: MLflow, Kubeflow, TensorFlow Serving\n\n### Core Components\n- **Model Training Engine**: Automated model training and validation\n- **Feature Engineering Pipeline**: Automated feature creation and selection\n- **Prediction Service**: Real-time model inference and prediction\n- **Model Registry**: Model versioning and lifecycle management\n- **Performance Monitor**: Model performance tracking and drift detection\n- **Strategy Generator**: Automated trading strategy creation\n- **ML API**: RESTful API for ML operations\n- **Model Serving**: High-performance model inference\n\n## API Endpoints\n\n### Model Management Endpoints\n- `POST /api/v1/models/train` - Train new model\n- `GET /api/v1/models/list` - List all models\n- `GET /api/v1/models/{model_id}` - Get model details\n- `PUT /api/v1/models/{model_id}` - Update model\n- `DELETE /api/v1/models/{model_id}` - Delete model\n- `POST /api/v1/models/{model_id}/deploy` - Deploy model\n- `POST /api/v1/models/{model_id}/undeploy` - Undeploy model\n\n### Prediction Endpoints\n- `POST /api/v1/predict/single` - Single prediction\n- `POST /api/v1/predict/batch` - Batch prediction\n- `POST /api/v1/predict/stream` - Streaming prediction\n- `GET /api/v1/predict/status` - Prediction service status\n- `POST /api/v1/predict/explain` - Model explanation and interpretability\n\n### Feature Engineering Endpoints\n- `POST /api/v1/features/create` - Create new features\n- `GET /api/v1/features/list` - List available features\n- `POST /api/v1/features/select` - Feature selection\n- `GET /api/v1/features/importance` - Feature importance analysis\n- `POST /api/v1/features/validate` - Validate feature quality\n\n### Model Evaluation Endpoints\n- `POST /api/v1/evaluation/run` - Run model evaluation\n- `GET /api/v1/evaluation/{model_id}` - Get evaluation results\n- `POST /api/v1/evaluation/compare` - Compare model performance\n- `GET /api/v1/evaluation/metrics` - Get evaluation metrics\n- `POST /api/v1/evaluation/cross-validation` - Cross-validation\n\n### Strategy Generation Endpoints\n- `POST /api/v1/strategies/generate` - Generate trading strategy\n- `GET /api/v1/strategies/list` - List generated strategies\n- `POST /api/v1/strategies/optimize` - Optimize strategy\n- `GET /api/v1/strategies/{strategy_id}` - Get strategy details\n- `POST /api/v1/strategies/{strategy_id}/validate` - Validate strategy\n\n### Automation Endpoints\n- `POST /api/v1/automation/feature-selection` - Automated feature selection\n- `POST /api/v1/automation/hyperparameter-optimization` - Hyperparameter optimization\n- `POST /api/v1/automation/model-selection` - Automated model selection\n- `POST /api/v1/automation/ensemble-generation` - Ensemble generation\n- `POST /api/v1/automation/retraining` - Automated model retraining\n\n### Performance Monitoring Endpoints\n- `GET /api/v1/monitoring/performance` - Model performance metrics\n- `GET /api/v1/monitoring/drift` - Data drift detection\n- `GET /api/v1/monitoring/alerts` - Performance alerts\n- `POST /api/v1/monitoring/thresholds` - Set monitoring thresholds\n- `GET /api/v1/monitoring/dashboard` - Performance dashboard data\n\n### Health & Status\n- `GET /health` - Service health check\n- `GET /ready` - Service readiness check\n- `GET /metrics` - Prometheus metrics\n- `GET /startup` - Startup probe endpoint\n\n## ML Models\n\n### Time Series Models\n- **ARIMA**: Autoregressive Integrated Moving Average for trend prediction\n- **SARIMA**: Seasonal ARIMA for seasonal pattern prediction\n- **Prophet**: Facebook's time series forecasting tool\n- **VAR**: Vector Autoregression for multivariate time series\n- **GARCH**: Generalized Autoregressive Conditional Heteroskedasticity for volatility\n\n### Regression Models\n- **Linear Regression**: Simple linear relationship modeling\n- **Ridge Regression**: L2 regularization for overfitting prevention\n- **Lasso Regression**: L1 regularization for feature selection\n- **Elastic Net**: Combined L1 and L2 regularization\n- **Polynomial Regression**: Non-linear relationship modeling\n\n### Classification Models\n- **Random Forest**: Ensemble of decision trees for robust classification\n- **Support Vector Machine**: Kernel-based classification\n- **Neural Networks**: Multi-layer perceptron for complex patterns\n- **Gradient Boosting**: Sequential ensemble learning\n- **XGBoost**: Optimized gradient boosting implementation\n\n### Clustering Models\n- **K-means**: Partition-based clustering for market regimes\n- **DBSCAN**: Density-based clustering for outlier detection\n- **Hierarchical Clustering**: Tree-based clustering structure\n- **Gaussian Mixture Models**: Probabilistic clustering\n- **Spectral Clustering**: Graph-based clustering\n\n### Deep Learning Models\n- **LSTM**: Long Short-Term Memory for sequence prediction\n- **GRU**: Gated Recurrent Unit for efficient sequence modeling\n- **Transformer**: Attention-based architecture for complex patterns\n- **CNN**: Convolutional Neural Networks for pattern recognition\n- **Autoencoder**: Dimensionality reduction and feature learning\n\n### Ensemble Models\n- **Stacking**: Meta-learning ensemble combination\n- **Boosting**: Sequential ensemble improvement\n- **Bagging**: Parallel ensemble averaging\n- **Voting**: Majority-based ensemble decision\n- **Blending**: Weighted ensemble combination\n\n### Reinforcement Learning\n- **Q-Learning**: Value-based reinforcement learning\n- **DQN**: Deep Q-Network for complex state spaces\n- **A3C**: Asynchronous Advantage Actor-Critic\n- **PPO**: Proximal Policy Optimization\n- **SAC**: Soft Actor-Critic for continuous control\n\n### Natural Language Processing\n- **BERT**: Bidirectional Encoder Representations for sentiment\n- **GPT**: Generative Pre-trained Transformer for text generation\n- **Word2Vec**: Word embeddings for text analysis\n- **LSTM for NLP**: Sequence modeling for text data\n- **Transformer for NLP**: Attention-based text processing\n\n## Feature Engineering\n\n### Technical Indicators\n- **RSI**: Relative Strength Index for momentum\n- **MACD**: Moving Average Convergence Divergence\n- **Bollinger Bands**: Volatility and trend indicators\n- **Moving Averages**: Simple, exponential, weighted averages\n- **Stochastic Oscillator**: Momentum and overbought/oversold\n- **Williams %R**: Momentum oscillator\n- **CCI**: Commodity Channel Index\n- **ADX**: Average Directional Index\n\n### Price Features\n- **Returns**: Price change percentages\n- **Volatility**: Price variability measures\n- **Momentum**: Price movement strength\n- **Mean Reversion**: Price correction tendencies\n- **Price Levels**: Support and resistance levels\n- **Price Patterns**: Chart pattern recognition\n- **Gaps**: Price gap analysis\n- **Candlestick Patterns**: Japanese candlestick analysis\n\n### Volume Features\n- **Volume Profile**: Volume distribution analysis\n- **VWAP**: Volume Weighted Average Price\n- **Volume Indicators**: On-balance volume, volume rate of change\n- **Volume Patterns**: Volume trend analysis\n- **Volume Divergence**: Price-volume relationship\n- **Accumulation/Distribution**: Volume-based trend analysis\n- **Money Flow Index**: Volume-weighted momentum\n- **Volume Oscillators**: Volume-based oscillators\n\n### Market Microstructure\n- **Bid-Ask Spread**: Market liquidity measure\n- **Order Flow**: Order book analysis\n- **Market Depth**: Liquidity depth analysis\n- **Tick Data**: High-frequency price movements\n- **Trade Size**: Average trade size analysis\n- **Order Imbalance**: Buy/sell order imbalance\n- **Market Impact**: Trade impact on price\n- **Slippage**: Execution cost analysis\n\n### Economic Features\n- **Interest Rates**: Central bank rates, yield curves\n- **Inflation Data**: CPI, PPI, inflation expectations\n- **GDP Data**: Economic growth indicators\n- **Employment Data**: Unemployment rates, job reports\n- **Central Bank Data**: Monetary policy indicators\n- **Economic Calendar**: Scheduled economic events\n- **Currency Strength**: Forex correlation analysis\n- **Commodity Prices**: Raw material price correlation\n\n### Sentiment Features\n- **News Sentiment**: News article sentiment analysis\n- **Social Media Sentiment**: Twitter, Reddit sentiment\n- **Fear/Greed Index**: Market sentiment indicators\n- **VIX**: Volatility index as sentiment proxy\n- **Put/Call Ratio**: Options sentiment analysis\n- **Fund Flows**: Investment fund flow data\n- **Analyst Ratings**: Professional analyst opinions\n- **Earnings Sentiment**: Corporate earnings sentiment\n\n### Cross-Asset Features\n- **Correlation**: Asset correlation analysis\n- **Cointegration**: Long-term relationship analysis\n- **Relative Strength**: Asset performance comparison\n- **Cross-Asset Momentum**: Multi-asset momentum\n- **Currency Effects**: Forex impact on assets\n- **Sector Rotation**: Industry sector analysis\n- **Geographic Exposure**: Regional market analysis\n- **Asset Allocation**: Portfolio allocation signals\n\n### Temporal Features\n- **Time of Day**: Intraday patterns\n- **Day of Week**: Weekly patterns\n- **Seasonal Patterns**: Calendar effects\n- **Holiday Effects**: Market holiday impact\n- **Earnings Calendar**: Corporate event timing\n- **Economic Calendar**: Macro event timing\n- **Market Hours**: Trading session effects\n- **Time Zones**: Global market timing\n\n## Prediction Tasks\n\n### Price Direction Prediction\n- **Binary Classification**: Up/down price movement\n- **Multi-class Classification**: Strong up, up, neutral, down, strong down\n- **Probability Estimation**: Movement probability scores\n- **Confidence Intervals**: Prediction uncertainty\n- **Time Horizons**: 1min, 5min, 1h, 1d predictions\n\n### Price Level Prediction\n- **Point Prediction**: Specific price targets\n- **Interval Prediction**: Price range forecasts\n- **Distribution Prediction**: Price probability distributions\n- **Quantile Regression**: Price quantile estimation\n- **Multi-step Ahead**: Multi-period forecasting\n\n### Volatility Prediction\n- **Realized Volatility**: Historical volatility forecasting\n- **Implied Volatility**: Options-based volatility\n- **Volatility Regimes**: High/low volatility states\n- **Volatility Clustering**: Volatility persistence\n- **Volatility Term Structure**: Multi-period volatility\n\n### Volume Prediction\n- **Volume Forecasting**: Trading volume prediction\n- **Volume Patterns**: Volume trend analysis\n- **Volume Regimes**: High/low volume states\n- **Volume Anomalies**: Unusual volume detection\n- **Volume Impact**: Price impact of volume\n\n### Market Regime Detection\n- **Bull/Bear/Sideways**: Market trend classification\n- **Volatility Regimes**: High/low volatility states\n- **Correlation Regimes**: Asset correlation states\n- **Liquidity Regimes**: Market liquidity states\n- **Regime Transitions**: State change prediction\n\n### Risk Prediction\n- **Value at Risk**: Loss probability estimation\n- **Expected Shortfall**: Tail risk estimation\n- **Drawdown Prediction**: Maximum loss forecasting\n- **Tail Risk**: Extreme event probability\n- **Risk Decomposition**: Risk factor analysis\n\n### Signal Generation\n- **Buy/Sell/Hold**: Trading signal classification\n- **Signal Strength**: Signal confidence scores\n- **Signal Timing**: Optimal entry/exit timing\n- **Signal Validation**: Signal quality assessment\n- **Signal Combination**: Multi-signal fusion\n\n### Portfolio Optimization\n- **Asset Allocation**: Optimal weight determination\n- **Risk Parity**: Risk-balanced allocation\n- **Mean-Variance**: Return-risk optimization\n- **Black-Litterman**: Bayesian portfolio optimization\n- **Dynamic Rebalancing**: Adaptive allocation\n\n## Model Evaluation\n\n### Accuracy Metrics\n- **Precision**: True positive rate\n- **Recall**: Sensitivity or true positive rate\n- **F1-Score**: Harmonic mean of precision and recall\n- **Accuracy**: Overall correct predictions\n- **Balanced Accuracy**: Balanced class performance\n- **ROC-AUC**: Receiver Operating Characteristic\n- **PR-AUC**: Precision-Recall Area Under Curve\n\n### Regression Metrics\n- **MSE**: Mean Squared Error\n- **MAE**: Mean Absolute Error\n- **RMSE**: Root Mean Squared Error\n- **R-squared**: Coefficient of determination\n- **Adjusted R-squared**: Penalized R-squared\n- **MAPE**: Mean Absolute Percentage Error\n- **SMAPE**: Symmetric Mean Absolute Percentage Error\n\n### Financial Metrics\n- **Sharpe Ratio**: Risk-adjusted returns\n- **Maximum Drawdown**: Largest peak-to-trough decline\n- **Profit Factor**: Gross profit to gross loss ratio\n- **Win Rate**: Percentage of profitable trades\n- **Calmar Ratio**: Return to maximum drawdown\n- **Sortino Ratio**: Downside risk-adjusted returns\n- **Information Ratio**: Excess return to tracking error\n\n### Cross-Validation\n- **Time Series CV**: Forward chaining validation\n- **Walk-Forward**: Rolling window validation\n- **Expanding Window**: Growing training set\n- **Blocked CV**: Time-blocked validation\n- **Purged CV**: Event-based validation\n\n### Backtesting\n- **Historical Performance**: Past performance evaluation\n- **Out-of-Sample Testing**: Unseen data performance\n- **Walk-Forward Analysis**: Rolling performance analysis\n- **Monte Carlo Simulation**: Random scenario testing\n- **Stress Testing**: Extreme condition testing\n\n### Model Interpretability\n- **Feature Importance**: Variable significance\n- **SHAP Values**: SHapley Additive exPlanations\n- **Partial Dependence**: Feature effect analysis\n- **LIME**: Local Interpretable Model-agnostic Explanations\n- **Permutation Importance**: Feature contribution\n\n### Model Stability\n- **Performance Consistency**: Stable performance over time\n- **Feature Stability**: Consistent feature importance\n- **Prediction Stability**: Consistent predictions\n- **Model Drift**: Performance degradation detection\n- **Concept Drift**: Data distribution changes\n\n## Automation Features\n\n### Automated Feature Selection\n- **Statistical Methods**: Correlation, chi-square, mutual information\n- **ML-based Methods**: Recursive feature elimination, LASSO\n- **Wrapper Methods**: Forward/backward selection\n- **Embedded Methods**: Tree-based feature importance\n- **Filter Methods**: Variance, correlation-based filtering\n\n### Hyperparameter Optimization\n- **Grid Search**: Exhaustive parameter search\n- **Random Search**: Stochastic parameter exploration\n- **Bayesian Optimization**: Probabilistic optimization\n- **Genetic Algorithm**: Evolutionary optimization\n- **Optuna**: Advanced hyperparameter optimization\n\n### Model Selection\n- **Cross-Validation**: Performance-based selection\n- **Ensemble Methods**: Multiple model combination\n- **Meta-Learning**: Learning to learn\n- **AutoML**: Automated machine learning\n- **Model Comparison**: Statistical significance testing\n\n### Ensemble Generation\n- **Stacking**: Meta-learner ensemble\n- **Blending**: Weighted ensemble\n- **Bagging**: Bootstrap aggregating\n- **Boosting**: Sequential ensemble\n- **Voting**: Majority-based ensemble\n\n### Strategy Generation\n- **Rule-based Generation**: Automated rule creation\n- **ML-based Generation**: Model-driven strategies\n- **Optimization-based**: Mathematical optimization\n- **Evolutionary**: Genetic algorithm strategies\n- **Reinforcement Learning**: RL-based strategies\n\n### Risk Management\n- **Position Sizing**: Kelly criterion, risk parity\n- **Stop Loss**: Dynamic stop loss calculation\n- **Take Profit**: Dynamic take profit levels\n- **Portfolio Limits**: Risk-based position limits\n- **Correlation Management**: Diversification optimization\n\n### Performance Monitoring\n- **Real-time Tracking**: Live performance monitoring\n- **Drift Detection**: Data and concept drift\n- **Alert System**: Performance degradation alerts\n- **Dashboard**: Real-time performance visualization\n- **Reporting**: Automated performance reports\n\n### Model Retraining\n- **Scheduled Retraining**: Time-based retraining\n- **Performance-based**: Performance-triggered retraining\n- **Data-based**: New data-triggered retraining\n- **Drift-based**: Drift-triggered retraining\n- **A/B Testing**: Model comparison testing\n\n## Integration\n\n### Dependencies\n- **zmart-api**: Trading data and model deployment\n- **zmart_technical_analysis**: Technical indicator features\n- **zmart_risk_management**: Risk metrics and limits\n- **zmart_data_warehouse**: Historical data and feature storage\n- **zmart_backtesting**: Model performance evaluation\n\n### External Integrations\n- **Data Providers**: Market data vendors and APIs\n- **ML Frameworks**: TensorFlow, PyTorch, Scikit-learn\n- **Model Serving**: TensorFlow Serving, TorchServe\n- **ML Platforms**: MLflow, Kubeflow, SageMaker\n- **Cloud Services**: AWS, GCP, Azure ML services\n\n### Data Flow\n1. **Data Ingestion**: Collect market and economic data\n2. **Data Preprocessing**: Clean, normalize, and prepare data\n3. **Feature Engineering**: Create and select features\n4. **Model Training**: Train and validate models\n5. **Model Deployment**: Deploy models for inference\n6. **Prediction Service**: Real-time prediction generation\n7. **Performance Monitoring**: Track model performance\n8. **Model Maintenance**: Retrain and update models\n\n## Configuration\n\n### Environment Variables\n```bash\nML_DB_HOST=localhost\nML_DB_PORT=5432\nML_DB_NAME=zmart_ml\nML_DB_USER=ml_user\nML_DB_PASSWORD=secure_password\nREDIS_HOST=localhost\nREDIS_PORT=6379\nMONGODB_HOST=localhost\nMONGODB_PORT=27017\nMONGODB_NAME=zmart_ml_models\nDATA_WAREHOUSE_URL=http://localhost:8015\nTECHNICAL_ANALYSIS_URL=http://localhost:8011\nRISK_MANAGEMENT_URL=http://localhost:8010\nBACKTESTING_URL=http://localhost:8013\nAPI_RATE_LIMIT=300\nMODEL_TRAINING_TIMEOUT=3600\nPREDICTION_TIMEOUT=30\nGPU_ENABLED=true\nMODEL_CACHE_SIZE=1000\n```\n\n### ML Configuration\n```yaml\nml_settings:\n  model_registry:\n    storage_type: mongodb\n    versioning: true\n    artifact_storage: s3\n    model_metadata: postgresql\n    \n  training_settings:\n    default_algorithm: xgboost\n    cross_validation_folds: 5\n    test_size: 0.2\n    random_state: 42\n    n_jobs: -1\n    \n  feature_engineering:\n    auto_feature_selection: true\n    feature_selection_method: mutual_info\n    max_features: 100\n    feature_scaling: standard\n    \n  hyperparameter_optimization:\n    method: bayesian\n    n_trials: 100\n    timeout: 3600\n    cv_folds: 5\n    \n  model_evaluation:\n    primary_metric: f1_score\n    secondary_metrics: [precision, recall, roc_auc]\n    financial_metrics: [sharpe_ratio, max_drawdown, profit_factor]\n    \n  prediction_settings:\n    batch_size: 1000\n    timeout: 30\n    cache_predictions: true\n    cache_ttl: 300\n    \n  monitoring_settings:\n    performance_threshold: 0.7\n    drift_threshold: 0.1\n    retraining_threshold: 0.05\n    alert_enabled: true\n    \n  automation_settings:\n    auto_retraining: true\n    retraining_schedule: weekly\n    auto_feature_selection: true\n    auto_hyperparameter_optimization: true\n    \nmodel_types:\n  classification:\n    algorithms: [random_forest, xgboost, lightgbm, neural_network]\n    default: xgboost\n    \n  regression:\n    algorithms: [linear_regression, ridge, lasso, xgboost, neural_network]\n    default: xgboost\n    \n  time_series:\n    algorithms: [arima, prophet, lstm, transformer]\n    default: lstm\n    \n  clustering:\n    algorithms: [kmeans, dbscan, hierarchical]\n    default: kmeans\n```\n\n## Monitoring\n\n### Health Checks\n- **Liveness**: Service is running and responsive\n- **Readiness**: Service is ready to handle ML requests\n- **Startup**: Service has completed initialization\n\n### Metrics\n- **Model Training Rate**: Models trained per day\n- **Prediction Latency**: Average prediction response time\n- **Model Accuracy**: Average model performance\n- **Resource Usage**: CPU, memory, GPU usage\n- **Cache Hit Rate**: Prediction cache efficiency\n- **Error Rate**: ML service errors\n- **Model Drift**: Data drift detection\n\n### Logging\n- **Structured Logs**: JSON format for easy parsing\n- **Log Levels**: DEBUG, INFO, WARNING, ERROR, CRITICAL\n- **Training Events**: All model training events\n- **Prediction Events**: All prediction requests and responses\n- **Performance Events**: Model performance tracking\n- **Drift Events**: Data and concept drift detection\n\n## Security\n\n### Authentication\n- **Service Token**: Required for all API access\n- **API Key Validation**: Secure API key management\n- **Rate Limiting**: 300 requests per minute\n- **Burst Protection**: 30 requests burst limit\n\n### Data Protection\n- **Encryption**: All ML data encrypted in transit and at rest\n- **Access Control**: Role-based access to models and predictions\n- **Audit Logging**: All ML operations logged\n- **Data Retention**: Configurable data retention policies\n\n### Model Security\n- **Model Encryption**: Encrypted model storage\n- **Access Control**: Model access permissions\n- **Version Control**: Model version security\n- **Deployment Security**: Secure model deployment\n\n### API Security\n- **HTTPS Only**: All API communication over HTTPS\n- **Input Validation**: Strict input validation and sanitization\n- **SQL Injection Protection**: Parameterized queries\n- **XSS Protection**: Output encoding and validation\n\n## Performance\n\n### SLOs (Service Level Objectives)\n- **Availability**: 99.5% uptime\n- **Response Time**: < 100ms for single predictions\n- **Training Time**: < 1 hour for standard models\n- **Throughput**: 1000 predictions per minute\n- **Model Accuracy**: > 70% for classification tasks\n\n### Resource Limits\n- **Memory**: 4GB maximum usage\n- **CPU**: 2.0 CPU cores\n- **GPU**: 1 GPU for deep learning\n- **Connections**: 150 concurrent database connections\n- **Request Timeout**: 600 seconds maximum\n- **Storage**: 50GB for model artifacts\n\n### Optimization\n- **Model Caching**: Redis-based prediction caching\n- **Batch Processing**: Efficient batch prediction\n- **GPU Acceleration**: GPU-enabled model inference\n- **Model Compression**: Quantized and pruned models\n- **Load Balancing**: Distributed model serving\n\n## Failure Modes\n\n### Model Training Failed\n**Symptoms**: ML model training errors or timeouts\n**Impact**: New models cannot be created\n**Remediation**: Check training data, restart training process\n**Prevention**: Data validation, resource monitoring\n\n### Prediction Service Failed\n**Symptoms**: Prediction service errors or high latency\n**Impact**: Real-time predictions unavailable\n**Remediation**: Check model availability, restart prediction service\n**Prevention**: Model health monitoring, load balancing\n\n### Data Pipeline Failed\n**Symptoms**: Data preprocessing or feature engineering errors\n**Impact**: Feature generation and model updates fail\n**Remediation**: Check data quality, restart data pipeline\n**Prevention**: Data validation, pipeline monitoring\n\n### Model Drift Detected\n**Symptoms**: Model performance degradation over time\n**Impact**: Predictions become less accurate\n**Remediation**: Retrain models with new data\n**Prevention**: Continuous monitoring, automated retraining\n\n### Resource Exhaustion\n**Symptoms**: High memory or CPU usage during training\n**Impact**: Service crashes or slow performance\n**Remediation**: Increase resource limits, optimize models\n**Prevention**: Resource monitoring, model optimization\n\n## Dependencies\n\n### Required Services\n- **zmart-api**: Trading data and model deployment\n- **zmart_technical_analysis**: Technical indicator features\n- **zmart_risk_management**: Risk metrics and limits\n- **zmart_data_warehouse**: Historical data and feature storage\n- **zmart_backtesting**: Model performance evaluation\n\n### External Dependencies\n- **PostgreSQL**: Model metadata and feature storage\n- **Redis**: Caching and session management\n- **MongoDB**: Model artifacts and versioning\n- **ML Frameworks**: TensorFlow, PyTorch, Scikit-learn\n- **ML Platforms**: MLflow, Kubeflow\n\n### System Requirements\n- **Python 3.11+**: Runtime environment\n- **FastAPI**: Web framework\n- **TensorFlow**: Deep learning framework\n- **PyTorch**: Deep learning framework\n- **Scikit-learn**: Machine learning library\n- **Pandas**: Data manipulation\n- **NumPy**: Numerical computing\n\n## Orchestration\n\n### Auto Start\n- **Enabled**: Yes\n- **Dependencies**: zmart-api, zmart_technical_analysis, zmart_risk_management, zmart_data_warehouse, zmart_backtesting\n- **Startup Order**: After dependencies are ready\n\n### Restart Policy\n- **Policy**: Always restart on failure\n- **Max Restarts**: 3 attempts\n- **Restart Delay**: 20 seconds between attempts\n- **Backoff Strategy**: Exponential backoff\n\n### Health Monitoring\n- **Check Interval**: 20 seconds\n- **Timeout**: 15 seconds\n- **Failure Threshold**: 3 consecutive failures\n- **Recovery Threshold**: 1 successful check\n\n## Rollback\n\n### Snapshot Requirements\n- **Required**: Yes\n- **Frequency**: Before major model updates\n- **Data Included**: Model artifacts, configurations, performance data\n- **Retention**: 180 days of snapshots\n\n### Rollback Strategy\n- **Strategy**: Immediate rollback on critical failures\n- **Data Consistency**: Full data consistency check\n- **Validation**: ML system validation after rollback\n- **Notification**: Alert stakeholders of rollback\n\n### Data Protection\n- **Backup Strategy**: Daily automated backups\n- **Recovery Time**: < 15 minutes\n- **Data Integrity**: Checksums and validation\n- **Point-in-Time Recovery**: Support for specific timestamps\n\n## Load Balancing\n\n### Configuration\n- **Enabled**: No (single instance)\n- **Pool**: null\n- **Reason**: ML models require state consistency and GPU resources\n\n### Scaling Considerations\n- **Horizontal Scaling**: Not supported (stateful service)\n- **Vertical Scaling**: Memory, CPU, and GPU upgrades\n- **Read Replicas**: Database read replicas for queries\n- **Caching**: Redis-based caching for performance\n\n## Known Issues\n\n### Long Model Training Times\n**Issue**: Long model training times for complex models\n**Status**: Monitoring\n**Impact**: Delayed model updates\n**Workaround**: Implement model versioning and incremental training\n**Long-term Fix**: Distributed training and model optimization\n\n### GPU Memory Usage\n**Issue**: High GPU memory usage during deep learning training\n**Status**: Investigating\n**Impact**: Training failures and resource exhaustion\n**Workaround**: Model optimization and memory management\n**Long-term Fix**: GPU cluster and distributed training\n\n### Model Interpretability\n**Issue**: Complex models lack interpretability\n**Status**: Monitoring\n**Impact**: Difficulty in understanding predictions\n**Workaround**: Use interpretable models and SHAP analysis\n**Long-term Fix**: Advanced interpretability techniques\n\n## Status\n✅ **DISCOVERED** - Machine learning system with advanced predictive modeling and automated strategy generation\n\n## Changelog\n- **1.0.0** (2025-08-25): Initial machine learning system implementation\n  - Predictive model development and deployment\n  - Pattern recognition and feature engineering\n  - Automated strategy generation\n  - Model performance monitoring and optimization\n  - Deep learning and NLP capabilities\n\n---\ndescription: \"Machine learning system for ZmartBot trading\"\nglobs:\n  - \"**/*.py\"\n  - \"**/*.yaml\"\n  - \"**/*.yml\"\nalwaysApply: true\nseverity: \"info\"\ntags: [\"machine-learning\", \"backend\", \"predictive-models\", \"automation\"]\nupdated: \"2025-08-25\"\n",
  "validation": {
    "schema_compliance": true,
    "content_completeness": true,
    "technical_accuracy": true,
    "format_correctness": true
  },
  "metadata": {
    "generated_at": "2025-08-25T01:50:00Z",
    "model": "gpt-5",
    "input_hash": "sha256-machine-learning-service",
    "context_files": ["machine_learning_context.json", "service.yaml"]
  }
}
