{
  "mdc_content": "# zmart-alert-system.mdc\n> Purpose: Comprehensive alert system for ZmartBot trading system with multi-channel notifications, alert management, and escalation procedures.\n\n## Service Overview\n**zmart_alert_system** is a sophisticated backend service that provides comprehensive alerting capabilities for the ZmartBot trading system. It manages multi-channel notifications, alert escalation, and real-time alert processing to ensure critical trading events are communicated effectively across all stakeholders.\n\n## Architecture\n**Type**: Backend Service (FastAPI-based)\n**Port**: 8012\n**Language**: Python 3.11+\n**Framework**: FastAPI, Celery, Redis, SQLAlchemy\n**Database**: PostgreSQL (alert data), Redis (queue and caching)\n\n### Core Components\n- **Alert Processing Engine**: Real-time alert processing and routing\n- **Notification Manager**: Multi-channel notification delivery\n- **Escalation Engine**: Alert escalation procedures and routing\n- **Alert Analytics**: Alert history, performance, and analytics\n- **Alert API**: RESTful API for alert management\n- **Template Engine**: Dynamic alert template generation\n\n## API Endpoints\n\n### Alert Management Endpoints\n- `POST /api/v1/alerts/create` - Create new alert\n- `GET /api/v1/alerts/active` - Get active alerts\n- `POST /api/v1/alerts/acknowledge` - Acknowledge alert\n- `POST /api/v1/alerts/resolve` - Resolve alert\n- `POST /api/v1/alerts/escalate` - Escalate alert\n- `GET /api/v1/alerts/history` - Get alert history\n- `GET /api/v1/alerts/{alert_id}` - Get specific alert details\n\n### Notification Endpoints\n- `POST /api/v1/notifications/send` - Send notification\n- `POST /api/v1/notifications/batch` - Send batch notifications\n- `GET /api/v1/notifications/status` - Get notification delivery status\n- `POST /api/v1/notifications/retry` - Retry failed notifications\n- `GET /api/v1/notifications/history` - Get notification history\n\n### Alert Configuration Endpoints\n- `POST /api/v1/alerts/rules/create` - Create alert rule\n- `GET /api/v1/alerts/rules/list` - List alert rules\n- `PUT /api/v1/alerts/rules/{rule_id}` - Update alert rule\n- `DELETE /api/v1/alerts/rules/{rule_id}` - Delete alert rule\n- `POST /api/v1/alerts/templates/create` - Create alert template\n- `GET /api/v1/alerts/templates/list` - List alert templates\n\n### Escalation Endpoints\n- `POST /api/v1/escalation/configure` - Configure escalation rules\n- `GET /api/v1/escalation/rules` - Get escalation rules\n- `POST /api/v1/escalation/trigger` - Trigger escalation\n- `GET /api/v1/escalation/status` - Get escalation status\n\n### Health & Status\n- `GET /health` - Service health check\n- `GET /ready` - Service readiness check\n- `GET /metrics` - Prometheus metrics\n- `GET /startup` - Startup probe endpoint\n\n## Alert Types\n\n### Trading Alerts\n- **Price Movement Alerts**: Significant price changes, breakouts, breakdowns\n- **Volume Spike Alerts**: Unusual trading volume activity\n- **Order Execution Alerts**: Order fills, partial fills, rejections\n- **Position Alerts**: Position changes, margin calls, liquidation warnings\n- **P&L Alerts**: Profit/loss threshold breaches\n\n### Risk Alerts\n- **VaR Violations**: Value at Risk threshold breaches\n- **Drawdown Alerts**: Maximum drawdown warnings\n- **Risk Limit Breaches**: Position size, leverage limit violations\n- **Correlation Alerts**: High correlation warnings\n- **Volatility Alerts**: Extreme volatility events\n\n### Technical Alerts\n- **Indicator Signals**: RSI, MACD, Bollinger Bands signals\n- **Pattern Recognition**: Chart pattern completion alerts\n- **Support/Resistance**: Key level breaks and tests\n- **Trend Changes**: Trend reversal and continuation signals\n- **Divergence Alerts**: Price-indicator divergence warnings\n\n### System Alerts\n- **Health Monitoring**: Service health and availability\n- **Performance Alerts**: High latency, memory usage, CPU alerts\n- **Database Alerts**: Connection issues, query performance\n- **API Alerts**: Rate limiting, authentication failures\n- **Infrastructure Alerts**: Server, network, storage issues\n\n### Security Alerts\n- **Authentication Failures**: Failed login attempts, suspicious access\n- **Authorization Violations**: Unauthorized access attempts\n- **API Key Issues**: Expired, compromised, or misused API keys\n- **Data Breach Alerts**: Potential data security incidents\n- **System Intrusion**: Suspicious system activity\n\n## Notification Channels\n\n### Email Notifications\n- **SMTP Integration**: Direct SMTP server integration\n- **HTML Templates**: Rich HTML email templates\n- **Attachment Support**: PDF reports, charts, data exports\n- **Email Scheduling**: Scheduled email delivery\n- **Delivery Confirmation**: Email delivery tracking\n\n### SMS Notifications\n- **SMS Gateway Integration**: Multiple SMS gateway providers\n- **Text Templates**: Customizable text message templates\n- **Character Limits**: Automatic message truncation\n- **Delivery Reports**: SMS delivery confirmation\n- **International Support**: Multi-country SMS delivery\n\n### Push Notifications\n- **Mobile Apps**: iOS and Android push notifications\n- **Web Push**: Browser-based push notifications\n- **Rich Notifications**: Images, actions, deep links\n- **Silent Notifications**: Background data updates\n- **Notification Groups**: Grouped notification management\n\n### Webhook Notifications\n- **HTTP Callbacks**: Real-time HTTP notifications\n- **Custom Headers**: Authentication and metadata headers\n- **Retry Logic**: Automatic retry on failure\n- **Payload Customization**: Flexible JSON payloads\n- **Rate Limiting**: Webhook rate limiting and throttling\n\n### Chat Platform Integrations\n- **Slack Integration**: Rich Slack message formatting\n- **Discord Integration**: Discord webhook notifications\n- **Telegram Bot**: Telegram bot notifications\n- **Microsoft Teams**: Teams webhook integration\n- **Custom Chat**: Custom chat platform support\n\n### Dashboard Notifications\n- **Real-time Updates**: Live dashboard alert display\n- **Alert Widgets**: Dedicated alert display components\n- **Sound Alerts**: Audio notification support\n- **Visual Indicators**: Color-coded alert severity\n- **Interactive Alerts**: Clickable alert actions\n\n## Escalation Procedures\n\n### Level 1: Immediate Notification\n- **Recipients**: Primary users, traders, system operators\n- **Channels**: Email, SMS, Push notifications\n- **Response Time**: Immediate (0-5 minutes)\n- **Actions**: Alert acknowledgment, initial assessment\n- **Automation**: Automatic notification delivery\n\n### Level 2: Supervisor Escalation\n- **Recipients**: Supervisors, team leads, senior traders\n- **Channels**: Email, SMS, Chat platforms\n- **Response Time**: 5-15 minutes\n- **Actions**: Escalation decision, resource allocation\n- **Automation**: Automatic escalation after timeout\n\n### Level 3: Emergency Procedures\n- **Recipients**: System administrators, emergency contacts\n- **Channels**: Phone calls, urgent emails, emergency SMS\n- **Response Time**: 15-30 minutes\n- **Actions**: Emergency procedures, system intervention\n- **Automation**: Automatic emergency contact activation\n\n### Level 4: Critical System Shutdown\n- **Recipients**: C-level executives, emergency response team\n- **Channels**: Phone calls, urgent notifications, system shutdown\n- **Response Time**: 30-60 minutes\n- **Actions**: Critical decision making, system shutdown\n- **Automation**: Automatic system protection measures\n\n## Integration\n\n### Dependencies\n- **zmart-api**: Trading data and system events\n- **zmart_technical_analysis**: Technical indicator alerts\n- **zmart_risk_management**: Risk threshold monitoring\n- **zmart_notification**: Notification delivery infrastructure\n\n### External Integrations\n- **SMTP Servers**: Email delivery services\n- **SMS Gateways**: Text message delivery providers\n- **Push Services**: Apple Push Notification Service, Firebase Cloud Messaging\n- **Chat Platforms**: Slack, Discord, Telegram APIs\n- **Webhook Services**: External system integrations\n\n### Data Flow\n1. **Event Detection**: Trading events, system events, risk events\n2. **Alert Creation**: Automatic alert generation based on rules\n3. **Alert Processing**: Alert validation, enrichment, routing\n4. **Notification Delivery**: Multi-channel notification sending\n5. **Escalation Management**: Escalation procedures and routing\n6. **Alert Tracking**: Delivery confirmation, acknowledgment tracking\n7. **Analytics**: Alert performance and delivery analytics\n\n## Configuration\n\n### Environment Variables\n```bash\nALERT_DB_HOST=localhost\nALERT_DB_PORT=5432\nALERT_DB_NAME=zmart_alerts\nALERT_DB_USER=alert_user\nALERT_DB_PASSWORD=secure_password\nREDIS_HOST=localhost\nREDIS_PORT=6379\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=alerts@zmartbot.com\nSMTP_PASSWORD=secure_password\nSMS_GATEWAY_URL=https://api.twilio.com\nSMS_ACCOUNT_SID=your_account_sid\nSMS_AUTH_TOKEN=your_auth_token\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxx\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/xxx\nTELEGRAM_BOT_TOKEN=your_bot_token\nAPI_RATE_LIMIT=1000\nALERT_PROCESSING_INTERVAL=30\nESCALATION_CHECK_INTERVAL=60\n```\n\n### Alert Configuration\n```yaml\nalert_rules:\n  trading_alerts:\n    price_movement:\n      threshold: 0.05  # 5% price change\n      timeframe: 300   # 5 minutes\n      channels: [email, sms, push]\n    volume_spike:\n      threshold: 3.0   # 3x average volume\n      timeframe: 600   # 10 minutes\n      channels: [email, dashboard]\n  \n  risk_alerts:\n    var_violation:\n      threshold: 0.02  # 2% VaR\n      channels: [email, sms, chat]\n      escalation_level: 2\n    drawdown:\n      threshold: 0.15  # 15% drawdown\n      channels: [email, sms, phone]\n      escalation_level: 3\n  \n  system_alerts:\n    service_down:\n      channels: [email, sms, chat]\n      escalation_level: 2\n    high_latency:\n      threshold: 1000  # 1 second\n      channels: [email, dashboard]\n      escalation_level: 1\n\nescalation_rules:\n  level_1_timeout: 300   # 5 minutes\n  level_2_timeout: 900   # 15 minutes\n  level_3_timeout: 1800  # 30 minutes\n  level_4_timeout: 3600  # 1 hour\n\nnotification_channels:\n  email:\n    enabled: true\n    templates_dir: /templates/email\n    retry_attempts: 3\n    retry_delay: 60\n  sms:\n    enabled: true\n    gateway: twilio\n    retry_attempts: 2\n    retry_delay: 30\n  push:\n    enabled: true\n    platforms: [ios, android, web]\n    retry_attempts: 2\n    retry_delay: 30\n  webhook:\n    enabled: true\n    timeout: 10\n    retry_attempts: 3\n    retry_delay: 60\n```\n\n## Monitoring\n\n### Health Checks\n- **Liveness**: Service is running and responsive\n- **Readiness**: Service is ready to handle requests\n- **Startup**: Service has completed initialization\n\n### Metrics\n- **Alert Processing Rate**: Alerts processed per minute\n- **Notification Delivery Rate**: Notifications sent per minute\n- **Delivery Success Rate**: Percentage of successful deliveries\n- **Escalation Rate**: Number of escalations per hour\n- **Response Time**: Alert acknowledgment response times\n- **Queue Depth**: Alert processing queue length\n- **Error Rate**: Alert processing and delivery errors\n\n### Logging\n- **Structured Logs**: JSON format for easy parsing\n- **Log Levels**: DEBUG, INFO, WARNING, ERROR, CRITICAL\n- **Alert Events**: All alert creation, processing, and delivery events\n- **Escalation Events**: All escalation procedures and routing\n- **Performance Metrics**: API performance and timing data\n\n## Security\n\n### Authentication\n- **Service Token**: Required for all API access\n- **API Key Validation**: Secure API key management\n- **Rate Limiting**: 1000 requests per minute\n- **Burst Protection**: 100 requests burst limit\n\n### Data Protection\n- **Encryption**: All alert data encrypted in transit and at rest\n- **Access Control**: Role-based access to alert data\n- **Audit Logging**: All alert operations logged\n- **Data Retention**: Configurable data retention policies\n\n### API Security\n- **HTTPS Only**: All API communication over HTTPS\n- **Input Validation**: Strict input validation and sanitization\n- **SQL Injection Protection**: Parameterized queries\n- **XSS Protection**: Output encoding and validation\n\n## Performance\n\n### SLOs (Service Level Objectives)\n- **Availability**: 99.9% uptime\n- **Response Time**: < 100ms for alert creation\n- **Throughput**: 1000 alerts per minute\n- **Delivery Success**: 99.5% notification delivery success\n- **Escalation Time**: < 5 minutes for level 1 escalation\n\n### Resource Limits\n- **Memory**: 512MB maximum usage\n- **CPU**: 0.5 CPU cores\n- **Connections**: 50 concurrent database connections\n- **Request Timeout**: 30 seconds maximum\n\n### Optimization\n- **Caching**: Redis-based caching for alert templates and rules\n- **Batch Processing**: Batch notification delivery for efficiency\n- **Async Processing**: Non-blocking alert processing\n- **Database Optimization**: Indexed queries and connection pooling\n\n## Failure Modes\n\n### Notification Delivery Failed\n**Symptoms**: Alerts not being delivered to users\n**Impact**: Critical alerts may be missed\n**Remediation**: Check notification channels, restart alert service\n**Prevention**: Multiple notification channels, delivery confirmation\n\n### Alert Processing Failed\n**Symptoms**: Alert processing errors\n**Impact**: Alerts may not be created or routed\n**Remediation**: Check alert rules, restart processing engine\n**Prevention**: Input validation, error handling, retry logic\n\n### Escalation Failed\n**Symptoms**: Alert escalation not working\n**Impact**: Critical alerts may not reach appropriate personnel\n**Remediation**: Check escalation rules, restart escalation engine\n**Prevention**: Escalation testing, fallback procedures\n\n### Database Connection Failed\n**Symptoms**: Cannot connect to alert database\n**Impact**: Alert history and configuration unavailable\n**Remediation**: Check database connectivity, restart service\n**Prevention**: Connection pooling, health checks\n\n### High Alert Volume\n**Symptoms**: High alert volume during market volatility\n**Impact**: System slowdown, delayed notifications\n**Remediation**: Implement alert throttling and prioritization\n**Prevention**: Alert volume monitoring, dynamic throttling\n\n## Dependencies\n\n### Required Services\n- **zmart-api**: Trading data and system events\n- **zmart_technical_analysis**: Technical indicator alerts\n- **zmart_risk_management**: Risk threshold monitoring\n- **zmart_notification**: Notification delivery infrastructure\n\n### External Dependencies\n- **PostgreSQL**: Alert data and configuration storage\n- **Redis**: Queue management and caching\n- **SMTP Servers**: Email delivery services\n- **SMS Gateways**: Text message delivery\n- **Push Services**: Mobile and web push notifications\n\n### System Requirements\n- **Python 3.11+**: Runtime environment\n- **FastAPI**: Web framework\n- **Celery**: Task queue for background processing\n- **Redis**: Message broker and caching\n- **SQLAlchemy**: Database ORM\n\n## Orchestration\n\n### Auto Start\n- **Enabled**: Yes\n- **Dependencies**: zmart-api, zmart_technical_analysis, zmart_risk_management, zmart_notification\n- **Startup Order**: After dependencies are ready\n\n### Restart Policy\n- **Policy**: Always restart on failure\n- **Max Restarts**: 5 attempts\n- **Restart Delay**: 10 seconds between attempts\n- **Backoff Strategy**: Exponential backoff\n\n### Health Monitoring\n- **Check Interval**: 10 seconds\n- **Timeout**: 5 seconds\n- **Failure Threshold**: 3 consecutive failures\n- **Recovery Threshold**: 1 successful check\n\n## Rollback\n\n### Snapshot Requirements\n- **Required**: Yes\n- **Frequency**: Before major alert rule updates\n- **Data Included**: Alert rules, templates, escalation procedures\n- **Retention**: 30 days of snapshots\n\n### Rollback Strategy\n- **Strategy**: Immediate rollback on critical failures\n- **Data Consistency**: Full data consistency check\n- **Validation**: Alert system validation after rollback\n- **Notification**: Alert stakeholders of rollback\n\n### Data Protection\n- **Backup Strategy**: Daily automated backups\n- **Recovery Time**: < 5 minutes\n- **Data Integrity**: Checksums and validation\n- **Point-in-Time Recovery**: Support for specific timestamps\n\n## Load Balancing\n\n### Configuration\n- **Enabled**: No (single instance)\n- **Pool**: null\n- **Reason**: Alert processing requires state consistency\n\n### Scaling Considerations\n- **Horizontal Scaling**: Not supported (stateful service)\n- **Vertical Scaling**: Memory and CPU upgrades\n- **Read Replicas**: Database read replicas for queries\n- **Caching**: Redis-based caching for performance\n\n## Known Issues\n\n### High Alert Volume\n**Issue**: High alert volume during market volatility\n**Status**: Monitoring\n**Impact**: Potential system slowdown\n**Workaround**: Implement alert throttling and prioritization\n**Long-term Fix**: Dynamic alert volume management and optimization\n\n### Notification Delivery Delays\n**Issue**: Notification delivery can be delayed during high load\n**Status**: Investigating\n**Impact**: Delayed alert notifications\n**Workaround**: Increase processing capacity\n**Long-term Fix**: Queue optimization and parallel processing\n\n### Escalation Timeouts\n**Issue**: Escalation procedures can timeout during system stress\n**Status**: Monitoring\n**Impact**: Delayed escalation to critical personnel\n**Workaround**: Manual escalation procedures\n**Long-term Fix**: Escalation timeout optimization and fallback procedures\n\n## Status\n✅ **DISCOVERED** - Alert system with comprehensive notification and escalation capabilities\n\n## Changelog\n- **1.0.0** (2025-08-25): Initial alert system implementation\n  - Multi-channel notification system\n  - Alert management and escalation\n  - Real-time alert processing\n  - Alert history and analytics\n  - Integration with trading and risk systems\n\n---\ndescription: \"Alert system for ZmartBot trading system\"\nglobs:\n  - \"**/*.py\"\n  - \"**/*.yaml\"\n  - \"**/*.yml\"\nalwaysApply: true\nseverity: \"info\"\ntags: [\"alert-system\", \"backend\", \"notifications\", \"escalation\"]\nupdated: \"2025-08-25\"\n",
  "validation": {
    "schema_compliance": true,
    "content_completeness": true,
    "technical_accuracy": true,
    "format_correctness": true
  },
  "metadata": {
    "generated_at": "2025-08-25T01:30:00Z",
    "model": "gpt-5",
    "input_hash": "sha256-alert-system-service",
    "context_files": ["alert_system_context.json", "service.yaml"]
  }
}
