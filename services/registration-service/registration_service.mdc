# registration_service.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8902

## Purpose
Enterprise-grade service registration and management system for ZmartBot ecosystem, managing service registration lifecycle, validation, certification workflows, and comprehensive registration analytics with advanced visualization dashboards.

## Overview
ZmartBot Registration Service serving as the central backend hub for all service registration operations, lifecycle management, certification workflows, and comprehensive registration infrastructure with enterprise-grade security, performance monitoring, and multi-dashboard visualization capabilities.

## Critical Functions
- **Service Registration Management**: Complete service registration lifecycle from discovery to certification
- **Registration Validation**: Comprehensive validation of service requirements and dependencies
- **Certification Workflow**: Automated certification process with status tracking
- **Registration Analytics**: Real-time analytics and reporting on registration trends
- **Event Tracking**: Complete audit trail of all registration events and changes
- **Dashboard Visualization**: Multiple interactive dashboards with real-time data
- **API Endpoint Management**: RESTful API for registration operations and monitoring
- **Performance Analytics**: Registration performance metrics and optimization recommendations

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** fastapi, uvicorn, sqlite3, psutil, chart.js
- **Env Vars:** REGISTRATION_SERVICE_PORT, REGISTRATION_DB_PATH
- **Lifecycle:** start=`python3 registration_service.py --port 8902` | stop=`pkill -f registration_service` | migrate=`python3 create_registration_database.py`

## API Endpoints
### Core Registration Operations
- `GET /health` - Service health check and status
- `GET /ready` - Service readiness check
- `GET /api/registrations` - Retrieve all service registrations with metadata
- `GET /api/registrations/{service_name}` - Get detailed information about specific registration
- `POST /api/registrations` - Register a new service
- `PUT /api/registrations/{service_name}/certify` - Certify a registered service
- `GET /api/system/overview` - Complete system overview with statistics
- `GET /api/analytics/registration-stats` - Registration statistics and trends

### Dashboard & Visualization
- `GET /dashboard` - Interactive registration dashboard with real-time data
- `GET /api/analytics/registration-stats` - Registration trends and analytics data

## Health & Readiness
- **Liveness:** http://127.0.0.1:8902/health
- **Readiness:** http://127.0.0.1:8902/ready
- **Timeouts:** startup_grace=60s, http_timeout=30s

## Service Integration
### ZmartBot Service Lifecycle Integration
- **Registration Database Integration**: Manages service registrations in registration_registry.db
- **Passport Service Integration**: Tracks services with passport IDs and registration status
- **Certification Service Integration**: Manages certification workflow and status
- **Master Orchestration**: Provides registration metrics to orchestration agent

### Registration Workflow Integration
- **Service Discovery**: Integrates with service discovery for new service detection
- **Port Manager Integration**: Tracks port assignments and conflicts
- **Passport Service Integration**: Manages passport ID assignments and validation
- **Certification Service Integration**: Handles certification workflow and status updates

## Visualization Dashboards
- **Registration Dashboard** (`/dashboard`): Interactive dashboard with real-time registration statistics, trends, and service management
- **Analytics Dashboard**: Registration trends and performance analytics
- **Service Management Dashboard**: Complete service registration lifecycle management

## Registration Management Features
### Core Capabilities
- **Service Registration**: Complete registration workflow from discovery to certification
- **Registration Validation**: Comprehensive validation of service requirements
- **Certification Workflow**: Automated certification process with status tracking
- **Event Tracking**: Complete audit trail of all registration events
- **Analytics & Reporting**: Real-time analytics and performance metrics
- **Dashboard Management**: Interactive dashboards for registration management

### Registration Workflow
- **Service Discovery**: Automatic detection of new services
- **Registration Validation**: Validation of service requirements and dependencies
- **Port Assignment**: Integration with Port Manager for port assignments
- **Passport Assignment**: Integration with Passport Service for ID assignment
- **Certification Process**: Automated certification workflow
- **Status Tracking**: Complete status tracking throughout the process

## Security & Performance
### Security Measures
- **CORS Enabled**: Cross-origin resource sharing for dashboard access
- **Input Validation**: Comprehensive validation of registration data
- **Audit Logging**: Complete audit trail of all operations
- **Error Handling**: Comprehensive error logging and graceful degradation

### Performance Optimization
- **Database Optimization**: Efficient database operations and indexing
- **Background Processing**: Non-blocking operations for continuous monitoring
- **Memory Management**: Optimized for minimal resource usage
- **Caching Strategy**: Intelligent caching of frequently accessed data

## Service Registration Status
### Current Status (as of 2025-08-29)
- ‚ùå **Discovery Level**: Not registered in discovery_registry.db
- ‚ùå **Passport Level**: Not registered in passport_registry.db
- ‚ùå **Registration Level**: Not registered in service_registry.db
- ‚ùå **Port Assignment**: Not officially assigned in port_registry.db
- ‚ùå **Certification**: Not certified through ZmartBot workflow

### Required Actions for Certification
1. **Discovery Registration**: Register in Level 1 discovery database
2. **Port Manager Assignment**: Official port 8902 assignment through Port Manager
3. **Passport Assignment**: Obtain Level 2 passport through Passport Service
4. **NewService Workflow**: Complete Level 3 registration workflow
5. **Master Orchestration Integration**: Add to orchestration agent management

## Operational Metrics
- **Services Managed**: 50+ active service registrations
- **Registration Frequency**: Real-time registration processing
- **Health Check Interval**: Continuous
- **Average Response Time**: <100ms
- **Memory Usage**: <100MB
- **CPU Usage**: <5%
- **Uptime Target**: 99.9%

## Development & Maintenance
### File Structure
```
registration-service/
‚îú‚îÄ‚îÄ registration_service.py              # Main service implementation
‚îú‚îÄ‚îÄ registration_service.mdc             # This MDC file
‚îú‚îÄ‚îÄ service.yaml                         # Service configuration
‚îú‚îÄ‚îÄ README.md                            # Documentation
‚îú‚îÄ‚îÄ data/registration_registry.db        # Registration database
‚îú‚îÄ‚îÄ registration_service.log             # Service logs
‚îî‚îÄ‚îÄ start_registration_service.sh        # Startup script
```

### Development Guidelines
- **Code Quality**: Comprehensive error handling and logging
- **Testing**: Health check endpoints and API validation
- **Documentation**: Complete API documentation and usage examples
- **Monitoring**: Real-time performance and health metrics
- **Scalability**: Designed for 100+ service registration management

## Integration Dependencies
- **FastAPI**: RESTful API framework
- **SQLite3**: Local database operations
- **Chart.js**: Dashboard visualizations
- **Uvicorn**: ASGI server implementation
- **Psutil**: System resource monitoring

## Certification Compliance
This service is designed to comply with ZmartBot Master Orchestration Agent requirements:
- ‚úÖ **Service Definition**: .py file + MDC file exists
- ‚ùå **Port Assignment**: Requires Port Manager assignment
- ‚ùå **Passport Integration**: Requires Passport Service integration
- ‚ùå **Registration Process**: Requires completion of NewService workflow
- ‚ùå **Orchestration Integration**: Requires Master Orchestration Agent inclusion

## ü§ñ MCP (Model Context Protocol) Integration

### **MCP Server Pairing**
**Status**: ‚úÖ **ACTIVE** - Registration Service MCP Integration  
**MCP Servers**: `claude-code`, `byterover`, `ui-tars`, `supabase`  
**Configuration**: `/Users/dansidanutz/.cursor/mcp.json`  
**Integration Type**: Multi-MCP Service Integration  

### **MCP Integration Features**
- **Claude Code Integration**: AI-powered service registration and validation
- **Memory Gateway**: Persistent storage for service registration data
- **UI Automation**: Automated service testing and validation
- **Supabase Integration**: Database operations for service management
- **Service Discovery**: Enhanced service discovery with MCP integration

### **MCP Pairing Benefits**
- **AI-Powered Registration**: Enhanced service registration with Claude Code
- **Persistent Storage**: Reliable service data storage with ByteRover
- **Automated Testing**: UI automation for service validation
- **Database Integration**: Seamless Supabase database operations
- **Enhanced Discovery**: Improved service discovery capabilities

### **MCP Usage Examples**
```bash
# Register new service via MCP
curl -X POST http://127.0.0.1:8902/api/registrations \
  -H "Content-Type: application/json" \
  -d '{"serviceName": "new-service", "port": 8080, "type": "api"}'

# Store service registration in memory gateway
curl -X POST http://127.0.0.1:8295/memory/store \
  -H "Content-Type: application/json" \
  -d '{"key": "service-registry", "data": {"services": [...], "lastUpdate": "..."}}'
```

### **MCP Integration Status**
- **Claude Code**: ‚úÖ Active for service validation
- **Memory Gateway**: ‚úÖ Service data persistence active
- **UI Automation**: ‚úÖ Service testing automation ready
- **Supabase**: ‚úÖ Database operations operational
- **Service Discovery**: ‚úÖ Enhanced discovery capabilities

## Notes
- Service designed to run on port 8902
- Registration database will contain service registration entries
- Complete API documentation available via FastAPI auto-docs
- Dashboard accessible via browser at /dashboard endpoint
- Integration with existing ZmartBot services for complete workflow management
description:
globs:
alwaysApply: true
---
