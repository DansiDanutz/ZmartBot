@agent: IndicatorEngine

# Indicator Card - Technical Analysis Display System

## Overview
**Indicator Cards** are the **visual representation** of technical analysis data in the ZmartBot platform. Each card displays real-time technical indicators with color-coded signals, update functions, and market sentiment analysis that contribute to the overall **Win Rate Ratio** calculation.

## Indicator Card Structure

### **Card Layout**
```javascript
const IndicatorCard = {
    symbol: "BTCUSDT",
    timeframe: "1h",
    current_price: 43250.50,
    price_change: 2.45,
    
    // 21 Technical Indicators
    indicators: {
        rsi: { value: 65.4, signal: "NEUTRAL", color: "grey" },
        macd: { value: 125.5, signal: "BULLISH", color: "green" },
        bollinger: { value: "UPPER_BAND", signal: "OVERBOUGHT", color: "red" },
        // ... all 21 indicators
    },
    
    // Market Sentiment
    market_sentiment: {
        overall: "BULLISH",
        strength: 75,
        confidence: 0.85
    },
    
    // Win Rate Ratio
    win_rate_ratio: {
        long: 0.68,
        short: 0.32,
        recommendation: "LONG",
        confidence: 0.78
    }
};
```

## Individual Indicator Cards

### **1. RSI (Relative Strength Index) Card**

#### **Purpose**
- **Momentum Analysis**: Measures speed and magnitude of price changes
- **Overbought/Oversold Detection**: Identifies potential reversal points
- **Trend Confirmation**: Validates trend strength and direction

#### **Update Function**
```javascript
const updateRSICard = (rsiValue) => {
    const card = document.getElementById('rsi-card');
    
    // Update value
    card.querySelector('.value').textContent = rsiValue.toFixed(2);
    
    // Color coding
    if (rsiValue > 70) {
        card.className = 'indicator-card overbought';
        card.querySelector('.signal').textContent = 'OVERBOUGHT';
    } else if (rsiValue < 30) {
        card.className = 'indicator-card oversold';
        card.querySelector('.signal').textContent = 'OVERSOLD';
    } else {
        card.className = 'indicator-card neutral';
        card.querySelector('.signal').textContent = 'NEUTRAL';
    }
    
    // Update sentiment contribution
    updateMarketSentiment('rsi', rsiValue);
};
```

#### **Color-Coded Explanation**
- **ðŸ”´ Red (Overbought)**: RSI > 70 - Potential reversal, bearish signal
- **âš« Grey (Neutral)**: RSI 30-70 - No clear signal, trend continuation
- **ðŸŸ¢ Green (Oversold)**: RSI < 30 - Potential reversal, bullish signal

#### **Market Sentiment Importance**
- **Weight**: 8% of total sentiment calculation
- **Contribution**: High RSI = bearish sentiment, Low RSI = bullish sentiment
- **Win Rate Impact**: Oversold conditions show 65% win rate for long positions

### **2. MACD (Moving Average Convergence Divergence) Card**

#### **Purpose**
- **Trend Direction**: Identifies trend changes and momentum shifts
- **Signal Generation**: Provides buy/sell signals through crossovers
- **Divergence Detection**: Identifies potential trend reversals

#### **Update Function**
```javascript
const updateMACDCard = (macdData) => {
    const card = document.getElementById('macd-card');
    
    // Update values
    card.querySelector('.macd-line').textContent = macdData.macd.toFixed(2);
    card.querySelector('.signal-line').textContent = macdData.signal.toFixed(2);
    card.querySelector('.histogram').textContent = macdData.histogram.toFixed(2);
    
    // Color coding based on crossover
    if (macdData.macd > macdData.signal) {
        card.className = 'indicator-card bullish';
        card.querySelector('.signal').textContent = 'BULLISH CROSS';
    } else {
        card.className = 'indicator-card bearish';
        card.querySelector('.signal').textContent = 'BEARISH CROSS';
    }
    
    // Update sentiment
    updateMarketSentiment('macd', macdData);
};
```

#### **Color-Coded Explanation**
- **ðŸŸ¢ Green (Bullish)**: MACD > Signal Line - Upward momentum
- **ðŸ”´ Red (Bearish)**: MACD < Signal Line - Downward momentum
- **âš« Grey (Neutral)**: MACD â‰ˆ Signal Line - Sideways movement

#### **Market Sentiment Importance**
- **Weight**: 12% of total sentiment calculation
- **Contribution**: Bullish cross = strong bullish sentiment
- **Win Rate Impact**: Bullish crosses show 72% win rate for long positions

### **3. Bollinger Bands Card**

#### **Purpose**
- **Volatility Analysis**: Measures market volatility and price ranges
- **Breakout Detection**: Identifies potential breakout opportunities
- **Mean Reversion**: Indicates overbought/oversold conditions

#### **Update Function**
```javascript
const updateBollingerCard = (bbData, currentPrice) => {
    const card = document.getElementById('bollinger-card');
    
    // Update values
    card.querySelector('.upper').textContent = bbData.upper.toFixed(2);
    card.querySelector('.middle').textContent = bbData.middle.toFixed(2);
    card.querySelector('.lower').textContent = bbData.lower.toFixed(2);
    
    // Color coding based on price position
    if (currentPrice > bbData.upper) {
        card.className = 'indicator-card breakout-up';
        card.querySelector('.signal').textContent = 'BREAKOUT UP';
    } else if (currentPrice < bbData.lower) {
        card.className = 'indicator-card breakout-down';
        card.querySelector('.signal').textContent = 'BREAKOUT DOWN';
    } else {
        card.className = 'indicator-card squeeze';
        card.querySelector('.signal').textContent = 'SQUEEZE';
    }
    
    // Update sentiment
    updateMarketSentiment('bollinger', bbData, currentPrice);
};
```

#### **Color-Coded Explanation**
- **ðŸ”´ Red (Breakout Up)**: Price > Upper Band - Potential reversal
- **ðŸŸ¢ Green (Breakout Down)**: Price < Lower Band - Potential reversal
- **âš« Grey (Squeeze)**: Price between bands - Low volatility

#### **Market Sentiment Importance**
- **Weight**: 10% of total sentiment calculation
- **Contribution**: Breakouts indicate strong momentum sentiment
- **Win Rate Impact**: Breakout signals show 68% win rate for trend following

### **4. EMA (Exponential Moving Average) Card**

#### **Purpose**
- **Trend Identification**: Shows current trend direction
- **Support/Resistance**: Provides dynamic support and resistance levels
- **Crossover Signals**: Golden cross and death cross detection

#### **Update Function**
```javascript
const updateEMACard = (emaData, currentPrice) => {
    const card = document.getElementById('ema-card');
    
    // Update values
    card.querySelector('.ema-12').textContent = emaData.ema_12.toFixed(2);
    card.querySelector('.ema-26').textContent = emaData.ema_26.toFixed(2);
    
    // Color coding based on crossovers
    if (emaData.ema_12 > emaData.ema_26) {
        card.className = 'indicator-card golden-cross';
        card.querySelector('.signal').textContent = 'GOLDEN CROSS';
    } else {
        card.className = 'indicator-card death-cross';
        card.querySelector('.signal').textContent = 'DEATH CROSS';
    }
    
    // Update sentiment
    updateMarketSentiment('ema', emaData, currentPrice);
};
```

#### **Color-Coded Explanation**
- **ðŸŸ¢ Green (Golden Cross)**: EMA12 > EMA26 - Bullish trend
- **ðŸ”´ Red (Death Cross)**: EMA12 < EMA26 - Bearish trend
- **âš« Grey (Sideways)**: EMA12 â‰ˆ EMA26 - No clear trend

#### **Market Sentiment Importance**
- **Weight**: 9% of total sentiment calculation
- **Contribution**: Golden cross = strong bullish sentiment
- **Win Rate Impact**: Golden crosses show 70% win rate for long positions

### **5. Volume Analysis Card**

#### **Purpose**
- **Volume Confirmation**: Validates price movements with volume
- **Divergence Detection**: Identifies price-volume divergences
- **Market Participation**: Measures market interest and participation

#### **Update Function**
```javascript
const updateVolumeCard = (volumeData) => {
    const card = document.getElementById('volume-card');
    
    // Update values
    card.querySelector('.current-volume').textContent = volumeData.current;
    card.querySelector('.avg-volume').textContent = volumeData.average;
    card.querySelector('.volume-ratio').textContent = volumeData.ratio.toFixed(2);
    
    // Color coding based on volume spike
    if (volumeData.ratio > 1.5) {
        card.className = 'indicator-card volume-spike';
        card.querySelector('.signal').textContent = 'VOLUME SPIKE';
    } else if (volumeData.ratio < 0.5) {
        card.className = 'indicator-card volume-drop';
        card.querySelector('.signal').textContent = 'VOLUME DROP';
    } else {
        card.className = 'indicator-card volume-normal';
        card.querySelector('.signal').textContent = 'NORMAL VOLUME';
    }
    
    // Update sentiment
    updateMarketSentiment('volume', volumeData);
};
```

#### **Color-Coded Explanation**
- **ðŸŸ¢ Green (Volume Spike)**: Volume > 150% average - Strong participation
- **ðŸ”´ Red (Volume Drop)**: Volume < 50% average - Weak participation
- **âš« Grey (Normal)**: Volume 50-150% average - Standard participation

#### **Market Sentiment Importance**
- **Weight**: 7% of total sentiment calculation
- **Contribution**: High volume = strong sentiment confirmation
- **Win Rate Impact**: Volume spikes show 73% win rate for momentum trades

## Market Sentiment Calculation

### **Overall Sentiment Algorithm**
```javascript
const calculateMarketSentiment = (indicators) => {
    let totalSentiment = 0;
    let totalWeight = 0;
    
    // RSI Contribution (8%)
    const rsiSentiment = indicators.rsi > 50 ? 1 : -1;
    totalSentiment += rsiSentiment * 0.08;
    totalWeight += 0.08;
    
    // MACD Contribution (12%)
    const macdSentiment = indicators.macd > indicators.macd_signal ? 1 : -1;
    totalSentiment += macdSentiment * 0.12;
    totalWeight += 0.12;
    
    // Bollinger Bands Contribution (10%)
    const bbSentiment = calculateBBSentiment(indicators.bollinger, indicators.price);
    totalSentiment += bbSentiment * 0.10;
    totalWeight += 0.10;
    
    // EMA Contribution (9%)
    const emaSentiment = indicators.ema_12 > indicators.ema_26 ? 1 : -1;
    totalSentiment += emaSentiment * 0.09;
    totalWeight += 0.09;
    
    // Volume Contribution (7%)
    const volumeSentiment = indicators.volume_ratio > 1 ? 1 : -1;
    totalSentiment += volumeSentiment * 0.07;
    totalWeight += 0.07;
    
    // ... continue for all 21 indicators
    
    const overallSentiment = totalSentiment / totalWeight;
    
    return {
        sentiment: overallSentiment > 0 ? 'BULLISH' : 'BEARISH',
        strength: Math.abs(overallSentiment) * 100,
        confidence: calculateConfidence(indicators)
    };
};
```

### **Sentiment Color Coding**
- **ðŸŸ¢ Green (Bullish)**: Sentiment > 0.3 - Strong bullish sentiment
- **âš« Grey (Neutral)**: Sentiment -0.3 to 0.3 - Mixed sentiment
- **ðŸ”´ Red (Bearish)**: Sentiment < -0.3 - Strong bearish sentiment

## Win Rate Ratio Calculation

### **Win Rate Algorithm**
```javascript
const calculateWinRateRatio = (indicators, historicalData) => {
    let longSignals = 0;
    let shortSignals = 0;
    let longWins = 0;
    let shortWins = 0;
    
    // Analyze historical performance for each indicator
    indicators.forEach(indicator => {
        const historicalPerformance = analyzeHistoricalPerformance(indicator, historicalData);
        
        if (indicator.signal === 'BULLISH') {
            longSignals += indicator.weight;
            longWins += historicalPerformance.longWinRate * indicator.weight;
        } else if (indicator.signal === 'BEARISH') {
            shortSignals += indicator.weight;
            shortWins += historicalPerformance.shortWinRate * indicator.weight;
        }
    });
    
    const longWinRate = longSignals > 0 ? longWins / longSignals : 0;
    const shortWinRate = shortSignals > 0 ? shortWins / shortSignals : 0;
    
    return {
        long: longWinRate,
        short: shortWinRate,
        recommendation: longWinRate > shortWinRate ? 'LONG' : 'SHORT',
        confidence: Math.max(longWinRate, shortWinRate)
    };
};
```

### **Win Rate Color Coding**
- **ðŸŸ¢ Green (High Win Rate)**: Win Rate > 70% - Strong recommendation
- **âš« Grey (Medium Win Rate)**: Win Rate 50-70% - Moderate recommendation
- **ðŸ”´ Red (Low Win Rate)**: Win Rate < 50% - Weak recommendation

## Real-time Update System

### **Update Frequency**
```javascript
const updateIndicatorCards = async () => {
    // Update every 15 seconds for real-time data
    setInterval(async () => {
        const symbols = getActiveSymbols();
        
        for (const symbol of symbols) {
            // Fetch latest indicator data
            const indicators = await fetchLatestIndicators(symbol);
            
            // Update each indicator card
            updateRSICard(indicators.rsi);
            updateMACDCard(indicators.macd);
            updateBollingerCard(indicators.bollinger, indicators.price);
            updateEMACard(indicators.ema, indicators.price);
            updateVolumeCard(indicators.volume);
            // ... update all 21 indicators
            
            // Recalculate market sentiment
            const sentiment = calculateMarketSentiment(indicators);
            updateSentimentDisplay(sentiment);
            
            // Recalculate win rate ratio
            const winRate = calculateWinRateRatio(indicators, historicalData);
            updateWinRateDisplay(winRate);
        }
    }, 15000); // 15 seconds
};
```

## Success Criteria

### **Visual Performance**
- âœ… **Real-time updates** every 15 seconds
- âœ… **Color-coded signals** for instant recognition
- âœ… **Responsive design** for all screen sizes
- âœ… **Smooth animations** for state changes

### **Data Accuracy**
- âœ… **Accurate calculations** for all 21 indicators
- âœ… **Real-time data** from exchange APIs
- âœ… **Historical consistency** maintained
- âœ… **Cross-verification** with multiple sources

### **User Experience**
- âœ… **Intuitive color coding** for quick decision making
- âœ… **Clear signal identification** for each indicator
- âœ… **Market sentiment summary** for overall direction
- âœ… **Win rate recommendations** for trading decisions

The Indicator Card system provides **comprehensive visual feedback** for all technical analysis, enabling traders to make informed decisions based on real-time data, color-coded signals, and calculated win rate ratios.
description:
globs:
alwaysApply: false
---