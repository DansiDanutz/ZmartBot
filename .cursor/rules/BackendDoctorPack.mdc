# BackendDoctorPack.mdc

## Overview
BackendDoctorPack is a comprehensive health monitoring and diagnostics tool designed specifically for the ZmartBot backend system. It provides automated health checks, issue detection, automatic fixes, and continuous monitoring to prevent future problems and ensure system reliability.

## BackendDoctorAgent
The **BackendDoctorAgent** is the intelligent monitoring agent that ensures ZmartBot's Backend API, Dashboard, and Orchestration Agent remain healthy and reliable. It provides continuous monitoring, diagnostics, and auto-recovery for port conflicts, process failures, and endpoint downtime.

## Core Components

### BackendDoctorPack Class
- **Location**: `zmart-api/src/utils/backend_doctor_pack.py`
- **Purpose**: Main diagnostic engine with health monitoring capabilities
- **Features**: Service health checks, automatic fixes, trend analysis

### BackendDoctorAgent
- **Role**: Intelligent monitoring agent for system health
- **Purpose**: Ensures Backend API, Dashboard, and Orchestration Agent reliability
- **Features**: Continuous monitoring, diagnostics, auto-recovery
- **Capabilities**: Port conflict resolution, process failure recovery, endpoint health monitoring

### CLI Interface
- **Location**: `zmart-api/doctor.py`
- **Purpose**: Command-line interface for easy interaction
- **Commands**: `--quick`, `--monitor`, `--summary`

### Enhanced Startup Integration
- **Location**: `zmart-api/ENHANCED_STARTUP.sh`
- **Purpose**: Integrated startup with pre/post diagnostics and monitoring

## Health Status Levels

### HEALTHY
- **Description**: All services operational and responding correctly
- **Action Required**: None
- **Indicators**: All endpoints returning 200 OK, response times < 1s

### DEGRADED
- **Description**: Some endpoints failing but service partially functional
- **Action Required**: Monitor closely, investigate failing endpoints
- **Indicators**: Some endpoints returning errors, increased response times

### UNHEALTHY
- **Description**: Service not responding or major issues detected
- **Action Required**: Investigate immediately, consider restart
- **Indicators**: Service not binding to port, endpoints timing out

### CRITICAL
- **Description**: Service completely down or unrecoverable
- **Action Required**: Restart service immediately
- **Indicators**: Process not running, port conflicts, startup failures

### UNKNOWN
- **Description**: Unable to determine service status
- **Action Required**: Manual investigation required
- **Indicators**: Health check failures, network issues

## Monitored Services

### Backend API (Port 8000)
- **Service Name**: Backend API
- **Endpoints**: `/health`, `/version`, `/status`
- **Expected Status**: 200 OK
- **Timeout**: 10 seconds
- **Health Check**: Process verification, port binding, endpoint testing

### Dashboard Server (Port 3400)
- **Service Name**: Dashboard Server
- **Endpoints**: `/`
- **Expected Status**: 200 OK
- **Timeout**: 10 seconds
- **Health Check**: Process verification, port binding, HTML response

## Diagnostic Features

### Service Health Checks
- **Process ID Verification**: Confirms service processes are running
- **Port Usage Monitoring**: Checks if ports are properly bound
- **Response Time Measurement**: Tracks endpoint response times
- **Endpoint Availability Testing**: Tests all configured endpoints

### Automatic Fixes
- **Critical Issues**: Automatic service restart for completely down services
- **Port Conflicts**: Kills conflicting processes and frees ports
- **Process Cleanup**: Removes orphaned processes
- **Auto-fix Enabled**: Default behavior for immediate problem resolution

### Health History
- **Storage**: Last 100 diagnostic results
- **Trend Analysis**: Identifies improving, stable, unstable, or deteriorating trends
- **Stability Metrics**: Calculates service stability percentages
- **Performance Tracking**: Monitors response times over time

## Monitoring Capabilities

### Continuous Monitoring
- **Configurable Intervals**: Default 60 seconds, customizable
- **Background Operation**: Runs independently without blocking
- **Log File Output**: Creates `doctor_monitor.log` for historical data
- **Real-time Alerts**: Immediate notifications for critical issues

### Profile-Aware Monitoring
**Note**: If `/profiles/current` has services, Doctor should expect those to be up; else fallback to ACTIVE set.

```python
def check_expected_services():
    """Check services based on active profile or fallback to ACTIVE set"""
    profile_path = "/profiles/current"
    
    if os.path.exists(profile_path):
        # Load profile and expect those services to be up
        with open(profile_path, 'r') as f:
            profile = json.load(f)
        expected_services = profile.get("services", [])
        logger.info(f"Expecting services from profile: {expected_services}")
    else:
        # Fallback to default ACTIVE set
        expected_services = ["backend_api", "dashboard_server", "orchestration_agent"]
        logger.info("No profile found, expecting default ACTIVE services")
    
    return expected_services

## @step: report_status_to_registry (optional)

### Purpose
Reports service health status to the Service Registry for tracking and management.

### Implementation
```python
def report_status_to_registry(service_name: str, status: str, health_data: dict = None):
    """
    Report service health status to Service Registry.
    
    Args:
        service_name: Name of the service
        status: Health status (HEALTHY, UNHEALTHY, CRITICAL)
        health_data: Additional health data
    """
    import requests
    import os
    
    registry_url = f"http://127.0.0.1:8610/services/{service_name}/status"
    headers = {"Content-Type": "application/json"}
    
    # Add token if available
    token = os.getenv("REGISTRY_TOKEN")
    if token:
        headers["X-Token"] = token
    
    # Map health status to registry status
    status_mapping = {
        "HEALTHY": "TESTED",
        "UNHEALTHY": "DISCOVERED",
        "CRITICAL": "DISABLED"
    }
    
    registry_status = status_mapping.get(status, "DISCOVERED")
    
    payload = {
        "status": registry_status,
        "notes": f"Health check: {status}. Response time: {health_data.get('response_time', 'N/A')}ms" if health_data else f"Health check: {status}"
    }
    
    try:
        response = requests.post(registry_url, headers=headers, json=payload, timeout=5)
        if response.status_code == 200:
            logger.debug(f"Status reported to registry for {service_name}: {status}")
        else:
            logger.warning(f"Failed to report status to registry for {service_name}: {response.status_code}")
    except Exception as e:
        logger.debug(f"Could not report status to registry for {service_name}: {e}")

def enhanced_health_check_with_registry_reporting():
    """
    Enhanced health check that reports status to Service Registry.
    """
    # Get expected services from profile
    expected_services = check_expected_services()
    
    for service_name in expected_services:
        # Perform health check
        health_result = perform_service_health_check(service_name)
        
        # Report status to registry
        if health_result["status"] == "HEALTHY":
            # First time it passes, mark as TESTED
            report_status_to_registry(service_name, "HEALTHY", health_result)
        elif health_result["status"] == "CRITICAL":
            # On repeated failures, consider disabling
            report_status_to_registry(service_name, "CRITICAL", health_result)
        
        # Log health status
        logger.info(f"Health check for {service_name}: {health_result['status']}")
```

### Health Trends
- **IMPROVING**: All recent checks show healthy status
- **STABLE**: Consistent health status over time
- **UNSTABLE**: Mixed health status indicating potential issues
- **DETERIORATING**: All recent checks show unhealthy status

## Alert System

### Automatic Alerts
- **Critical Service Failures**: Immediate notification when services go down
- **Unhealthy Service Status**: Alerts for degraded performance
- **Port Conflicts Detected**: Notifications when ports are blocked
- **Response Time Degradation**: Alerts for performance issues

### Alert Actions
- **Console Notifications**: Real-time console output for critical issues
- **Log File Entries**: Detailed logging for all alerts and actions
- **Automatic Fix Attempts**: Immediate problem resolution attempts
- **Service Restart Triggers**: Automatic restart for critical failures

## BackendDoctorAgent Commands

### Agent Activation
```bash
@agent: BackendDoctorAgent
```
- **Purpose**: Activate the BackendDoctorAgent for comprehensive health monitoring
- **Output**: Real-time system health analysis and recommendations
- **Use Case**: System health assessment and problem resolution

## CLI Commands

### Quick Health Check
```bash
python3 doctor.py --quick
```
- **Purpose**: Fast health status overview
- **Output**: Service status icons and overall health
- **Use Case**: Quick verification before operations

### Full Diagnostic Report
```bash
python3 doctor.py
```
- **Purpose**: Comprehensive system analysis
- **Output**: Detailed report with all metrics and recommendations
- **Use Case**: Deep system investigation

### Continuous Monitoring
```bash
python3 doctor.py --monitor [interval]
```
- **Purpose**: Ongoing health monitoring
- **Parameters**: Optional interval in seconds (default: 60)
- **Use Case**: Production monitoring and alerting

### Health Summary
```bash
python3 doctor.py --summary
```
- **Purpose**: Historical health data overview
- **Output**: Trend analysis and stability metrics
- **Use Case**: System health assessment

## Integration with Startup Scripts

### Enhanced Startup Process
The `ENHANCED_STARTUP.sh` script integrates BackendDoctorPack:

1. **Pre-startup Diagnostic**: Runs health check before starting services
2. **Post-startup Verification**: Confirms all services are running correctly
3. **Background Monitoring**: Starts continuous monitoring automatically
4. **Health Logging**: Creates monitoring log file for tracking

### Startup Sequence
```bash
./ENHANCED_STARTUP.sh
```
- **Step 1**: Pre-startup diagnostic
- **Step 2**: Process cleanup
- **Step 3**: Port verification
- **Step 4**: Service startup
- **Step 5**: Post-startup verification
- **Step 6**: Background monitoring activation

## Management Commands

### Start System with Monitoring
```bash
./ENHANCED_STARTUP.sh
```
- **Effect**: Complete system startup with health monitoring
- **Output**: Service status and monitoring confirmation

### Stop All Services
```bash
pkill -f 'run_dev'
pkill -f 'professional_dashboard_server'
pkill -f 'doctor.py'
```
- **Effect**: Clean shutdown of all services and monitoring
- **Use Case**: System maintenance or troubleshooting

### Health Check
```bash
python3 doctor.py --quick
```
- **Effect**: Immediate health status check
- **Use Case**: Quick verification during operations

### View Monitoring Log
```bash
tail -f doctor_monitor.log
```
- **Effect**: Real-time monitoring log viewing
- **Use Case**: Debugging and monitoring

### Service Status Summary
```bash
python3 doctor.py --summary
```
- **Effect**: Historical health data and trends
- **Use Case**: System health assessment

## Configuration

### Auto-fix Settings
- **Enabled by Default**: Automatic problem resolution active
- **Critical Restarts**: Automatic service restart for critical failures
- **Port Conflict Resolution**: Automatic port conflict resolution
- **Process Cleanup**: Automatic orphaned process removal

### Monitoring Settings
- **Default Interval**: 60 seconds between health checks
- **History Size**: 100 diagnostic results stored
- **Timeout Settings**: 10 seconds for endpoint checks
- **Log Rotation**: Automatic log file management

### Alert Thresholds
- **Critical Response Time**: > 5 seconds
- **Degraded Response Time**: > 2 seconds
- **Port Conflict Detection**: Immediate
- **Process Failure**: Immediate

## Troubleshooting

### Common Issues

#### Import Errors
```bash
# Ensure correct directory
cd /Users/dansidanutz/Desktop/ZmartBot/zmart-api

# Activate virtual environment
source venv/bin/activate
```

#### Permission Issues
```bash
# Make scripts executable
chmod +x doctor.py
chmod +x ENHANCED_STARTUP.sh
```

#### Service Not Found
```bash
# Check service processes
ps aux | grep run_dev
ps aux | grep professional_dashboard_server
```

### Manual Service Restart
```bash
# Stop services
pkill -f 'run_dev'
pkill -f 'professional_dashboard_server'

# Start services
python3 run_dev.py &
python3 professional_dashboard_server.py &
```

## Benefits

### For Developers
- **Proactive Issue Detection**: Catch problems before they affect users
- **Automated Resolution**: Reduce manual intervention and debugging time
- **Health Visibility**: Clear system status overview and metrics
- **Performance Tracking**: Monitor response times and system stability

### For Operations
- **Reduced Downtime**: Automatic problem resolution and service restart
- **System Reliability**: Continuous health monitoring and alerting
- **Easy Management**: Simple CLI interface for all operations
- **Historical Data**: Track system health and performance over time

### For Users
- **Improved Uptime**: More reliable system operation with automatic recovery
- **Faster Issue Resolution**: Automatic problem fixes and service restarts
- **Better Performance**: Monitored and optimized service performance
- **Transparent Status**: Clear health reporting and system status

## Future Enhancements

### Planned Features
- **Database Health Monitoring**: PostgreSQL, Redis, InfluxDB health checks
- **API Rate Limiting**: Monitor external API usage and limits
- **Performance Metrics**: CPU, memory, disk usage monitoring
- **Alert Notifications**: Email, Slack, Telegram integration
- **Web Dashboard**: Web-based monitoring interface
- **Configuration Management**: Dynamic service configuration updates

### Extensibility
- **Custom Health Checks**: Add new service monitors and endpoints
- **Plugin System**: Third-party health check plugin support
- **API Integration**: REST API for external monitoring systems
- **Metrics Export**: Prometheus, Grafana integration for advanced monitoring

## File Locations

### Core Files
- **Main Package**: `zmart-api/src/utils/backend_doctor_pack.py`
- **CLI Interface**: `zmart-api/doctor.py`
- **Enhanced Startup**: `zmart-api/ENHANCED_STARTUP.sh`
- **Documentation**: `zmart-api/BACKENDDOCTORPACK_README.md`

### Log Files
- **Monitoring Log**: `zmart-api/doctor_monitor.log`
- **System Logs**: Console output and Python logging
- **Error Logs**: Exception handling and error reporting

## BackendDoctorAgent Integration

### Agent Responsibilities
- **Real-time Monitoring**: Continuous health monitoring of all system components
- **Intelligent Diagnostics**: Advanced problem detection and analysis
- **Auto-Recovery**: Automatic problem resolution and service restoration
- **Health Reporting**: Comprehensive health status reports and recommendations

### Agent Capabilities
- **Service Health Monitoring**: Backend API, Dashboard, Orchestration Agent
- **Port Conflict Resolution**: Automatic detection and resolution of port conflicts
- **Process Failure Recovery**: Automatic restart of failed services
- **Endpoint Health Testing**: Continuous testing of all service endpoints
- **Performance Tracking**: Response time monitoring and trend analysis

## Integration Rules

### Startup Integration
- BackendDoctorPack runs pre-startup diagnostics before service initialization
- Post-startup verification confirms all services are operational
- Background monitoring starts automatically after successful startup
- Health logging provides historical data for system analysis

### Service Management
- Automatic service restart for critical failures
- Port conflict resolution prevents startup issues
- Process cleanup removes orphaned processes
- Health monitoring provides real-time system status

### Alert Integration
- Console notifications for immediate visibility
- Log file entries for historical tracking
- Automatic fix attempts for common issues
- Service restart triggers for critical failures

## BackendDoctorAgent Operational Guidelines

### Agent Usage
- **Activation**: Use `@agent: BackendDoctorAgent` to activate comprehensive monitoring
- **Health Reports**: Agent provides real-time health status and recommendations
- **Auto-Recovery**: Agent automatically resolves common issues and restarts services
- **Monitoring**: Agent continuously monitors system health and performance

### Agent Commands
- **Health Check**: Agent performs comprehensive system health analysis
- **Diagnostic Report**: Agent provides detailed diagnostic reports with recommendations
- **Auto-Fix**: Agent automatically resolves detected issues
- **Status Summary**: Agent provides health trend analysis and stability metrics

## Operational Guidelines

### Daily Operations
- Use `@agent: BackendDoctorAgent` for comprehensive health monitoring
- Use `python3 doctor.py --quick` for routine health checks
- Monitor `doctor_monitor.log` for ongoing system health
- Use `python3 doctor.py --summary` for health trend analysis
- Respond to alerts and critical notifications immediately

### Maintenance Procedures
- Use `./ENHANCED_STARTUP.sh` for system restarts
- Review health history before major changes
- Monitor trends for proactive maintenance
- Use diagnostic reports for troubleshooting

### Emergency Procedures
- Use `python3 doctor.py` for immediate system analysis
- Check `doctor_monitor.log` for recent issues
- Use automatic fixes for common problems
- Manual intervention for complex issues

---

**BackendDoctorPack and BackendDoctorAgent ensure ZmartBot system reliability through comprehensive health monitoring, intelligent diagnostics, automatic problem resolution, and continuous system protection. The BackendDoctorAgent provides real-time monitoring and auto-recovery capabilities for optimal system performance.**

## @step: report_status_to_registry (optional)
- When a service becomes healthy for the first time → POST /services/{name}/status {"status":"TESTED"}.
- On repeated failures beyond policy → optionally set "DISABLED" and log event.

@step: monitor_state_snapshots
- Monitor state snapshot creation and loading processes
- Verify cached data availability during startup
- Ensure smooth transition from cached to live data
- Report any snapshot-related issues to system logs
description:
globs:
alwaysApply: false
---
# Test update Sun Aug 24 01:22:52 EEST 2025
