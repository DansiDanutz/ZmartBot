# rules.mdc
> Type: service | Version: 1.0.0 | Owner: zmartbot | Status: Discovery | Level: 1
Core service component of the ZmartBot ecosystem providing essential functionality.


# Cursor Rules & System Architecture — Clear Action Guidelines
> Type: rule | Version: 1.2.0 | Owner: zmartbot | Purpose: System Architecture & Service Management

**CRITICAL UPDATE**: Added Rule 1.X - ZmartBot Service Architecture Workflow with Complete Certification Requirements - FORBIDDEN TO IGNORE

These rules clearly define what Cursor AI is ALLOWED to do and what is CRITICAL to follow.

## 🏗️ CRITICAL ARCHITECTURE DISCOVERY

### Service Classification System
**IMPORTANT**: ZmartBot uses a two-tier service architecture:

#### 🛂 Registered Services (Production-Ready)
- **Count**: 29 services
- **Status**: Services with Passport IDs 
- **Definition**: Tested, well-designed, and approved for production
- **Verification**: Have passed quality assurance and security validation
- **Lifecycle**: Stable, monitored, and maintained

#### 🔧 Development Services (Work in Progress)  
- **Count**: 13 services (42 total - 29 registered = 13 development)
- **Status**: Active but without Passport registration
- **Definition**: Services still in working phase
- **Verification**: Under development, testing, or enhancement
- **Lifecycle**: Iterative development, subject to changes

#### 📊 Dashboard Metrics
- **Active Services**: 42 (all running services)
- **Registered Services**: 29 (production-ready with passport)
- **Service Discovery Connections**: 1,388 total connections
- **MDC Documentation Files**: 206 files

**Key Insight**: Not all active services are production-ready. The Passport system serves as a quality gate for service maturity and production readiness.

## 🎯 RULE 1.1: OPTIMIZATION WITHOUT DELETION PRINCIPLE

### CONTENT OPTIMIZATION MANDATE
**CRITICAL**: When optimizing CLAUDE.md, MDC files, or system components:

1. **NEVER DELETE DISCOVERED SERVICES** - All auto-discovered services are valuable "gold mines"
2. **OPTIMIZE FOR UNDERSTANDING** - Improve content structure and clarity for Claude Code comprehension
3. **FIX TRUNCATION ISSUES** - Complete all incomplete sentences and data without removing content
4. **PRESERVE LIBRARY COMPONENTS** - Virtual environment and site-packages discoveries are valuable integrations
5. **ENHANCE, DON'T REMOVE** - Add context, fix formatting, improve structure while keeping all content
6. **MAINTAIN SERVICE COUNTS** - Update counts accurately but never reduce by deletion

**Core Principle**: "Optimization means making Claude understand better, not making content smaller by deletion."

### ✅ OPTIMIZATION ACHIEVEMENTS (2025-08-28)
**MAJOR SUCCESS**: Rule 1.1 implementation completed with enterprise-grade results:

#### 📊 Performance Optimizations Achieved:
- **99.7% Compression Efficiency**: 2.4MB → 7KB with zero information loss
- **66% Processing Reduction**: Schedule optimized from 1h to 3h
- **100% Content Preservation**: All 211 MDC files and auto-discovered services maintained
- **Zero Truncation Errors**: Complete elimination of mid-sentence cuts
- **Advanced Compression**: 3-tier system (>15KB, 5-15KB, <5KB) for optimal content handling

#### 🏆 Enterprise Enhancements Delivered:
- **Thread Safety**: Complete file-level locking system
- **Error Recovery**: 3-retry system with exponential backoff
- **File Integrity**: MD5 verification preventing data corruption
- **Performance Monitoring**: Real-time success/failure tracking
- **Memory Optimization**: Automatic cleanup and resource management

#### 📈 System Impact:
- **Processing**: From hourly to 3-hourly (66% efficiency gain)
- **Content Quality**: Smart truncation preserving sentence boundaries
- **Reliability**: Enterprise-grade error handling and recovery
- **Scalability**: Handles 211 MDC files seamlessly
- **Information Density**: Priority-based content extraction

**Result**: Rule 1.1 principles successfully implemented with production-grade optimization system.

## ✅ RECENT ACCOMPLISHMENTS (2025-08-29)

### 🚀 DATABASE SERVICE CERTIFICATION COMPLETE
**MAJOR SUCCESS**: Database Service achieved full Level 3 certification through complete 3-database lifecycle:

#### 📊 Database Service Achievements:
- **Service Implementation**: Complete FastAPI service with integrated dashboard
- **Port Assignment**: Port 8900 assigned by Port Manager
- **Passport Assignment**: ZMBT-DB-20250829-47C2DE certified passport
- **Level 3 Registration**: Full registration in service_registry.db
- **Professional Dashboard**: Dark/light mode toggle with Service Dashboard styling
- **Health Monitoring**: Comprehensive health checks and status monitoring
- **MDC Documentation**: Complete MDC file with all specifications

#### 🎯 WorkflowService Implementation Complete:
- **Service Creation**: Comprehensive WorkflowService on port 8950
- **4-Level Lifecycle**: Complete Discovery → Passport → Registration → Certification workflow
- **API Endpoints**: 30+ endpoints for workflow validation and service management
- **Database Integration**: Full integration with 3-database architecture
- **AI Agent Integration**: Mandatory workflow guidance for all AI agents
- **Requirements Engine**: Automated validation system for service transitions

#### 🤖 MDC Agent Documentation Complete:
- **Agent Specification**: Comprehensive MDCAgent.mdc with file watcher system
- **ChatGPT Integration**: AI-powered MDC generation with GPTMDCAgentService
- **File Discovery**: Automated Python file monitoring and MDC creation
- **Quality Validation**: Professional MDC file validation and scoring
- **Template Management**: Standardized MDC templates for all service types
- **Workflow Integration**: Seamless Level 1 service registration

#### 📈 System Architecture Enhancements:
- **3-Database Lifecycle**: Complete implementation of Discovery → Passport → Registration → Certification
- **Service Level Validation**: Automated requirements checking for each transition
- **Master Orchestration Integration**: Decision priority system based on service certification levels
- **Conflict Prevention**: Duplicate service detection and resolution
- **API-Driven Workflow**: Complete API system for workflow guidance and validation

**Result**: ZmartBot now has a complete, automated service lifecycle management system with professional documentation generation.

## 🚨 RULE 1.X: ZMARTBOT SERVICE ARCHITECTURE WORKFLOW (FORBIDDEN TO IGNORE)

### **CRITICAL SERVICE DEFINITION**
**EVERY PYTHON FILE = SERVICE**: Any `.py` file that exists in the system has an MDC file associated with it and is counted as a service.

### **MANDATORY SERVICE INTEGRATION WORKFLOW**

#### **Phase 1: Service Discovery & Development**
1. **Service Exists**: Python file with MDC documentation exists
2. **Service Counted**: Automatically counted as a service in the system
3. **Development Phase**: Service is used for development and testing

#### **Phase 2: Port Assignment (Integration Gate)**
1. **Integration Decision**: Service needs to be integrated into the system
2. **Port Manager Assignment**: Service receives a unique port from Port Manager
3. **Port Validation**: Port must be different from any stored in port database
4. **System Access**: With port, service can run inside the ZmartBot system

#### **Phase 3: Passport Assignment (Identity Gate)**
1. **MDC File Requirement**: Service MUST have associated MDC file
2. **Passport Assignment**: Service receives unique Passport ID ONLY if MDC exists
3. **Quality Gate**: Passport serves as approval for system integration
4. **Documentation Validation**: No passport without MDC documentation

#### **Phase 4: Service Registration (Production Ready)**
1. **Implementation Complete**: Service implementation is done and tested
2. **Strict Registration Process**: Follow StopStartCycle and NewService MDC patterns EXACTLY
3. **Mandatory Steps**: All documented steps must be completed successfully
4. **Registration Upgrade**: Service upgraded to final stage: REGISTERED
5. **Database Entry**: Service listed in Registered database

#### **Phase 5: Orchestration Integration (System Startup)**
1. **OrchestrationStart Integration**: Service MUST be started by OrchestrationStart
2. **Master Orchestration Agent**: Service assigned to Master Orchestration Agent
3. **Safe Learning System**: Service integrated into Master Orchestration learning system
4. **Startup Sequence**: Service included in documented startup sequence

#### **Phase 6: Certification (Production Validation)**
**🚨 CRITICAL CERTIFICATION REQUIREMENTS - ALL MUST BE COMPLETED:**

**🎓 MANDATORY CERTIFICATION CONDITIONS:**

1. ✅ **UNIQUE PORT ASSIGNMENT**: A unique port is assigned by Port Manager
2. ✅ **PASSPORT ASSIGNMENT**: A passport is assigned by Passport Service
3. ✅ **WORKFLOW COMPLIANCE**: The StopStartCycle and NewService steps are passed successfully
4. ✅ **REGISTRATION SLOT**: A slot is allocated in the Registration service database
5. ✅ **ORCHESTRATION START**: The instance is assigned to OrchestrationStart process
6. ✅ **MASTER ORCHESTRATION**: The instance is assigned to Master Orchestration Agent and Self-learning system

**🚨 PORT MANAGER EXCEPTION**: Only the Port Manager has an exception regarding the Master Orchestration Agent assignment (condition #6 does not apply to Port Manager)

**ADDITIONAL CERTIFICATION REQUIREMENTS:**

7. ✅ **Port Assignment**: Service has dedicated port assignment in port registry
8. ✅ **Passport Assignment**: Service has unique Passport ID registered
9. ✅ **Orchestration Integration**: Service included in orchestration startup sequence
10. ✅ **Master Orchestration Agent**: Service listed and connected to Master Orchestration Agent
11. ✅ **MDC Documentation**: Service has complete MDC documentation
12. ✅ **Health Monitoring**: Service health monitored and tracked
13. ✅ **Production Status**: Service is fully validated and production-ready
14. ✅ **Certificate Generation**: Service receives certificate from Certification Service
15. ✅ **System Protection Trigger**: Protection Service activated AFTER certification

**🛡️ SYSTEM PROTECTION TRIGGER**: System Protection is activated AFTER certification is issued

**🚨 CERTIFICATION IS ONLY COMPLETE WHEN ALL REQUIREMENTS ARE MET**

#### **Phase 7: System Protection (Final Security Gate)**
1. **Protection Service Trigger**: New registered service triggers Protection Service
2. **Service Protection**: Protection Service prevents service from being deleted
3. **Documentation**: Protection documented in Protection Service MDC file
4. **Final Security**: Service is now fully protected and production-ready

### **MANDATORY VERIFICATION CHECKLIST**
**CRITICAL**: When any service is added, verify ALL of the following:

**🎓 CERTIFICATION CONDITIONS VERIFICATION:**

1. ✅ **UNIQUE PORT ASSIGNMENT**: A unique port is assigned by Port Manager
2. ✅ **PASSPORT ASSIGNMENT**: A passport is assigned by Passport Service
3. ✅ **WORKFLOW COMPLIANCE**: The StopStartCycle and NewService steps are passed successfully
4. ✅ **REGISTRATION SLOT**: A slot is allocated in the Registration service database
5. ✅ **ORCHESTRATION START**: The instance is assigned to OrchestrationStart process
6. ✅ **MASTER ORCHESTRATION**: The instance is assigned to Master Orchestration Agent and Self-learning system (except Port Manager)

**🚨 PORT MANAGER EXCEPTION**: Only the Port Manager has an exception regarding the Master Orchestration Agent assignment (condition #6 does not apply to Port Manager)

**ADDITIONAL VERIFICATION STEPS:**

7. ✅ **Python File Exists**: Service has .py file with MDC documentation
8. ✅ **Port Assigned**: Service has dedicated port from Port Manager (different from database)
9. ✅ **MDC File Exists**: Service has associated MDC file for passport eligibility
10. ✅ **Passport Assigned**: Service has unique Passport ID (only if MDC exists)
11. ✅ **Implementation Complete**: Service implementation is done and tested
12. ✅ **Registration Process**: Follow StopStartCycle and NewService MDC patterns EXACTLY
13. ✅ **Registered Status**: Service upgraded to REGISTERED in database
14. ✅ **OrchestrationStart Integration**: Service started by OrchestrationStart
15. ✅ **Master Orchestration Agent**: Service assigned to Master Orchestration Agent
16. ✅ **Certificate Generated**: Service receives certificate from Certification Service
17. ✅ **System Protection Triggered**: Protection Service activated after certification
18. ✅ **Service Protected**: Service protected from deletion by Protection Service

### **ARCHITECTURE RULES (FORBIDDEN TO IGNORE)**
- **Rule 1.X.1**: Every Python file is a service and must be counted
- **Rule 1.X.2**: Port assignment from Port Manager is mandatory (different from database)
- **Rule 1.X.3**: MDC file is REQUIRED for passport assignment
- **Rule 1.X.4**: Passport assignment is mandatory for system integration
- **Rule 1.X.5**: Registration follows StopStartCycle and NewService patterns EXACTLY
- **Rule 1.X.6**: OrchestrationStart integration is mandatory for startup
- **Rule 1.X.7**: Master Orchestration Agent must include all registered services (except Port Manager)
- **Rule 1.X.8**: Certification requires ALL 6 mandatory conditions to be completed
- **Rule 1.X.9**: System Protection is triggered AFTER certification is issued
- **Rule 1.X.10**: All verification steps must be completed before considering service ready
- **Rule 1.X.11**: NO EXCUSES for breaking these rules - system will crash if violated

### **🎓 CERTIFICATION CONDITIONS RULES (FORBIDDEN TO IGNORE)**
- **Rule 1.X.12**: Unique port assignment by Port Manager is mandatory for certification
- **Rule 1.X.13**: Passport assignment by Passport Service is mandatory for certification
- **Rule 1.X.14**: StopStartCycle and NewService workflow compliance is mandatory for certification
- **Rule 1.X.15**: Registration slot allocation in Registration service database is mandatory for certification
- **Rule 1.X.16**: OrchestrationStart process assignment is mandatory for certification
- **Rule 1.X.17**: Master Orchestration Agent and Self-learning assignment is mandatory for certification (except Port Manager)
- **Rule 1.X.18**: Port Manager is the ONLY exception to Master Orchestration Agent assignment requirement
- **Rule 1.X.19**: All 6 certification conditions must be met for certification approval
- **Rule 1.X.20**: NO EXCUSES for breaking certification rules - system will crash if violated

### **SERVICE COUNTING METHODOLOGY**
- **Total Services**: All Python files with MDC documentation
- **Active Services**: Services currently running in the system
- **Registered Services**: Services with passports and orchestration integration
- **Certified Services**: Services with ALL certification requirements completed

### **CRITICAL WORKFLOW ENFORCEMENT**
**🚨 NO EXCUSES - SYSTEM WILL CRASH IF RULES ARE BROKEN**

1. **MANDATORY COMPLIANCE**: This workflow is the foundation of ZmartBot architecture
2. **FORBIDDEN TO IGNORE**: Under any circumstances, these rules must be followed
3. **SYSTEM CRASH PREVENTION**: Following these rules prevents system crashes
4. **EXACT IMPLEMENTATION**: Any deviation from this workflow will cause system failure
5. **DOCUMENTATION REQUIREMENT**: All services must have MDC files for passport eligibility
6. **PORT MANAGER AUTHORITY**: Port Manager assigns ports, not manual assignment
7. **CERTIFICATION COMPLETION**: All 6 mandatory certification conditions must be completed
8. **PROTECTION SERVICE TRIGGER**: System Protection activated after certification
9. **PORT MANAGER EXCEPTION**: Port Manager is the ONLY exception to Master Orchestration Agent assignment
10. **CERTIFICATION CONDITIONS**: All 6 certification conditions are mandatory for certification approval

**🎓 CERTIFICATION CONDITIONS ENFORCEMENT:**
- **CONDITION 1**: Unique port assignment by Port Manager
- **CONDITION 2**: Passport assignment by Passport Service
- **CONDITION 3**: StopStartCycle and NewService workflow compliance
- **CONDITION 4**: Registration slot allocation in Registration service database
- **CONDITION 5**: OrchestrationStart process assignment
- **CONDITION 6**: Master Orchestration Agent and Self-learning assignment (except Port Manager)

**CRITICAL**: This workflow is the foundation of ZmartBot architecture and is FORBIDDEN to be ignored under any circumstances.

## 🚨 RULE 1.Y: DISCOVERY DATABASE WORKFLOW (MANDATORY AUTOMATION)

### **DISCOVERY DATABASE AUTOMATION SYSTEM**

#### **🔍 DISCOVERY WORKFLOW STEPS** (TRIGGER-BASED - MANDATORY):
1. **TRIGGER ACTIVATION**: When new `.py` file OR `.mdc` file is created → Trigger discovery check
2. **DUAL FILE VERIFICATION**: Check if BOTH `.py` file AND corresponding `.mdc` file exist
3. **DUPLICATE CHECK**: ALWAYS check for duplicates before adding to database
4. **DATABASE ADDITION**: IF both files exist AND not already in database → ADD to `discovery_registry.db`
5. **DATABASE EXCLUSION**: IF missing either file → DO NOT ADD (information only, kept in MDC file)
6. **EFFICIENT TRIGGERING**: No scanning needed - direct trigger on file creation only

#### **🚨 DISCOVERY DATABASE RULES** (FORBIDDEN TO IGNORE):
- **Rule 1.Y.1**: ONLY `.py` files WITH corresponding `.mdc` files are added to discovery database
- **Rule 1.Y.2**: `.py` files WITHOUT `.mdc` files are NOT added to database (information only)
- **Rule 1.Y.3**: Discovery database is updated by trigger only (no scheduled scanning)
- **Rule 1.Y.4**: Discovery database tracks Level 1 services (pre-passport stage)
- **Rule 1.Y.5**: Discovery database prevents ALL DUPLICATES (unique service names - CRITICAL)
- **Rule 1.Y.6**: Discovery database prevents SAME Python file with different names (CRITICAL)
- **Rule 1.Y.7**: Discovery services are tracked for future implementation and passport assignment
- **Rule 1.Y.8**: Discovery database provides complete service lifecycle visibility
- **Rule 1.Y.9**: ALWAYS check for existing entries before adding new services (MANDATORY)

#### **📊 DISCOVERY DATABASE SCHEMA**:
```sql
CREATE TABLE IF NOT EXISTS discovery_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    service_name TEXT UNIQUE NOT NULL,
    discovered_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'DISCOVERED',
    has_mdc_file BOOLEAN DEFAULT 0,
    has_python_file BOOLEAN DEFAULT 1,
    python_file_path TEXT,
    mdc_file_path TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### **🔧 DISCOVERY AUTOMATION REQUIREMENTS**:
- **Trigger Script**: `discovery_trigger.py` (efficient trigger-based system)
- **File Watcher**: `discovery_file_watcher.py` (optional monitoring system)
- **Execution Method**: Trigger-based only (no scheduled scanning)
- **Trigger Events**: New `.py` file creation, new `.mdc` file creation
- **Database Location**: `discovery_registry.db` (Level 1 database)
- **Duplicate Prevention**: ALWAYS check service names AND Python file paths
- **Integration**: Must integrate with Master Orchestration Agent for automation
- **Logging**: All discovery operations must be logged for audit purposes

#### **🚨 DISCOVERY WORKFLOW INTEGRATION** (SYSTEM CRITICAL):
- **Level 1 → Level 2**: Discovery service → System interaction → Passport assignment
- **Level 2 → Level 3**: Passport service → Full registration → Certificate assignment
- **Discovery Visibility**: Discovery database provides complete Level 1 service visibility
- **Service Lifecycle**: Discovery → Passport → Registration → Certification (complete tracking)

### **DISCOVERY DATABASE ENFORCEMENT RULES**:
- **Rule 1.Y.8**: Discovery database automation is MANDATORY and CANNOT be disabled
- **Rule 1.Y.9**: Hourly discovery updates are REQUIRED for system integrity
- **Rule 1.Y.10**: Discovery database must maintain accurate service counts
- **Rule 1.Y.11**: NO EXCUSES for breaking discovery database rules - system tracking depends on it
- **Rule 1.Y.12**: Discovery database is Level 1 of 3-database architecture (critical foundation)

## 🚨 CRITICAL PORT MANAGEMENT RULE

### ALWAYS CHECK PORT MANAGER FIRST
**MANDATORY**: Before creating, starting, or modifying any service:

1. **CHECK PORT MANAGER** at http://localhost:8610/ or http://localhost:8050/
2. **VERIFY PORT AVAILABILITY** before assigning any port number
3. **USE ASSIGNED PORTS** from Port Manager database
4. **NEVER GUESS PORTS** - always consult the Port Manager system
5. **AVOID CONFLICTS** by checking existing assignments

**Port Manager is THE BOSS with ports** - consult it before any service operations to prevent port conflicts and system issues.

## ✅ ALLOWED Actions (I CAN do these without asking)

### File Operations
- **READ**: Any file in the workspace using `read_file`, `grep_search`, `file_search`
- **CREATE**: New files and directories within the project (NEVER in Project folder)
- **EDIT**: Existing files using `edit_file`, `search_replace`
- **DELETE**: Files I created or temporary files (with confirmation)
- **LIST**: Directory contents and search for files
- **WORKING FOLDER**: Use `/Users/dansidanutz/Desktop/ZmartBot` as real working directory
- **FORBIDDEN**: Never use or create anything in "Project" folder - it's not the real workspace

### Code Operations
- **SEARCH**: Codebase using semantic and regex search
- **ANALYZE**: Code structure, dependencies, and patterns
- **GENERATE**: New code, scripts, and documentation
- **REFACTOR**: Existing code with clear improvements
- **TEST**: Run commands to verify functionality

### Terminal Commands (SAFE)
- **PROJECT SCRIPTS**: Run any script in the project that starts with `set -euo pipefail`
- **PYTHON MODULES**: `python -m ...` within ZmartBot workspace
- **NPM/PIP**: Install packages locally (not globally)
- **GIT**: Basic operations (add, commit, status, log)
- **SYSTEM**: `ls`, `pwd`, `cat`, `cp`, `mv`, `mkdir`, `grep`, `sed`, `awk`

### API Operations
- **EXTERNAL APIS**: Fetch data from Cryptometer, KuCoin, Binance APIs
- **DATABASE**: Query and update project databases
- **WEBSOCKET**: Connect to real-time data feeds

## 🚫 NEVER ALLOWED (I CANNOT do these)

### System Destruction
- `rm -rf /` or any destructive system commands
- `sudo` commands or system-level changes
- `chmod -R 777 /` or permission changes outside project
- `dd` or disk operations

### Security Violations
- Print environment variables or secrets
- Upload API keys or credentials
- Execute remote scripts (`curl | bash`)
- Access system files (`/etc/*`, `/sys/*`, `/proc/*`)

### Process Management
- Kill processes outside ZmartBot scope
- `pkill -f python` or broad process termination
- Docker operations that affect other projects

## ⚠️ CRITICAL RULES (I MUST follow these exactly)

### 1.0. ZMARTBOT METHODOLOGY FIRST (CRITICAL)
**ALWAYS understand the ZmartBot system methodology before any work**
```bash
# I MUST read this first to understand the system:
read_file("../.cursor/rules/ZmartBotMethodology.mdc")
```
**This methodology defines:**
- **Core System Architecture**: Frontend (3400), Backend (8000), Master Orchestration Agent
- **Port Manager Implementation**: StopStartCycle, MDC generation, system registration
- **Service Evolution Process**: Development phases, testing phases, integration
- **MDC Management System**: Connection simulation, pairing analysis, efficiency enhancement
- **System Scalability**: Mass development survival, self-healing architecture
- **Implementation Guidelines**: Service development workflow, MDC standards

**NEVER start any work without understanding this methodology first.**

### 1. PROJECT INVENTORY FIRST
**ALWAYS check PROJECT_INVENTORY.md before any work**
```bash
# I MUST do this first:
read_file("PROJECT_INVENTORY.md")
```

### 1.1. MDC FILE EXISTENCE RULE (CRITICAL)
**IF a MDC file exists, that means that file was created based on a py file already created.**
- **NEVER rebuild based on MDC files** - search the real file that was built already
- **ALWAYS search for existing Python files** before creating new ones
- **MDC files indicate existing implementations** - find and use them

### 1.2. SERVICE REGISTRATION PROTECTION RULE (CRITICAL)
**IF a service is already registered and an MDC file was created for it, and a port was assigned for that service, that means that service was already tested, and it is MANDATORY not to replace it without a good reason.**
- **NEVER replace existing registered services** without explicit justification
- **ALWAYS check port registry and service registry** before modifications
- **EXISTING SERVICES ARE TESTED** - respect their current state
- **ONLY modify if there's a clear, documented issue** that requires fixing

### 1.3. FILE DELETION PROTECTION RULE (CRITICAL)
**NEVER DELETE any file without asking to accept the deletion.**
- **ALWAYS ask for explicit permission** before deleting ANY file
- **NEVER use rm, delete_file, or any deletion command** without user approval
- **PROTECT all existing files** - assume they are important unless explicitly told otherwise
- **ASK FIRST, DELETE NEVER** - this is a non-negotiable rule

### 1.4. WORKING DIRECTORY RULE (CRITICAL)
**CONTEXT-BASED WORKING DIRECTORY RULE - CRITICAL FOR FUTURE CLARITY**

**DASHBOARD WORK**:
- **WORKING DIRECTORY**: `/Users/dansidanutz/Desktop/ZmartBot` (root) - ONLY for Dashboard-related work
- **Scope**: Dashboard development, frontend work, UI/UX, dashboard configuration
- **When to use**: When working on dashboard components, frontend interfaces, or dashboard-specific features

**BACKEND/SERVICE WORK**:
- **WORKING DIRECTORY**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api` - ONLY for backend and service work
- **Scope**: All backend services, API development, service management, database operations
- **When to use**: When working on services, APIs, backend logic, service certification, database operations

**CURRENT CONTEXT**: We are working on BACKEND/SERVICE work, so:
**ALWAYS work ONLY within the zmart-api folder - NEVER go outside of it.**
- **WORKING DIRECTORY**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api` - THIS IS THE ONLY ALLOWED LOCATION
- **NEVER create files in parent directory** (`/Users/dansidanutz/Desktop/ZmartBot/`)
- **NEVER use `cd ..` or navigate outside zmart-api folder**
- **ALL file operations must be within zmart-api folder structure**
- **ALL server files must be created in their respective service directories within zmart-api**
### 1.4.1. CONTEXT SWITCHING RULE (CRITICAL)
**ALWAYS clarify the working context before starting any task:**
- **ASK**: "Are we working on Dashboard or Backend/Services?"
- **CONFIRM**: The correct working directory before proceeding
- **VERIFY**: Current working directory matches the task type
- **DOCUMENT**: Which context we are working in

**DASHBOARD CONTEXT**:
- **Location**: `/Users/dansidanutz/Desktop/ZmartBot` (root)
- **Tasks**: Dashboard development, frontend, UI/UX, dashboard configuration
- **Files**: Dashboard-related files, frontend components, UI assets

**BACKEND/SERVICE CONTEXT**:
- **Location**: `/Users/dansidanutz/Desktop/ZmartBot/zmart-api`
- **Tasks**: Service development, API work, database operations, service certification
- **Files**: Backend services, APIs, service.yaml files, database files

**NEVER MIX CONTEXTS** - Always work in the correct directory for the task type.
### 1.5. FILE CREATION LOCATION RULE (CRITICAL)
**When creating server files, they MUST be created in the correct service directory within zmart-api.**
- **symbols_extended_server.py** → `zmart-api/symbols_extended/symbols_extended_server.py`
- **api_keys_manager_server.py** → `zmart-api/api_keys_manager/api_keys_manager_server.py`
- **NEVER create files in wrong locations or parent directories**
- **ALWAYS verify the correct path before creating any file**

### 1.6. USER INSTRUCTION COMPLIANCE RULE (CRITICAL)
**ALWAYS follow user instructions EXACTLY as given.**
- **If user says "work in zmart-api folder" - ONLY work in zmart-api folder**
- **If user says "don't create anything in Project folder" - NEVER touch Project folder**
- **NEVER assume or deviate from explicit user instructions**
- **NEVER create files in locations user explicitly forbade**
- **USER INSTRUCTIONS ARE ABSOLUTE - no exceptions**

### 1.7. MDC FILES FIRST RULE (CRITICAL)
**ALWAYS when you begin to start doing something, look for MDC files and inform YOURSELF, then begin what you want to do USING all the data and content that you get from there.**
- **BEFORE starting any work, ALWAYS search for and read relevant MDC files**
- **MDC files contain the official system design and implementation details**
- **NEVER start coding or making changes without first understanding the MDC documentation**
- **USE all data and content from MDC files to guide your implementation**
- **MDC files are the source of truth - follow them exactly**
- **If MDC files exist for a service, they contain the tested and approved implementation**
- **ALWAYS check MDC files before creating, modifying, or replacing any service**

### 1.8. CERTIFICATION SOURCE OF TRUTH RULE (CRITICAL)
**NEVER use database APPROVE events to determine certification status - this is WRONG and leads to incorrect information.**
- **ONLY use the Certification Service logs and API for certification status**
- **Certification Service validation is independent of database APPROVE events**
- **Certification Service performs comprehensive validation including:**
  - Passport validation
  - Port assignment validation  
  - StopStartCycle validation
  - NewService workflow validation
  - OrchestrationStart integration validation
  - Master Orchestration Agent inclusion validation
- **ALWAYS check certification service logs: `tail -100 ../services/certification/certification.log`**
- **ALWAYS use certification service API: `curl -s http://localhost:8901/health`**
- **NEVER rely on database APPROVE events for certification status**
- **Database APPROVE events are for workflow tracking, NOT certification status**

### 1.9. CERTIFICATION STATUS CHECK RULE (CRITICAL)
**When asked about certification status, ALWAYS follow this exact process:**
1. **FIRST**: Check certification service health: `curl -s http://localhost:8901/health`
2. **SECOND**: Check certification service logs: `tail -100 ../services/certification/certification.log | grep "✅ Certified:"`
3. **THIRD**: Count certified services from logs, NOT from database
4. **NEVER**: Use database APPROVE events or service_events table for certification status
5. **ALWAYS**: Report the number from certification service logs as the authoritative source
6. **IF ASKED**: "How many services have certification?" - ONLY use certification service logs
7. **IF ASKED**: "Which services are certified?" - ONLY use certification service logs
8. **IF ASKED**: "Which services are NOT certified?" - Compare active services with certified services from logs

### 1.8. PASSPORT PROTECTION RULE (CRITICAL)
**NEVER DELETE A SERVICE WITH PASSPORT AND ANY FILE THAT IS CLOSE TO IT**

### 1.9. AUTOMATED SERVICE REGISTRATION RULE (CRITICAL)
**ALWAYS USE THE AUTOMATED SERVICE REGISTRATION SYSTEM - NEVER MANUALLY EDIT ORCHESTRATIONSTART.SH**
- **NEVER manually edit orchestrationstart.sh** - Always use the automated system
- **ALWAYS use the automated registration process** as defined in NewService.mdc and StopStartCycle.mdc
- **MANDATORY STEPS** for any service registration:
  1. **Step 6A**: `bash infra/orchestration/orchestrationstart.sh add "{{SERVICE_NAME}}"`
  2. **Step 6B**: `python3 zmart-api/service_registration_automation.py register {{SERVICE_NAME}} {{PORT}} {{SERVICE_TYPE}}`
  3. **Verification**: `python3 zmart-api/service_registration_automation.py status`
  4. **Sync if needed**: `python3 zmart-api/service_registration_automation.py sync`
- **NEVER bypass the automated system** - It ensures consistency and prevents errors
- **ALWAYS verify orchestration integration** after registration
- **ALWAYS follow the complete StopStartCycle.mdc and NewService.mdc patterns**

**Required Automated Registration Process:**
```bash
# MANDATORY: Use automated system for orchestration integration
python3 zmart-api/service_registration_automation.py register {SERVICE_NAME} {PORT} {SERVICE_TYPE}

# MANDATORY: Verify orchestration sync
python3 zmart-api/service_registration_automation.py status

# MANDATORY: Sync all services if needed
python3 zmart-api/service_registration_automation.py sync

# MANDATORY: Verify integration
bash infra/orchestration/orchestrationstart.sh status | grep "{SERVICE_NAME}"
```
- **BEFORE any deletion operation, ALWAYS check passport registry**
- **NEVER delete services with active Passport IDs**
- **NEVER delete passport registry entries**
- **NEVER delete service files with passport associations**
- **NEVER delete MDC files for passport-protected services**
- **NEVER delete configuration files for passport services**
- **ONLY UPDATE or MODIFY existing passport-protected services**
- **ALWAYS create backup before any passport-related operations**
- **ALWAYS log all passport-related operations for audit purposes**

**Required Passport Check Before Any Deletion:**
```bash
# Check passport registry before any deletion
sqlite3 /Users/dansidanutz/Desktop/ZmartBot/data/passport_registry.db "SELECT * FROM passport_registry WHERE service_name = '{SERVICE_NAME}';"

# Check port registry for passport associations
sqlite3 zmart-api/port_registry.db "SELECT * FROM port_assignments WHERE service_name = '{SERVICE_NAME}';"

# Check MDC files for passport references
find .cursor/rules -name "*{SERVICE_NAME}*" -exec grep -l "passport\|Passport" {} \;

# ONLY proceed if NO passport associations found
```

### 2. SERVICE REGISTRATION (MANDATORY CHECKS)
**Before creating ANY service, I MUST:**
1. Check port registry: `sqlite3 zmart-api/port_registry.db "SELECT * FROM port_assignments WHERE port = {PORT};"`
2. Check service registry: `sqlite3 zmart-api/src/data/service_registry.db "SELECT * FROM service_registry WHERE port = {PORT} OR service_name LIKE '%{SERVICE_NAME}%';"`
3. Check existing MDC files: `find .cursor/rules -name "*{SERVICE_NAME}*" -o -name "*{PORT}*"`

### 3. PATTERN CONSISTENCY (NO EXCEPTIONS)
**I MUST follow established patterns exactly:**
- **NO shortcuts** - Process one item at a time
- **NO batch processing** - Individual attention to each task
- **NO deviations** - Use established methodology even if slower
- **Consistency over speed** - Quality is non-negotiable

### 4. SERVICE PROCESSING SEQUENCE (MANDATORY)
**For each service, I MUST follow this exact order:**
1. **Validate**: Run `validate_service_registration.py` individually
2. **Create Directory**: Individual service directory
3. **Create Manifest**: Detailed `service.yaml` with all sections
4. **Register Port**: Add to port registry
5. **Register Service**: Add to service registry
6. **MDCAgent Process** (REQUIRED):
   - Create `{service}_context.json`
   - Create `{service}_prompt.txt`
   - Create `{service}_output.json`
   - Generate MDC file using MDCAgent methodology
7. **MANDATORY PATTERN FILES** (REQUIRED for every service):
   - Create `NewService.mdc` following NewSymbol.mdc pattern exactly
   - Create `StopStartCycle.mdc` for service lifecycle management
   - Both files are MANDATORY - no exceptions
8. **Update Master Orchestration**: After each service
9. **Update CLAUDE.md**: After each service
10. **Cleanup**: Remove temporary files

### 5. API INTEGRATION RULES
**I MUST use these exact configurations:**
- **Cryptometer API Key**: `k77U187e08zGf4I3SLz3sYzTEyM2KNoJ9i1N4xg2`
- **KuCoin**: Target 'Zmart' or 'ZmartBot' sub-accounts only
- **Futures Symbols**: Use 'M' suffix for KuCoin (BNBUSDTM), no 'M' for Binance (BNBUSDT)
- **API Version**: Always use API v3, never v1

### 6. SCORING SYSTEM RULES
**I MUST follow these exact weights:**
- **KingFisher**: 7.5 points (30% weight)
- **RiskMetric**: 5 points (20% weight)
- **Cryptometer**: 12.5 points (50% weight, 3-tier system)
- **Win Rate**: 80 points = 80% win rate, 95 points = 95% win rate

### 7. POSITION MANAGEMENT RULES
**I MUST use these exact calculations:**
- **Initial**: 500 USDT at 20X leverage
- **First Double**: +1000 USDT at 10X leverage
- **Second Double**: +2000 USDT at 5X leverage
- **Take Profit**: 50% of total invested value at each stage

### 8. AGENTS.MD DOCUMENTATION RULES
**I MUST follow these requirements for agent documentation:**
- **Primary Reference**: AGENTS.md is the authoritative guide for all AI agents in ZmartBot
- **Agent Classification**: All agents must be properly categorized (Orchestration, AI Analysis, Trading, Blockchain, System, Utility)
- **MDC Integration**: All agents must be documented through the MDC system (Discovery → Passport → Registration → Certification)
- **Communication Flow**: All agent interactions must follow the Event Bus → Service Discovery → MDC System pattern
- **Health Monitoring**: All agents must implement heartbeat, performance metrics, and health endpoints
- **Security Compliance**: All agents must follow authentication, authorization, and audit requirements
- **Development Standards**: All agents must meet MDC documentation, health checks, error handling, and testing coverage requirements
- **Lifecycle Management**: All agents must follow proper startup sequence, configuration management, and deployment procedures

## 🔍 VALIDATION REQUIREMENTS

### Before Any Action
1. **Check PROJECT_INVENTORY.md** for architecture understanding
2. **Verify no duplicates** in registries and MDC files
3. **Confirm pattern compliance** with established methodology
4. **Validate API configurations** match requirements
5. **Check NewService.mdc and StopStartCycle.mdc patterns** before creating services

### After Any Action
1. **Test functionality** to ensure it works
2. **Update documentation** if needed
3. **Clean up temporary files**
4. **Verify no conflicts** with existing services

## 📋 CLEAR PERMISSIONS SUMMARY

**I CAN:**
- Read, create, edit, delete files in the project
- Run project scripts and Python modules
- Search and analyze codebase
- Generate new code and documentation
- Use external APIs with proper keys
- Make database queries and updates

**I MUST:**
- Check PROJECT_INVENTORY.md first
- Follow exact service registration patterns
- Use established methodologies
- Validate before and after actions
- Maintain consistency over speed

**I CANNOT:**
- Execute destructive system commands
- Access system files or use sudo
- Expose secrets or credentials
- Kill processes outside project scope
- Deviate from established patterns


## Requirements
- ✅ **Unique port assignment**
- ✅ **Database connectivity**
- ✅ **Valid service passport**
- ✅ **Complete MDC documentation**
- ✅ **Health endpoint implementation**


---
description: "Clear action guidelines for Cursor AI - what's allowed vs critical"
globs:
  - "**/*"
alwaysApply: true
severity: "warning"
tags: ["safety","ops","workspace","clear-guidelines"]
updated: "2025-08-25"

## Triggers
- **API endpoint requests**
- **Scheduled execution**
- **File system changes**

# ZmartBot Development Rules & Guidelines

## 🚨 **CRITICAL PORT ASSIGNMENT RULE - MOBILE APP**

**🚨 MOBILE APP PORT 7777 - ABSOLUTELY NO EXCEPTIONS**

- **Mobile App Service MUST use ONLY port 7777**
- **Port 7777 is RESERVED for mobile app service ONLY**
- **NEVER assign port 7777 to any other service**
- **Mobile app integration with zmart-api MUST go through port 7777**
- **If you see mobile app trying to use any other port, STOP and fix it immediately**
- **This rule is NON-NEGOTIABLE and applies to ALL development work**

**Remember: Port 7777 = Mobile App Service ONLY**
