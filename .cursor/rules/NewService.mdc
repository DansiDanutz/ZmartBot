
## Description
Core service component of the ZmartBot ecosystem providing essential functionality.


# NewService.mdc
> Purpose: Single source of truth to integrate any new service into ZmartBot ‚Äî deterministically, safely, and repeatably.

## üö® **MANDATORY ZMARTBOT SERVICE ARCHITECTURE WORKFLOW**

### **CRITICAL WORKFLOW RULES (FORBIDDEN TO IGNORE)**

**üö® NO EXCUSES - SYSTEM WILL CRASH IF RULES ARE BROKEN**

#### **Rule 1: Service Definition**
- **ANY .py file = SERVICE**: Every Python file represents a service
- **MANDATORY MDC**: Every .py file MUST have an associated MDC file
- **SERVICE COUNTING**: All .py files are counted as services in the system

#### **Rule 2: Port Assignment (Port Manager)**
- **MANDATORY PORT**: Any service trying to connect with other services MUST receive a port from Port Manager
- **PORT DATABASE**: Port Manager assigns a FREE port different from stored ports in database
- **CONFLICT RESOLUTION**: If port conflict detected, Port Manager automatically assigns new port
- **PERSISTENCE**: Port assignment is persisted and cannot be changed without proper workflow

#### **Rule 3: Passport Assignment (Integration Gate)**
- **PASSPORT REQUIRED**: Service MUST receive a passport to be integrated into system
- **MDC PREREQUISITE**: Passport is ONLY accepted if the .py service has an associated MDC file
- **UNIQUE IDENTITY**: Each passport provides unique service identity and tracking
- **SYSTEM ACCESS**: Without passport, service cannot access system resources

#### **Rule 4: Registration Process (Final Stage)**
- **IMPLEMENTATION COMPLETE**: Service implementation must be done and tested
- **STRICT WORKFLOW**: Registration follows mandatory steps documented in StopStartCycle and NewService MDC files
- **SUCCESS VERIFICATION**: Only proceed if all steps are successful
- **FINAL STATUS**: Successful registration upgrades service to "REGISTERED" status

#### **Rule 5: Registered Service Requirements**
- **AUTOMATIC STARTUP**: All registered services MUST start when system starts
- **ORCHESTRATION INTEGRATION**: Services must be assigned to Master Orchestration Agent
- **SAFE LEARNING**: Services must integrate with Master Orchestration Agent's safe learning system
- **CERTIFICATION**: All registered services MUST receive a certificate from Certification Service

#### **Rule 6: System Protection**
- **PROTECTION TRIGGER**: After registration completion, Protection Service is automatically triggered
- **DELETION PREVENTION**: Protection Service prevents registered services from being deleted
- **SYSTEM INTEGRITY**: Protection ensures system architecture integrity

### **CRITICAL WARNING: SERVICE COUNTING ISSUES**

**‚ö†Ô∏è IMPORTANT**: The "Registered Services" count on the MDC Dashboard and throughout the system depends on **Step 6C - Master Orchestration Agent Update**. 

**üö® ROOT CAUSE**: Previous counting discrepancies were caused by services being registered in passport registry but **NOT** being added to Master Orchestration Agent. This step is **ABSOLUTELY CRITICAL** for accurate service counting.

**‚úÖ SOLUTION**: The registration process now automatically includes Master Orchestration Agent updates, but **YOU MUST VERIFY** that Step 6C is completed successfully.

**üîç VERIFICATION**: Always run `check_service_counts()` after registration to ensure accuracy.

## Scope
This rule governs the end-to-end lifecycle from **development** to **production activation**:
- Discovery ‚Üí Port assignment ‚Üí STOP gate ‚Üí Registration ‚Üí Orchestration ‚Üí Verification ‚Üí Activation ‚Üí Learning.

## Variables
- `{{SERVICE_DIR}}` = `/Users/dansidanutz/Desktop/ZmartBot/services/{{service_name}}`
- `{{SERVICE_NAME}}` = `zmart-{{kebab}}`
- `{{MANIFEST}}` = `{{SERVICE_DIR}}/service.yaml`
- `{{PORT_MANAGER_DB}}` = `/Users/dansidanutz/Desktop/ZmartBot/infra/port_manager.db`
- `{{SNAPSHOT_DIR}}` = `/Users/dansidanutz/Desktop/ZmartBot/infra/snapshots`
- `{{LOG_DIR}}` = `/Users/dansidanutz/Desktop/ZmartBot/logs/{{SERVICE_NAME}}`


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Phase 1 ‚Äî Development & Preparation

### Step 1 ‚Äî Service Development & Local Testing
**Requirements**
- Implement `/health` (liveness) and `/ready` (readiness).
- Conform to coding standards and logging format (JSON lines).
- Provide `service.yaml` manifest (see template at top).
- Local test: run, restart, validate endpoints.

**Automation (suggested)**
```bash
# Create skeleton (example)
python -m infra.cli.scaffold --name "{{SERVICE_NAME}}" --type backend

# Local run
PORT=8000 python -m services.{{module}} --port $PORT &
curl -fsS "http://localhost:$PORT/health" | jq .
curl -fsS "http://localhost:$PORT/ready"  | jq .
```


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Phase 2 ‚Äî Discovery & Port Assignment

### Step 2 ‚Äî MANDATORY Duplicate Prevention Checks

**CRITICAL: Before any service registration, perform these checks:**

```bash
# 1. Port Conflict Detection
sqlite3 zmart-api/port_registry.db "SELECT * FROM port_assignments WHERE port = {PORT};"

# 2. Service Name Validation (check for similar names)
sqlite3 zmart-api/src/data/service_registry.db "SELECT * FROM service_registry WHERE service_name LIKE '%{SERVICE_NAME}%' OR port = {PORT};"

# 3. MDC File Duplication Check
find .cursor/rules -name "*{SERVICE_NAME}*" -o -name "*{PORT}*"

# 4. Process Check (if service is running)
ps aux | grep -i "{SERVICE_NAME}" | grep -v grep
```

**Service Name Mapping (Standardized):**
- `zmart_orchestration` ‚Üí `master_orchestration_agent` (Port 8002)
- `zmart_dashboard` ‚Üí `zmart-dashboard` (Port 3400)
- `zmart_api` ‚Üí `zmart-api` (Port 8000)
- `my_symbols` ‚Üí `mysymbols` (Port 8201)
- `api_keys_manager` ‚Üí `api-keys-manager-service` (Port 8006)

**If ANY of these checks return results:**
- **STOP** the registration process
- **Verify** if it's the same service with different naming
- **Use existing** service instead of creating duplicate
- **Update** existing service if needed

**CRITICAL: Passport Protection Check**
```bash
# Check if service has passport protection
sqlite3 /Users/dansidanutz/Desktop/ZmartBot/data/passport_registry.db "SELECT passport_id FROM passport_registry WHERE service_name = '{SERVICE_NAME}';"
```

**If Passport ID Found:**
- **NEVER DELETE** the service or any related files
- **NEVER DELETE** passport registry entries
- **NEVER DELETE** MDC files for passport-protected services
- **NEVER DELETE** configuration files for passport services
- **ONLY UPDATE** or **MODIFY** existing passport-protected services
- **CREATE BACKUP** before any modifications

**Automated Validation (Recommended):**
```bash
# Run validation script before service registration
python3 zmart-api/validate_service_registration.py {SERVICE_NAME} {PORT}

# Only proceed if validation passes (exit code 0)
if [ $? -eq 0 ]; then
    echo "‚úÖ Validation passed, proceeding with registration"
else
    echo "‚ùå Validation failed, stopping registration"
    exit 1
fi

# MANDATORY: Use automated service registration system
python3 zmart-api/service_registration_automation.py register {SERVICE_NAME} {PORT} {SERVICE_TYPE}

# Verify orchestration integration
python3 zmart-api/service_registration_automation.py status
```

## CRITICAL: Pattern Consistency Requirements

### MANDATORY Service Processing Pattern
**NEVER deviate from this established pattern:**

1. **Individual Processing**: Process ONE service at a time
2. **Full MDCAgent Process**: Use complete MDCAgent methodology for each service
3. **Comprehensive Documentation**: Create detailed MDC files with all sections
4. **Step-by-Step Updates**: Update Master Orchestration and CLAUDE.md after each service
5. **No Batch Processing**: Avoid shortcuts or batch operations
6. **Quality Over Speed**: Maintain consistency even if it takes longer

### Pattern Violation Prevention
- **Review pattern before starting**
- **Check compliance during execution**
- **Verify quality after completion**
- **Ask for clarification if unsure**

### Step 3 ‚Äî Service Discovery Agent Detection

**Mechanism**

* Watch for new/changed `service.yaml`.
* Validate schema (fail fast).
* Classify by `service_type`.
* Trigger Port Manager for assignment (persistent).

**Automation**

```bash
python -m infra.discovery.scan --root /Users/dansidanutz/Desktop/ZmartBot/services
python -m infra.port_manager.assign --db "{{PORT_MANAGER_DB}}" --manifest "{{MANIFEST}}"
python -m infra.port_manager.print --db "{{PORT_MANAGER_DB}}" --service "{{SERVICE_NAME}}"
```

**Port Policy**

* frontend: 3400‚Äì3499
* backend: 8000‚Äì8099
* internal\_api: 8200‚Äì8299
* worker: 8300‚Äì8399
* orchestration: 8500‚Äì8599
  *Port is persisted; no reuse after restart.*

**DB (SQLite) Schema (reference)**

```sql
create table if not exists services(
  service_name text primary key,
  service_type text not null,
  version text,
  owner text,
  port integer unique,
  manifest_path text not null,
  created_at text default current_timestamp,
  updated_at text
);
create table if not exists dependencies(
  service_name text,
  depends_on text,
  primary key(service_name, depends_on)
);
create table if not exists events(
  id integer primary key autoincrement,
  ts text default current_timestamp,
  service_name text,
  event text,
  details text
);
```


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Phase 3 ‚Äî Integration Control Gate

<!-- BEGIN:StopStartCycle -->

### Step 3 ‚Äî STOP Gate (`STOP_zmartbot.sh`)  **CRITICAL**

**Purpose**: Prevent premature integration; capture a safe restore point.

**During STOP**

1. Freeze discovery watcher.
2. System-wide validation: all *current* services `200` on `/health`.
3. Snapshot Manager:

   * Dump PortManager DB, Registry state, Orchestrator desired graph
   * Capture ZmartBot process list (scoped) and last 200 log lines each
   * Store as `{{SNAPSHOT_DIR}}/snapshot-YYYYmmdd-HHMMSS/`
4. Process Reaper: clean orphaned ZmartBot PIDs and stale ports (scoped).
5. Persist final port assignment for the **new** service (no changes for existing).

**Automation**

```bash
bash infra/scripts/STOP_zmartbot.sh \
  --db "{{PORT_MANAGER_DB}}" \
  --snapshot-dir "{{SNAPSHOT_DIR}}" \
  --scope "zmart-*"
```

### Step 4 ‚Äî Service Registry Registration (port 8610)

**Action**: Register the service contract with Registry.

**Automation**

```bash
python -m infra.registry_client.register \
  --registry "http://localhost:8610" \
  --manifest "{{MANIFEST}}" \
  --port-db "{{PORT_MANAGER_DB}}"
```

### Step 4.1 ‚Äî Passport Service Registration (port 8620) **MANDATORY**

**Action**: Issue unique Passport ID for approved service and register in Passport Service.

**Purpose**: Every approved service MUST receive a unique Passport ID for identity management, tracking, and orchestration integration.

**Passport ID Format**: `ZMBT-{TYPE}-{DATE}-{HASH}` (e.g., `ZMBT-SRV-20250826-A1B2C3`)

**Service Type Classification**:
- **SRV**: Backend Services (AlertSystemServer, AnalyticsServer, etc.)
- **AGT**: Orchestration Agents (MasterOrchestrationAgent, MDCAgent, etc.)
- **API**: API Services (MainAPIServer, API-Manager, etc.)
- **ENG**: Processing Engines (TradingEngine, RiskEngine, etc.)
- **BOT**: Bot Services (TradingBot, MonitoringBot, etc.)

**Automation**

```bash
# Register service with Passport Service for Passport ID assignment
curl -X POST "http://localhost:8620/api/passport/register" \
  -H "Authorization: Bearer passport-admin-token" \
  -H "Content-Type: application/json" \
  -d '{
    "service_name": "{{SERVICE_NAME}}",
    "service_type": "{{SERVICE_TYPE}}",
    "port": {{PORT}},
    "health_endpoint": "/health",
    "description": "{{DESCRIPTION}}",
    "version": "{{VERSION}}",
    "dependencies": {{DEPENDENCIES}},
    "tags": {{TAGS}},
    "metadata": {{METADATA}}
  }'

# Alternative: Direct database registration (if API unavailable)
sqlite3 /Users/dansidanutz/Desktop/ZmartBot/data/passport_registry.db \
  "INSERT INTO passport_registry (
    passport_id, service_name, service_type, port, status, 
    registered_at, activated_at, description, metadata, created_by
  ) VALUES (
    'ZMBT-{{TYPE}}-$(date +%Y%m%d)-$(openssl rand -hex 3 | tr '[:lower:]' '[:upper:]')',
    '{{SERVICE_NAME}}', '{{SERVICE_TYPE}}', {{PORT}}, 'ACTIVE',
    datetime('now'), datetime('now'), '{{DESCRIPTION}}', '{{METADATA}}', 'system'
  );"

# Verify Passport ID assignment
curl -s "http://localhost:8620/api/passport/services/{{SERVICE_NAME}}" | jq '.passport_id'
```

**Passport Service Integration Benefits**:
- ‚úÖ **Unique Identity**: Each service receives collision-resistant identifier
- ‚úÖ **Lifecycle Tracking**: Complete registration history and audit trail
- ‚úÖ **Orchestration Integration**: Master Orchestration uses Passport IDs for service coordination
- ‚úÖ **Security Management**: Service authentication and authorization tracking
- ‚úÖ **Discovery Service**: Centralized service lookup and metadata management
- ‚úÖ **Migration Support**: Legacy service migration and Passport ID assignment

**CRITICAL**: Service registration is NOT complete until Passport ID is assigned. Services without Passport IDs will NOT be recognized by Master Orchestration Agent.

### Step 5 ‚Äî MDC Documentation Generation (AI)

**Action**: MDC Agent analyzes code + manifest and generates `.mdc` into `.cursor/rules/services/{{SERVICE_NAME}}.mdc`.
Primary: GPT‚Äë5; Fallback: GPT‚Äë4.

**Automation**

```bash
python -m infra.mdc_agent.generate \
  --service "{{SERVICE_NAME}}" \
  --manifest "{{MANIFEST}}" \
  --output ".cursor/rules/services/{{SERVICE_NAME}}.mdc" \
  --llm "gpt5,fallback=gpt4"
```

### Step 6A ‚Äî Orchestration (Basic: `orchestrationstart`)

**Action**: Add the service into start/stop graph (order by deps). No adaptive logic yet.

**Automation**

```bash
bash infra/orchestration/orchestrationstart.sh add "{{SERVICE_NAME}}"
```

### Step 6B ‚Äî Automated Service Registration (MANDATORY)

**Action**: Use the automated service registration system to update orchestration startup.

**CRITICAL**: This step is MANDATORY and ensures all registered services are included in the system startup process.

**Automation**

```bash
# MANDATORY: Register service with automated system
python3 zmart-api/service_registration_automation.py register {{SERVICE_NAME}} {{PORT}} {{SERVICE_TYPE}}

# Verify orchestration sync
python3 zmart-api/service_registration_automation.py status

# Sync all services if needed
python3 zmart-api/service_registration_automation.py sync
```

**Benefits**:
- ‚úÖ **Automatic Orchestration Update**: Service automatically added to startup order
- ‚úÖ **Directory Mapping**: Service directory paths automatically configured
- ‚úÖ **Startup Commands**: Service startup commands automatically added
- ‚úÖ **Backup Protection**: Orchestration script backed up before changes
- ‚úÖ **Consistency**: Ensures all registered services are in startup process
- ‚úÖ **Validation**: Verifies service is properly integrated

### Step 6C ‚Äî Master Orchestration Agent Update (MANDATORY)

**Action**: Update the Master Orchestration Agent to include the newly registered service.

**üö® CRITICAL IMPORTANCE**: This step is **ABSOLUTELY MANDATORY** and **CRITICAL** to ensure the service is counted correctly in the system. **FAILURE TO COMPLETE THIS STEP WILL CAUSE THE "REGISTERED SERVICES" COUNT TO BE INCORRECT** on the MDC Dashboard and throughout the system.

**‚ö†Ô∏è ROOT CAUSE OF COUNTING ISSUES**: The primary reason why "Registered Services" counts were incorrect was because this step was missing from the registration process. Services were being registered in passport registry but not added to Master Orchestration Agent, causing count discrepancies.

**Automation**

```bash
# MANDATORY: Update Master Orchestration Agent
python3 zmart-api/service_registration_automation.py update_master_agent {{SERVICE_NAME}} {{PORT}} {{SERVICE_TYPE}}

# Verify Master Orchestration Agent sync
python3 zmart-api/service_registration_automation.py verify_master_agent

# Check service count accuracy
python3 zmart-api/service_registration_automation.py check_counts
```

**Benefits**:
- ‚úÖ **Automatic Count Update**: Service automatically added to Master Orchestration Agent
- ‚úÖ **Passport ID Integration**: Service passport ID automatically included
- ‚úÖ **Service Count Accuracy**: Ensures registered services count is correct
- ‚úÖ **System Consistency**: Maintains synchronization between all orchestration files
- ‚úÖ **Validation**: Verifies service is properly counted and listed
- ‚úÖ **Dashboard Accuracy**: Prevents incorrect counts on MDC Dashboard
- ‚úÖ **Future Prevention**: Eliminates the root cause of counting discrepancies

### Step 7 ‚Äî Health & Readiness Verification

**Action**: Start only the new service, wait for `/ready`, test integration flows.

**Automation**

```bash
bash infra/orchestration/orchestrationstart.sh start "{{SERVICE_NAME}}"
python -m infra.health.wait_ready --service "{{SERVICE_NAME}}" --timeout 60
python -m infra.tests.smoke --service "{{SERVICE_NAME}}"
```

### Step 8 ‚Äî Production Activation

**Action**: Wire into traffic / notify dependents; update snapshot baseline; enable real‚Äëtime monitoring.

**Automation**

```bash
python -m infra.orchestrator.activate --service "{{SERVICE_NAME}}"
python -m infra.snapshot.update-baseline --service "{{SERVICE_NAME}}"
```

<!-- END:StopStartCycle -->


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Phase 4 ‚Äî Advanced Orchestration (Master Agent @ 8002)

### Step 6B ‚Äî Master Orchestration Agent (Adaptive)

* Behavior profiling, utility assessment, coordination learning
* Failure mode discovery & automated remediation playbooks

**Activation**

```bash
python -m infra.master_agent.link --service "{{SERVICE_NAME}}" --agent "http://localhost:8002"
```


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Phase 5 ‚Äî System Health & Dependency Integration

### Health, Performance, Monitoring

* Establish baselines (latency, error rate, CPU/mem).
* Register metrics path if present.

**Automation**

```bash
python -m infra.metrics.register --service "{{SERVICE_NAME}}" --metrics-path "/metrics"
python -m infra.monitoring.baseline --service "{{SERVICE_NAME}}"
```

### Dependencies & Load Balancing

* Validate service-to-service calls; update LB if applicable.

**Automation**

```bash
python -m infra.deps.sync --service "{{SERVICE_NAME}}"
python -m infra.lb.configure --service "{{SERVICE_NAME}}"
```


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Phase 6 ‚Äî Integration Success Verification (Checklist)

1. ‚úÖ `/health` and `/ready` pass consistently
2. ‚úÖ Registered in Registry (8610) with correct metadata
3. ‚úÖ **Passport ID assigned** and registered in Passport Service (8620) - **üö® CRITICAL MANDATORY**
4. ‚úÖ **Port assignment verified** and persisted - **üö® CRITICAL MANDATORY**
5. ‚úÖ **Orchestration integration completed** - **üö® CRITICAL MANDATORY**
6. ‚úÖ **Master Orchestration Agent updated** with service and passport ID - **üö® CRITICAL MANDATORY**
7. ‚úÖ **System Protection Service protection active** - **üö® CRITICAL MANDATORY**
8. ‚úÖ **Service count accuracy verified** in Master Orchestration Agent - **üö® CRITICAL MANDATORY**
9. ‚úÖ **Count verification passed** using `check_service_counts()` - **üö® CRITICAL MANDATORY**
10. ‚úÖ **Certificate generated** via Certification Service - **üö® CRITICAL MANDATORY**
11. ‚úÖ **MDC documentation complete** - **üö® CRITICAL MANDATORY**
12. ‚úÖ Service `.mdc` generated and stored
13. ‚úÖ Dependencies mapped and validated
14. ‚úÖ Snapshot Manager includes the service in baselines
15. ‚úÖ Orchestration start/stop is correct and ordered
16. ‚úÖ Monitoring active; baseline recorded
17. ‚úÖ Passport Service authentication and identity verification working
18. ‚úÖ Learning phase initiated (if opted)


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Reference: Shell & Script Skeletons

**`infra/scripts/STOP_zmartbot.sh`**

```bash
#!/usr/bin/env bash
set -euo pipefail
DB="${1:-/Users/dansidanutz/Desktop/ZmartBot/infra/port_manager.db}"
SNAPDIR="${2:-/Users/dansidanutz/Desktop/ZmartBot/infra/snapshots}"
SCOPE="zmart-"

python -m infra.discovery.freeze
python -m infra.health.check --all || { echo "Health check failed"; exit 1; }

python -m infra.snapshot.create --db "$DB" --out "$SNAPDIR" --scope "$SCOPE"
python -m infra.process_reaper.clean --scope "$SCOPE" --safe-only

echo "STOP gate completed."
```

**`infra/process_reaper.py` (behavior)**

* Identify processes by `--scope` (prefix match on unit name or PID files under `infra/pids/`).
* Refuse to kill anything outside scope; print dry‚Äërun before action.

**`infra/mdc_agent/generate.py` (inputs)**

* `service.yaml`, `docs/overview.md`, code introspection (optional).
* Emits `.cursor/rules/services/{{SERVICE_NAME}}.mdc`.

**`infra/health/wait_ready.py`**

* Polls `http://localhost:$PORT/ready` until `200` or timeout.


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Contract for Service Health Endpoints

**`GET /health`**

```json
{ "status":"ok", "uptime_seconds":123, "version":"0.1.0", "checks":{"db":"ok","cache":"ok"} }
```

**`GET /ready`**

```json
{ "status":"ready", "dependencies":{"db":"ready","cache":"ready"} }
```

**HTTP 200** is mandatory for healthy/ready. Timeouts are treated as failure.


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Governance / Security Notes

* Registry requires admin token for mutating endpoints.
* Orchestrator injects a **Service Token** into the environment at start (`SERVICE_TOKEN`); peer services must validate it on inbound calls when `security.token_required: true`.

```
# Example env injection at start (pseudocode)
export PORT=8003
export SERVICE_TOKEN="$(python -m infra.registry_client.issue_token --service {{SERVICE_NAME}})"
exec python -m services.{{module}} --port $PORT
```


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Failure & Rollback Playbook

* If Step 7 (readiness) fails: stop new service, **restore snapshot**, unfreeze discovery, open ticket `sev-3`.
* If system health check fails post-activation: orchestrator automatically isolates new service (traffic weight 0), alerts, and reverts LB config.

```
python -m infra.snapshot.restore --latest-success
```


## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---

## Appendix: Keep StopStartCycle in Sync

This `NewService.mdc` deliberately wraps Steps 3‚Äì8 with:

```
<!-- BEGIN:StopStartCycle -->
...subset...
<!-- END:StopStartCycle -->
```

You can auto-extract to `StopStartCycle.mdc` via:

```bash
python - <<'PY'
import re, sys, pathlib
p=pathlib.Path('.cursor/rules/NewService.mdc').read_text()
m=re.search(r'<!-- BEGIN:StopStartCycle -->(.*)<!-- END:StopStartCycle -->', p, re.S)
pathlib.Path('.cursor/rules/StopStartCycle.mdc').write_text(
  "# StopStartCycle.mdc\n" + m.group(1).strip()+"\n"
)
print("StopStartCycle.mdc updated")
PY
```

description:
globs:
alwaysApply: true

## Requirements
- ‚úÖ **Unique port assignment**
- ‚úÖ **Database connectivity**
- ‚úÖ **Valid service passport**
- ‚úÖ **Complete MDC documentation**
- ‚úÖ **Health endpoint implementation**


---


## Triggers
- **API endpoint requests**
- **File system changes**
- **Database events**
