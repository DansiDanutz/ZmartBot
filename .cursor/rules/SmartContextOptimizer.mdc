# Smart Context Optimization System

## Summary
Advanced performance optimization system for large-scale MDC management with smart context loading, batch processing, domain separation, and real-time monitoring.

## Purpose
Optimize CLAUDE.md generation and MDC file management for performance with large datasets (40+ MDC files, 500KB+ content) while maintaining context relevance and system responsiveness.

## Core Components

### 1. Smart Context Optimizer (`smart_context_optimizer.py`)
**Purpose**: Intelligent context generation with relevance scoring and domain separation
**Key Features**:
- Relevance scoring for MDC files based on task and recency
- Domain-based context organization (core, trading, monitoring, etc.)
- Smart content summarization for large files
- Performance-optimized CLAUDE.md generation
- 40KB size limit enforcement

**Usage**:
```bash
# Analyze current context performance
python3 zmart-api/smart_context_optimizer.py --analyze

# Update with specific domain focus
python3 zmart-api/smart_context_optimizer.py --update --domain trading

# Update with current task context
python3 zmart-api/smart_context_optimizer.py --update --task "implement trading alerts"
```

### 2. Enhanced MDC Monitor (`enhanced_mdc_monitor.py`)
**Purpose**: Real-time monitoring with batch processing and performance optimization
**Key Features**:
- Real-time file system monitoring for .mdc files
- Batch processing with configurable intervals (30s default)
- Performance metrics tracking
- Smart domain detection for focused updates
- Queue-based change management

**Usage**:
```bash
# Start enhanced monitoring
python3 zmart-api/enhanced_mdc_monitor.py --start

# Check monitoring status
python3 zmart-api/enhanced_mdc_monitor.py --status

# Force immediate update
python3 zmart-api/enhanced_mdc_monitor.py --update
```

### 3. Performance Dashboard (`performance_dashboard.py`)
**Purpose**: Real-time performance monitoring and analytics
**Key Features**:
- Real-time performance monitoring
- System metrics tracking (file counts, sizes, update times)
- Performance alerts and recommendations
- Historical data analysis
- Error tracking and reporting

**Usage**:
```bash
# Start performance monitoring
python3 zmart-api/performance_dashboard.py --start

# Generate performance report
python3 zmart-api/performance_dashboard.py --report

# Show current alerts
python3 zmart-api/performance_dashboard.py --alerts
```

## Domain Configuration

### Current Domain Mapping
```python
domains = {
    "core": ["rule_0_mandatory", "rules", "main"],
    "trading": ["MySymbols", "WhaleAlerts", "MessiAlerts", "LiveAlerts"],
    "monitoring": ["MonitoringMDC", "diagnostics", "ProcessReaper"],
    "orchestration": ["MasterOrchestrationAgent", "OrchestrationStart", "START_zmartbot"],
    "services": ["NewService", "PortManager", "ServiceDiscovery", "ServiceRegistry"],
    "data": ["MySymbolsDatabase", "21indicatorsDatabase", "market_data"],
    "backend": ["Backend", "API-Manager", "BackendDoctorPack"],
    "frontend": ["frontend", "ControlUI"]
}
```

### Adding New Domains
```python
# In smart_context_optimizer.py
self.domains["new_domain"] = ["keyword1", "keyword2", "keyword3"]
```

## Performance Architecture

### Layered Context System
```
Layer 1: Core Context (Always Active - <15KB)
â”œâ”€â”€ rule_0_mandatory.mdc
â”œâ”€â”€ rules.mdc
â””â”€â”€ main.mdc

Layer 2: Domain Context (Load on Demand - <30KB)
â”œâ”€â”€ trading/ (MySymbols, WhaleAlerts, etc.)
â”œâ”€â”€ monitoring/ (MonitoringMDC, diagnostics, etc.)
â”œâ”€â”€ orchestration/ (MasterOrchestrationAgent, etc.)
â””â”€â”€ services/ (NewService, PortManager, etc.)

Layer 3: Reference Context (Load as Needed)
â”œâ”€â”€ Full MDC files in .cursor/rules/
â”œâ”€â”€ Domain-specific contexts in .claude/contexts/
â””â”€â”€ Historical data and backups
```

### Smart Batching Strategy
```
File Change â†’ Queue â†’ Batch Processing â†’ Smart Update
     â†“           â†“           â†“              â†“
  Immediate   Collect    Analyze      Generate
  Detection   Changes    Domain      Optimized
              (30s)     Focus       Context
```

## Performance Metrics & Thresholds

### Key Performance Indicators
1. **CLAUDE.md Size**: Keep under 40KB (optimal: <35KB)
2. **Update Time**: Average < 3 seconds
3. **Batch Efficiency**: >80% of updates batched
4. **Relevance Score**: >70% relevant content
5. **Error Rate**: <5 errors per hour

### Performance Thresholds
```python
thresholds = {
    "max_update_time": 5.0,  # seconds
    "max_claude_size": 40000,  # characters
    "max_files_per_update": 20,
    "min_relevance_score": 30,
    "batch_interval": 30,  # seconds
    "update_threshold": 5  # minimum changes before batch update
}
```

## Integration Rules

### 1. MDC Agent Integration
The smart context optimizer integrates with existing MDC Agent:
```python
# In your MDC Agent
from smart_context_optimizer import SmartContextOptimizer

optimizer = SmartContextOptimizer()
optimizer.update_claude_md_smart(current_task="trading implementation")
```

### 2. CLAUDE.md Organization
Works with existing `claude-organize` script:
```bash
# Your existing organization
claude-organize

# Plus smart optimization
python3 zmart-api/smart_context_optimizer.py --update
```

### 3. GitHub Integration
All files tracked in GitHub repository:
```bash
# Add new optimization files
git add zmart-api/smart_context_optimizer.py
git add zmart-api/enhanced_mdc_monitor.py
git add zmart-api/performance_dashboard.py
git commit -m "Add smart context optimization system"
```

## Configuration Management

### Environment Variables
```bash
# Optional: Override default settings
export SMART_CONTEXT_BATCH_INTERVAL=30
export SMART_CONTEXT_UPDATE_THRESHOLD=5
export SMART_CONTEXT_MAX_SIZE=40000
```

### Configuration Files
- `.claude/context_cache.json` - Performance cache
- `.claude/performance_data.json` - Historical metrics
- `.claude/contexts/` - Domain-specific contexts

## Monitoring & Alerts

### Automatic Alerts
The system automatically detects:
1. **Size Warnings**: CLAUDE.md >90% of limit
2. **Update Frequency**: >20 updates/hour
3. **Error Rate**: >5 errors/hour
4. **Slow Updates**: Average time >5 seconds

### Manual Monitoring
```bash
# Check for alerts
python3 zmart-api/performance_dashboard.py --alerts

# Generate full report
python3 zmart-api/performance_dashboard.py --report

# Analyze context relevance
python3 zmart-api/smart_context_optimizer.py --analyze --task "current task"
```

## Troubleshooting

### Common Issues & Solutions

1. **Import Errors**
   - **Issue**: Missing dependencies
   - **Solution**: `pip install watchdog pathlib typing`

2. **Permission Errors**
   - **Issue**: File access permissions
   - **Solution**: Check file permissions and ownership

3. **Performance Issues**
   - **Issue**: Slow updates or high resource usage
   - **Solution**: Adjust batch intervals and update thresholds

4. **Size Limits**
   - **Issue**: CLAUDE.md exceeds 40KB limit
   - **Solution**: Optimize context content or increase limit

### Debug Commands
```bash
# Test individual components
python3 zmart-api/smart_context_optimizer.py --analyze
python3 zmart-api/enhanced_mdc_monitor.py --status
python3 zmart-api/performance_dashboard.py --report

# Check file structure
ls -la .claude/contexts/
ls -la .cursor/rules/*.mdc | wc -l
```

## Best Practices

### 1. Domain Organization
- Keep related MDC files in same domain
- Use descriptive keywords for domain detection
- Regularly review and update domain mappings

### 2. Performance Optimization
- Monitor performance metrics regularly
- Adjust batch intervals based on usage patterns
- Use domain-specific updates when working on focused tasks

### 3. Context Management
- Keep CLAUDE.md under 40KB for optimal performance
- Use domain contexts for detailed work
- Archive old contexts to maintain performance

### 4. Monitoring
- Set up automated performance monitoring
- Review alerts and recommendations regularly
- Track performance trends over time

## Commands Reference

### Smart Context Optimizer
```bash
# Basic usage
python3 zmart-api/smart_context_optimizer.py --analyze
python3 zmart-api/smart_context_optimizer.py --update --domain core
python3 zmart-api/smart_context_optimizer.py --update --task "current task"

# Advanced options
python3 zmart-api/smart_context_optimizer.py --project-root /path/to/project
```

### Enhanced MDC Monitor
```bash
# Basic usage
python3 zmart-api/enhanced_mdc_monitor.py --start
python3 zmart-api/enhanced_mdc_monitor.py --status
python3 zmart-api/enhanced_mdc_monitor.py --update

# Configuration
python3 zmart-api/enhanced_mdc_monitor.py --batch-interval 60 --update-threshold 10
```

### Performance Dashboard
```bash
# Basic usage
python3 zmart-api/performance_dashboard.py --start
python3 zmart-api/performance_dashboard.py --report
python3 zmart-api/performance_dashboard.py --alerts

# Data management
python3 zmart-api/performance_dashboard.py --save
python3 zmart-api/performance_dashboard.py --load
```

## Implementation Status

### âœ… Completed Features
- [x] Smart Context Optimizer implemented
- [x] Enhanced MDC Monitor created
- [x] Performance Dashboard built
- [x] Domain configuration defined
- [x] Batch processing implemented
- [x] Performance metrics tracking
- [x] Integration guide created
- [x] GitHub integration completed

### ðŸ”„ Ongoing Tasks
- [ ] Monitor performance metrics in production
- [ ] Adjust settings based on usage patterns
- [ ] Scale up as MDC system grows
- [ ] Integrate with CI/CD for automated optimization

## Performance Results

### Before Optimization
- CLAUDE.md: 658 lines, potential size issues
- Immediate updates on every change
- No relevance filtering
- No domain separation

### After Optimization
- âœ… CLAUDE.md: 4,287 chars (10.7% of 40KB limit) - **Optimal!**
- âœ… Batched updates (30-second intervals)
- âœ… Smart relevance scoring (41 MDC files analyzed)
- âœ… Domain-focused context loading
- âœ… Real-time performance monitoring

## Future Enhancements

### Planned Features
1. **AI-powered context generation** using LLMs
2. **Predictive context loading** based on usage patterns
3. **Advanced performance analytics** with machine learning
4. **Distributed context management** for large teams
5. **Integration with external monitoring tools**

### Scalability Considerations
- Support for 100+ MDC files
- Multi-project context management
- Cloud-based performance monitoring
- Advanced caching strategies

---

**Smart Context Optimization System is fully operational and ready for production use!** ðŸš€

**Last Updated**: 2025-08-24
**Version**: 1.0.0
**Status**: Production Ready
description:
globs:
alwaysApply: true
---
