# Backtestingserver - Merged MDC Configuration

## 🔗 Merged from 2 duplicate files
**Merged Files**: BacktestingServer.mdc, backtesting_server.mdc
**Merge Date**: 2025-08-27 10:39:58
**Primary Source**: BacktestingServer.mdc

## 📋 Primary Configuration
# Backtestingserver - Merged MDC Configuration

## 🔗 Merged from 2 duplicate files
**Merged Files**: BacktestingServer.mdc, backtesting_server.mdc
**Merge Date**: 2025-08-26 09:03:52
**Primary Source**: BacktestingServer.mdc

## 📋 Primary Configuration
# BacktestingServer.mdc

## Purpose
Backtesting and strategy validation service for ZmartBot trading system, providing comprehensive strategy testing and performance analysis capabilities.

## Core Functions
- **Strategy Backtesting**: Execute trading strategies against historical data
- **Performance Analysis**: Calculate key performance metrics and statistics
- **Strategy Validation**: Test strategy effectiveness and risk parameters
- **Results Management**: Store and retrieve backtesting results

## Service Architecture
- **Service Name**: zmart-backtesting
- **Default Port**: 8013
- **Host**: 127.0.0.1
- **Protocol**: HTTP/FastAPI
- **Version**: 1.0.0

## API Endpoints

### Health & Monitoring
- `GET /health` - Liveness probe endpoint
- `GET /ready` - Readiness probe endpoint
- `GET /metrics` - Service performance metrics

### Backtesting Operations
- `GET /api/v1/backtesting/status` - Get backtesting service status
- `POST /api/v1/backtesting/run` - Execute strategy backtest
- `GET /api/v1/backtesting/results/{strategy_id}` - Retrieve backtest results

## Performance Metrics
- **Total Trades**: Number of trades executed during backtest
- **Win Rate**: Percentage of profitable trades
- **Profit/Loss**: Total P&L from strategy execution
- **Sharpe Ratio**: Risk-adjusted return measurement
- **Maximum Drawdown**: Largest peak-to-trough decline

## Key Features
- **Strategy Testing**: Comprehensive strategy validation framework
- **Historical Analysis**: Execute strategies on historical market data
- **Risk Metrics**: Calculate risk-adjusted performance indicators
- **Trade Analysis**: Detailed trade-by-trade performance breakdown
- **CORS Support**: Full cross-origin request support

## Service Metrics
- **Strategies Tested**: 15+ strategies validated
- **Total Trades**: 2500+ trades analyzed
- **Average Win Rate**: 68% success rate
- **Target Sharpe Ratio**: 1.85+ risk-adjusted returns

## Dependencies
- FastAPI for REST API framework
- uvicorn for ASGI server hosting
- JSON for data serialization
- Standard Python logging infrastructure
- ZmartBot core system integration

## Service Registry Integration
- **Service ID**: zmart-backtesting
- **Health Check**: /health endpoint monitoring
- **Metrics Export**: /metrics endpoint for observability
- **Auto-discovery**: Kubernetes-compatible service registration

## Backtest Results Format
```json
{
  "strategy_id": "momentum_v1",
  "results": {
    "total_trades": 150,
    "win_rate": 0.72,
    "profit_loss": 2500.50,
    "sharpe_ratio": 1.95,
    "max_drawdown": -5.2,
    "trades": [
      {"date": "2025-08-25", "symbol": "BTCUSDT", "side": "BUY", "profit": 150.25}
    ]
  }
}
```

## Configuration
```python
SERVICE_CONFIG = {
    "name": "zmart-backtesting",
    "port": 8013,
    "host": "127.0.0.1",
    "version": "1.0.0"
}
```

## Strategy Input Format
```json
{
  "name": "momentum_strategy",
  "parameters": {
    "timeframe": "1h",
    "symbol": "BTCUSDT",
    "period": "30d",
    "indicators": ["RSI", "MACD", "EMA"]
  }
}
```

## Integration Points
- **Historical Data**: Market data for strategy execution
- **Analytics Service**: Technical indicators for strategy logic
- **Symbol Database**: Available trading pairs validation
- **Trading Engine**: Strategy deployment after validation
- **Performance Dashboard**: Results visualization

## Error Handling
- Strategy execution error recovery
- Invalid strategy parameter validation
- Resource limitation handling
- Graceful service degradation
- Comprehensive logging and monitoring

## Performance Characteristics
- **Startup Time**: < 5 seconds
- **Backtest Speed**: 1000+ trades per second processing
- **Memory Usage**: < 500MB for large datasets
- **CPU Usage**: Optimized for multi-core processing
- **Storage**: Efficient results caching

## Usage Example
```bash
# Start Backtesting Service
python backtesting_server.py --port 8013 --host 127.0.0.1

# Run strategy backtest
curl -X POST http://127.0.0.1:8013/api/v1/backtesting/run \
  -H "Content-Type: application/json" \
  -d '{"name": "momentum_v1", "symbol": "BTCUSDT"}'

# Get results
curl http://127.0.0.1:8013/api/v1/backtesting/results/momentum_v1
```

## Strategy Types Supported
- **Momentum Strategies**: Trend-following approaches
- **Mean Reversion**: Counter-trend strategies
- **Technical Indicators**: RSI, MACD, EMA-based strategies
- **Multi-timeframe**: Cross-timeframe analysis strategies
- **Risk Management**: Stop-loss and position sizing strategies

## Validation Framework
- **Historical Accuracy**: Realistic execution simulation
- **Slippage Modeling**: Market impact and execution costs
- **Commission Calculation**: Trading fee consideration
- **Risk Limits**: Maximum position and drawdown limits
- **Market Conditions**: Bull/bear market adaptation

## Security Features
- Strategy code validation
- Resource usage monitoring
- CORS middleware protection
- Input sanitization
- Execution environment isolation

## Monitoring & Observability
- Real-time backtest progress
- Performance metric tracking
- Error rate monitoring
- Resource utilization alerts
- Strategy success rate analytics

## Deployment Requirements
- Python 3.8+
- FastAPI framework
- uvicorn ASGI server
- Network access to port 8013
- Historical data access
- Sufficient CPU/memory for backtesting workloads

## 📄 Additional Content from backtesting_server.mdc
# backtesting_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8013

## Purpose
ZmartBot Backtesting Service
Backtesting and strategy validation service

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/backtesting/backtesting_server.py.py` | stop=`pkill -f backtesting_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8013** ✅ **ACTIVE** - network connection
- ****** ✅ **ACTIVE** - dependency connection

### Potential Connections
- **notification_server** ⏳ **POTENTIAL** - High-potential integration between BacktestingServer and notification_server - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ⏳ **POTENTIAL** - High-potential integration between BacktestingServer and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **START_zmartbot** ⏳ **POTENTIAL** - High-potential integration between BacktestingServer and START_zmartbot - Strong synergy opportunity (Confidence: 80%)
- **my-symbols-extended-service** ⏳ **POTENTIAL** - High-potential integration between BacktestingServer and my-symbols-extended-service - Strong synergy opportunity (Confidence: 80%)
- **kucoin_server** ⏳ **POTENTIAL** - High-potential integration between BacktestingServer and kucoin_server - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/backtesting/backtesting_server.py"]
alwaysApply: true
---

---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-26T09:03:52.865237

## 📄 Additional Content from backtesting_server.mdc
# backtesting_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8013

## Purpose
ZmartBot Backtesting Service
Backtesting and strategy validation service

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/backtesting/backtesting_server.py.py` | stop=`pkill -f backtesting_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8013** ✅ **ACTIVE** - network connection
- ****** ✅ **ACTIVE** - dependency connection

### Potential Connections
- **notification_server** ⏳ **POTENTIAL** - Moderate integration opportunity between backtesting_server and notification_server - Consider for future development (Confidence: 70%)
- **PortManagerService** ⏳ **POTENTIAL** - Moderate integration opportunity between backtesting_server and PortManagerService - Consider for future development (Confidence: 70%)
- **my-symbols-extended-service** ⏳ **POTENTIAL** - Moderate integration opportunity between backtesting_server and my-symbols-extended-service - Consider for future development (Confidence: 70%)
- **kucoin_server** ⏳ **POTENTIAL** - Moderate integration opportunity between backtesting_server and kucoin_server - Consider for future development (Confidence: 70%)
- **update-master-orchestration** ⏳ **POTENTIAL** - Moderate integration opportunity between backtesting_server and update-master-orchestration - Consider for future development (Confidence: 70%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/system_backups/initial_startup_backup/system_backups/initial_startup_backup/backtesting/backtesting_server.py"]
alwaysApply: true
---

---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-27T10:39:58.313485