# Analytics_Server - Merged MDC Configuration

## üîó Merged from 2 duplicate files
**Merged Files**: analytics_server.mdc, AnalyticsServer.mdc
**Merge Date**: 2025-08-27 10:39:58
**Primary Source**: analytics_server.mdc

## üìã Primary Configuration
# Analytics_Server - Merged MDC Configuration

## üîó Merged from 2 duplicate files
**Merged Files**: analytics_server.mdc, AnalyticsServer.mdc
**Merge Date**: 2025-08-26 09:03:52
**Primary Source**: analytics_server.mdc

## üìã Primary Configuration
# analytics_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8007

## Purpose
ZmartBot Analytics Service
Provides technical analysis and analytics data

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/analytics/analytics_server.py.py` | stop=`pkill -f analytics_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8007** ‚úÖ **ACTIVE** - network connection
- ****** ‚úÖ **ACTIVE** - dependency connection

### Potential Connections
- **notification_server** ‚è≥ **POTENTIAL** - High-potential integration between analytics_server and notification_server - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ‚è≥ **POTENTIAL** - High-potential integration between analytics_server and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **START_zmartbot** ‚è≥ **POTENTIAL** - High-potential integration between analytics_server and START_zmartbot - Strong synergy opportunity (Confidence: 80%)
- **my-symbols-extended-service** ‚è≥ **POTENTIAL** - High-potential integration between analytics_server and my-symbols-extended-service - Strong synergy opportunity (Confidence: 80%)
- **kucoin_server** ‚è≥ **POTENTIAL** - High-potential integration between analytics_server and kucoin_server - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/analytics/analytics_server.py"]
alwaysApply: true
---

## üìÑ Additional Content from AnalyticsServer.mdc
# AnalyticsServer.mdc

## Purpose
Technical analysis and analytics service for ZmartBot trading system, providing comprehensive market analysis and indicator calculations for trading decisions.

## Core Functions
- **Technical Analysis**: 21+ technical indicators per symbol
- **Market Analytics**: Comprehensive market sentiment analysis
- **Symbol Analysis**: Real-time technical data for all active symbols
- **Market Overview**: Aggregate market sentiment and trends

## Service Architecture
- **Service Name**: zmart-analytics
- **Default Port**: 8007
- **Host**: 127.0.0.1
- **Protocol**: HTTP/FastAPI
- **Version**: 1.0.0

## API Endpoints

### Health & Monitoring
- `GET /health` - Liveness probe endpoint
- `GET /ready` - Readiness probe with database connectivity check
- `GET /metrics` - Service metrics including active symbols count

### Technical Analysis
- `GET /api/technical/{symbol}` - Complete technical analysis for symbol
- `GET /api/analytics/symbols` - All symbols with analytics data
- `GET /api/analytics/market-overview` - Market sentiment analysis

## Technical Indicators Provided
- **RSI** (Relative Strength Index) with oversold/overbought signals
- **MACD** (Moving Average Convergence Divergence) with bullish/bearish signals
- **EMA** (Exponential Moving Average) with trend analysis
- **Bollinger Bands** (Upper, Middle, Lower bands)
- **Stochastic Oscillator** with momentum signals
- **Williams %R** for momentum analysis
- **ATR** (Average True Range) for volatility
- **ADX** (Average Directional Index) for trend strength
- **CCI** (Commodity Channel Index)
- **Parabolic SAR** for trend reversal points
- **Stochastic RSI** for fine-tuned momentum
- **Momentum** indicator for price velocity
- **Price Channels** (Upper/Lower resistance/support)
- **Fibonacci Levels** (0.618, 0.786, 1.0, 1.618)
- **Ichimoku Cloud** (Tenkan, Kijun, Senkou A/B)
- **Volume Analysis** with volume patterns
- **Price Patterns** recognition (double top, support levels)
- **Bollinger Squeeze** detection
- **RSI Divergence** analysis

## Key Features
- **Real-time Analysis**: Live technical indicator calculations
- **Database Integration**: SQLite connection to my_symbols_v2.db
- **Market Sentiment**: Aggregate bullish/bearish/neutral signals
- **Confidence Scoring**: Analysis confidence levels
- **Trend Identification**: Uptrend/downtrend classification
- **CORS Support**: Full cross-origin request support

## Dependencies
- **Database**: SQLite connection to symbols database
- **Framework**: FastAPI for REST API
- **Server**: uvicorn ASGI server
- **Analysis**: Custom technical indicator calculations
- **Logging**: Comprehensive error and performance logging

## Service Registry Integration
- **Service ID**: zmart-analytics
- **Health Check**: /health endpoint with database validation
- **Metrics Export**: Active symbols and analysis counts
- **Auto-discovery**: Kubernetes service discovery compatible

## Database Schema Integration
```sql
-- Connects to my_symbols_v2.db
SELECT symbol, exchange, status FROM my_symbols WHERE status = 'active'
```

## Analysis Output Format
```json
{
  "symbol": "BTCUSDT",
  "indicators": {
    "rsi": {"value": 45.2, "signal": "neutral"},
    "macd": {"value": 0.0012, "signal": "bullish"},
    "ema": {"value": 67150.25, "signal": "bearish"},
    "bollinger_bands": {"upper": 68340.0, "middle": 67000.0, "lower": 65660.0}
  },
  "summary": {
    "overall_signal": "bullish",
    "confidence": 75.5,
    "trend": "uptrend"
  }
}
```

## Market Sentiment Calculation
- **Bullish**: Count of symbols with bullish overall signal
- **Bearish**: Count of symbols with bearish overall signal
- **Neutral**: Count of symbols with neutral signal
- **Percentages**: Calculated distribution across all active symbols

## Configuration
```python
SERVICE_CONFIG = {
    "name": "zmart-analytics",
    "version": "1.0.0", 
    "port": 8007,
    "host": "127.0.0.1"
}
```

## Error Handling & Resilience
- Database connection failure handling
- Graceful degradation to default symbols
- Global exception handler for unhandled errors
- Service readiness validation
- Fallback data for disconnected database

## Integration Points
- **Symbol Database**: Active symbol list and metadata
- **Price Feeds**: Real-time price data for calculations
- **Trading Engine**: Technical signals for trading decisions
- **Alert System**: Threshold-based technical alerts
- **Dashboard**: Visual analytics display

## Performance Characteristics
- **Startup Time**: < 3 seconds
- **Response Time**: < 200ms per symbol analysis
- **Throughput**: 100+ analyses per second
- **Memory Usage**: < 200MB with full symbol set
- **Database**: SQLite for high-speed local queries

## Usage Example
```bash
# Start Analytics Service
python analytics_server.py --port 8007 --host 127.0.0.1

# Get technical analysis
curl http://127.0.0.1:8007/api/technical/BTCUSDT

# Get market overview
curl http://127.0.0.1:8007/api/analytics/market-overview
```

## Security Features
- Database path validation
- SQL injection prevention
- CORS middleware configuration
- Request/response logging
- Service authentication ready

## Deployment Requirements
- Python 3.8+
- FastAPI and uvicorn
- SQLite database access
- Network access to port 8007
- ZmartBot symbols database connectivity
- Sufficient CPU for real-time calculations

---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-26T09:03:52.869562

## üìÑ Additional Content from AnalyticsServer.mdc
# AnalyticsServer.mdc

## Purpose
Technical analysis and analytics service for ZmartBot trading system, providing comprehensive market analysis and indicator calculations for trading decisions.

## Core Functions
- **Technical Analysis**: 21+ technical indicators per symbol
- **Market Analytics**: Comprehensive market sentiment analysis
- **Symbol Analysis**: Real-time technical data for all active symbols
- **Market Overview**: Aggregate market sentiment and trends

## Service Architecture
- **Service Name**: zmart-analytics
- **Default Port**: 8007
- **Host**: 127.0.0.1
- **Protocol**: HTTP/FastAPI
- **Version**: 1.0.0

## API Endpoints

### Health & Monitoring
- `GET /health` - Liveness probe endpoint
- `GET /ready` - Readiness probe with database connectivity check
- `GET /metrics` - Service metrics including active symbols count

### Technical Analysis
- `GET /api/technical/{symbol}` - Complete technical analysis for symbol
- `GET /api/analytics/symbols` - All symbols with analytics data
- `GET /api/analytics/market-overview` - Market sentiment analysis

## Technical Indicators Provided
- **RSI** (Relative Strength Index) with oversold/overbought signals
- **MACD** (Moving Average Convergence Divergence) with bullish/bearish signals
- **EMA** (Exponential Moving Average) with trend analysis
- **Bollinger Bands** (Upper, Middle, Lower bands)
- **Stochastic Oscillator** with momentum signals
- **Williams %R** for momentum analysis
- **ATR** (Average True Range) for volatility
- **ADX** (Average Directional Index) for trend strength
- **CCI** (Commodity Channel Index)
- **Parabolic SAR** for trend reversal points
- **Stochastic RSI** for fine-tuned momentum
- **Momentum** indicator for price velocity
- **Price Channels** (Upper/Lower resistance/support)
- **Fibonacci Levels** (0.618, 0.786, 1.0, 1.618)
- **Ichimoku Cloud** (Tenkan, Kijun, Senkou A/B)
- **Volume Analysis** with volume patterns
- **Price Patterns** recognition (double top, support levels)
- **Bollinger Squeeze** detection
- **RSI Divergence** analysis

## Key Features
- **Real-time Analysis**: Live technical indicator calculations
- **Database Integration**: SQLite connection to my_symbols_v2.db
- **Market Sentiment**: Aggregate bullish/bearish/neutral signals
- **Confidence Scoring**: Analysis confidence levels
- **Trend Identification**: Uptrend/downtrend classification
- **CORS Support**: Full cross-origin request support

## Dependencies
- **Database**: SQLite connection to symbols database
- **Framework**: FastAPI for REST API
- **Server**: uvicorn ASGI server
- **Analysis**: Custom technical indicator calculations
- **Logging**: Comprehensive error and performance logging

## Service Registry Integration
- **Service ID**: zmart-analytics
- **Health Check**: /health endpoint with database validation
- **Metrics Export**: Active symbols and analysis counts
- **Auto-discovery**: Kubernetes service discovery compatible

## Database Schema Integration
```sql
-- Connects to my_symbols_v2.db
SELECT symbol, exchange, status FROM my_symbols WHERE status = 'active'
```

## Analysis Output Format
```json
{
  "symbol": "BTCUSDT",
  "indicators": {
    "rsi": {"value": 45.2, "signal": "neutral"},
    "macd": {"value": 0.0012, "signal": "bullish"},
    "ema": {"value": 67150.25, "signal": "bearish"},
    "bollinger_bands": {"upper": 68340.0, "middle": 67000.0, "lower": 65660.0}
  },
  "summary": {
    "overall_signal": "bullish",
    "confidence": 75.5,
    "trend": "uptrend"
  }
}
```

## Market Sentiment Calculation
- **Bullish**: Count of symbols with bullish overall signal
- **Bearish**: Count of symbols with bearish overall signal
- **Neutral**: Count of symbols with neutral signal
- **Percentages**: Calculated distribution across all active symbols

## Configuration
```python
SERVICE_CONFIG = {
    "name": "zmart-analytics",
    "version": "1.0.0", 
    "port": 8007,
    "host": "127.0.0.1"
}
```

## Error Handling & Resilience
- Database connection failure handling
- Graceful degradation to default symbols
- Global exception handler for unhandled errors
- Service readiness validation
- Fallback data for disconnected database

## Integration Points
- **Symbol Database**: Active symbol list and metadata
- **Price Feeds**: Real-time price data for calculations
- **Trading Engine**: Technical signals for trading decisions
- **Alert System**: Threshold-based technical alerts
- **Dashboard**: Visual analytics display

## Performance Characteristics
- **Startup Time**: < 3 seconds
- **Response Time**: < 200ms per symbol analysis
- **Throughput**: 100+ analyses per second
- **Memory Usage**: < 200MB with full symbol set
- **Database**: SQLite for high-speed local queries

## Usage Example
```bash
# Start Analytics Service
python analytics_server.py --port 8007 --host 127.0.0.1

# Get technical analysis
curl http://127.0.0.1:8007/api/technical/BTCUSDT

# Get market overview
curl http://127.0.0.1:8007/api/analytics/market-overview
```

## Security Features
- Database path validation
- SQL injection prevention
- CORS middleware configuration
- Request/response logging
- Service authentication ready

## Deployment Requirements
- Python 3.8+
- FastAPI and uvicorn
- SQLite database access
- Network access to port 8007
- ZmartBot symbols database connectivity
- Sufficient CPU for real-time calculations

---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-27T10:39:58.320026