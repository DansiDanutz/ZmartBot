# Binance_Worker_Server - Merged MDC Configuration

## üîó Merged from 2 duplicate files
**Merged Files**: binance_worker_server.mdc, binance-worker-service.mdc
**Merge Date**: 2025-08-27 10:39:58
**Primary Source**: binance_worker_server.mdc

## üìã Primary Configuration
# Binance_Worker_Server - Merged MDC Configuration

## üîó Merged from 2 duplicate files
**Merged Files**: binance_worker_server.mdc, binance-worker-service.mdc
**Merge Date**: 2025-08-26 09:03:52
**Primary Source**: binance_worker_server.mdc

## üìã Primary Configuration
# binance_worker_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8303

## Purpose
Market data structure

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/binance_worker/binance_worker_server.py.py` | stop=`pkill -f binance_worker_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8303** ‚úÖ **ACTIVE** - network connection
- ****** ‚úÖ **ACTIVE** - dependency connection

### Potential Connections
- **zmart-alert-system** ‚è≥ **POTENTIAL** - High-potential integration between binance_worker_server and zmart-alert-system - Strong synergy opportunity (Confidence: 80%)
- **notification_server** ‚è≥ **POTENTIAL** - High-potential integration between binance_worker_server and notification_server - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ‚è≥ **POTENTIAL** - High-potential integration between binance_worker_server and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **START_zmartbot** ‚è≥ **POTENTIAL** - High-potential integration between binance_worker_server and START_zmartbot - Strong synergy opportunity (Confidence: 80%)
- **my-symbols-extended-service** ‚è≥ **POTENTIAL** - High-potential integration between binance_worker_server and my-symbols-extended-service - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/binance_worker/binance_worker_server.py"]
alwaysApply: true
---

## üìÑ Additional Content from binance-worker-service.mdc
# Binance Worker Service

## Overview
binance-worker-service service for ZmartBot platform

## Architecture

### Service Type
- **Type**: Backend Service
- **Port**: unknown
- **Framework**: FastAPI/Flask with async support
- **Communication**: REST API

### Core Components
1. **Service Core**: Main service functionality
2. **Health Monitoring**: Health and readiness endpoints
3. **API Layer**: REST API endpoints
4. **Data Management**: Data processing and storage

## Core Functions

### Service Operations
- **Health Monitoring**: Service health and readiness checks
- **API Endpoints**: REST API for service functionality
- **Data Processing**: Core service data operations
- **Integration**: Integration with other ZmartBot services

## Service Dependencies

### Required Services
- **zmart-api** (Port 8000): Main API service for coordination

### External Dependencies
- **Environment Variables**: Service configuration
- **Database**: Data storage and retrieval

## Environment Variables

### Required Variables
```bash
# Service-specific environment variables
SERVICE_ENV=production
```

## API Endpoints

### Health & Monitoring
- `GET /health` - Service health check
- `GET /ready` - Service readiness check
- `GET /metrics` - Service metrics and statistics

### Service Endpoints
- `GET /api/v1/binance-worker-service` - Main service endpoint
- `POST /api/v1/binance-worker-service` - Service operations

## Request/Response Formats

### Health Check Response
```json
{
  "status": "healthy",
  "timestamp": "2025-08-26T00:00:00.000Z",
  "service": "binance-worker-service",
  "version": "1.0.0"
}
```

## Port Ranges

### Service Port Assignment
- **Port**: unknown
- **Range**: Based on service type
- **Purpose**: backend service operations

## Health & Monitoring

### Health Checks
- **Liveness**: `/health` endpoint returns 200 OK
- **Readiness**: `/ready` endpoint checks service readiness
- **Metrics**: `/metrics` provides service statistics

## Failure Modes & Recovery

### Service Failure
- **Symptoms**: Service not responding, health checks failing
- **Detection**: Health check failures, API timeouts
- **Recovery**: Service restart, dependency verification

## Configuration

### Service Configuration
```yaml
service_name: binance-worker-service
service_type: backend
port: unknown
version: 1.0.0
```

## Deployment Requirements

### System Requirements
- **Python**: 3.8+
- **Memory**: 512MB minimum
- **CPU**: 1 core minimum
- **Network**: Stable internet connection

## Integration Points

### Internal Services
- **zmart-api**: Main API coordination
- **Other services**: Service-specific integrations

## Security

### API Security
- **Authentication**: Service-specific authentication
- **Authorization**: Role-based access control
- **Data Protection**: Secure data handling

## Development

### Local Development
```bash
cd zmart-api/binance_worker_service
python3 binance_worker_service_server.py --port unknown
```

### Testing
```bash
# Health check
curl http://localhost:unknown/health

# Service endpoint
curl http://localhost:unknown/api/v1/binance-worker-service
```

## Lifecycle Management

### Startup Sequence
1. **Service Initialization**: Load configuration and dependencies
2. **Health Check**: Verify service readiness
3. **API Startup**: Start REST API server
4. **Service Ready**: Service ready for requests

### Shutdown Sequence
1. **Graceful Shutdown**: Stop accepting new requests
2. **Resource Cleanup**: Clean up resources and connections
3. **Service Termination**: Complete shutdown

---

**Service Version**: 1.0.0  
**Last Updated**: 2025-08-26  
**Status**: ACTIVE  
**Owner**: ZmartBot Development Team  
**Generated by**: MDCAgent (Fallback Template)  
**Generation Timestamp**: 2025-08-26T05:48:06.966890


---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-26T09:03:52.862521

## üìÑ Additional Content from binance-worker-service.mdc
# Binance Worker Service

## Overview
binance-worker-service service for ZmartBot platform

## Architecture

### Service Type
- **Type**: Backend Service
- **Port**: unknown
- **Framework**: FastAPI/Flask with async support
- **Communication**: REST API

### Core Components
1. **Service Core**: Main service functionality
2. **Health Monitoring**: Health and readiness endpoints
3. **API Layer**: REST API endpoints
4. **Data Management**: Data processing and storage

## Core Functions

### Service Operations
- **Health Monitoring**: Service health and readiness checks
- **API Endpoints**: REST API for service functionality
- **Data Processing**: Core service data operations
- **Integration**: Integration with other ZmartBot services

## Service Dependencies

### Required Services
- **zmart-api** (Port 8000): Main API service for coordination

### External Dependencies
- **Environment Variables**: Service configuration
- **Database**: Data storage and retrieval

## Environment Variables

### Required Variables
```bash
# Service-specific environment variables
SERVICE_ENV=production
```

## API Endpoints

### Health & Monitoring
- `GET /health` - Service health check
- `GET /ready` - Service readiness check
- `GET /metrics` - Service metrics and statistics

### Service Endpoints
- `GET /api/v1/binance-worker-service` - Main service endpoint
- `POST /api/v1/binance-worker-service` - Service operations

## Request/Response Formats

### Health Check Response
```json
{
  "status": "healthy",
  "timestamp": "2025-08-26T00:00:00.000Z",
  "service": "binance-worker-service",
  "version": "1.0.0"
}
```

## Port Ranges

### Service Port Assignment
- **Port**: unknown
- **Range**: Based on service type
- **Purpose**: backend service operations

## Health & Monitoring

### Health Checks
- **Liveness**: `/health` endpoint returns 200 OK
- **Readiness**: `/ready` endpoint checks service readiness
- **Metrics**: `/metrics` provides service statistics

## Failure Modes & Recovery

### Service Failure
- **Symptoms**: Service not responding, health checks failing
- **Detection**: Health check failures, API timeouts
- **Recovery**: Service restart, dependency verification

## Configuration

### Service Configuration
```yaml
service_name: binance-worker-service
service_type: backend
port: unknown
version: 1.0.0
```

## Deployment Requirements

### System Requirements
- **Python**: 3.8+
- **Memory**: 512MB minimum
- **CPU**: 1 core minimum
- **Network**: Stable internet connection

## Integration Points

### Internal Services
- **zmart-api**: Main API coordination
- **Other services**: Service-specific integrations

## Security

### API Security
- **Authentication**: Service-specific authentication
- **Authorization**: Role-based access control
- **Data Protection**: Secure data handling

## Development

### Local Development
```bash
cd zmart-api/binance_worker_service
python3 binance_worker_service_server.py --port unknown
```

### Testing
```bash
# Health check
curl http://localhost:unknown/health

# Service endpoint
curl http://localhost:unknown/api/v1/binance-worker-service
```

## Lifecycle Management

### Startup Sequence
1. **Service Initialization**: Load configuration and dependencies
2. **Health Check**: Verify service readiness
3. **API Startup**: Start REST API server
4. **Service Ready**: Service ready for requests

### Shutdown Sequence
1. **Graceful Shutdown**: Stop accepting new requests
2. **Resource Cleanup**: Clean up resources and connections
3. **Service Termination**: Complete shutdown

---

**Service Version**: 1.0.0  
**Last Updated**: 2025-08-26  
**Status**: ACTIVE  
**Owner**: ZmartBot Development Team  
**Generated by**: MDCAgent (Fallback Template)  
**Generation Timestamp**: 2025-08-26T05:48:06.966890


---
**Merge Summary**: Combined 2 files into unified MDC configuration
**Generated**: 2025-08-27T10:39:58.311413