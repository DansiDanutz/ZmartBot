# Mysymbols_Server - Merged MDC Configuration

## üîó Merged from 3 duplicate files
**Merged Files**: mysymbols_server.mdc, MySymbolsService.mdc, MySymbols.mdc
**Merge Date**: 2025-08-27 10:39:58
**Primary Source**: mysymbols_server.mdc

## üìã Primary Configuration
# Mysymbols_Server - Merged MDC Configuration

## üîó Merged from 3 duplicate files
**Merged Files**: mysymbols_server.mdc, MySymbolsService.mdc, MySymbols.mdc
**Merge Date**: 2025-08-26 09:03:52
**Primary Source**: mysymbols_server.mdc

## üìã Primary Configuration
# mysymbols_server.mdc
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8201

## Purpose
Get database connection

## Overview
Auto-discovered service managed by MDC-Dashboard system. This service was identified during automated system scanning and requires manual review and enhancement.

## Critical Functions
- Auto-discovered service functionality (requires manual documentation)
- Service integration with ZmartBot ecosystem

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** To be determined
- **Env Vars:** To be determined  
- **Lifecycle:** start=`python3 /Users/dansidanutz/Desktop/ZmartBot/zmart-api/mysymbols/mysymbols_server.py.py` | stop=`pkill -f mysymbols_server` | migrate=`n/a`

## API Endpoints
*Endpoints to be documented during manual review*

## Health & Readiness
- Liveness: To be configured
- Readiness: To be configured
- Timeouts: startup_grace=30s, http_timeout=30s

## Observability
- Metrics: To be configured
- Logs: format=python-logging
- Dashboards: To be created



## Service Connections & Dependencies

### Current Active Connections
- **port-8201** ‚úÖ **ACTIVE** - network connection
- ****** ‚úÖ **ACTIVE** - dependency connection

### Potential Connections
- **notification_server** ‚è≥ **POTENTIAL** - High-potential integration between mysymbols_server and notification_server - Strong synergy opportunity (Confidence: 80%)
- **PortManagerService** ‚è≥ **POTENTIAL** - High-potential integration between mysymbols_server and PortManagerService - Strong synergy opportunity (Confidence: 80%)
- **START_zmartbot** ‚è≥ **POTENTIAL** - High-potential integration between mysymbols_server and START_zmartbot - Strong synergy opportunity (Confidence: 80%)
- **my-symbols-extended-service** ‚è≥ **POTENTIAL** - High-potential integration between mysymbols_server and my-symbols-extended-service - Strong synergy opportunity (Confidence: 80%)
- **kucoin_server** ‚è≥ **POTENTIAL** - High-potential integration between mysymbols_server and kucoin_server - Strong synergy opportunity (Confidence: 80%)

### Priority Connections
*Will be populated automatically during Phase 4 if service qualifies for top 10 priority services*

### Connection Summary
- **Current Active**: 2
- **Potential**: 5  
- **Priority**: 0
- **Total Discovered**: 2
- **Last Discovery Scan**: Auto-updated on system initialization
- **Discovery Method**: Multi-phase automated analysis with diamond pattern extraction
- **Update Policy**: Real-time updates during workflow execution
## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: No
- Ordering Hints: To be determined

## Performance & SLO
- Baseline p95 (ms): To be measured
- Notes: Auto-discovered service requiring performance baseline establishment

## Failure Modes & Runbooks
*To be documented during manual review*

## Rollback
- Snapshot required: To be determined
- Playbook: To be determined

## Load Balancing
- Enabled: To be determined
- Pool: To be determined

## Known Issues
- Auto-generated MDC file requiring manual review and enhancement
- Service functionality and dependencies need documentation

## Changelog
- 1.0.0 (2025-08-26): Auto-discovered service, MDC file generated by MDC-Dashboard system

---
*Auto-generated by MDC-Dashboard orphan service discovery on 2025-08-26*
description: Auto-discovered service requiring manual documentation
globs: ["/Users/dansidanutz/Desktop/ZmartBot/zmart-api/mysymbols/mysymbols_server.py"]
alwaysApply: true
---

## üìÑ Additional Content from MySymbolsService.mdc
# üóÑÔ∏è My Symbols Service - Portfolio Management Database

## Purpose
My Symbols service manages the core portfolio database, symbol tracking, and portfolio analytics for ZmartBot trading operations.

## Critical Functions
- **Portfolio Management**: Symbol portfolio tracking and management
- **Symbol Data**: Comprehensive symbol information and metadata
- **Portfolio Analytics**: Portfolio performance and risk analysis
- **Data Persistence**: Reliable data storage and retrieval
- **Real-time Updates**: Live portfolio updates and synchronization
- **Historical Data**: Historical portfolio and symbol data

## Database Schema
- **Symbols Table**: Core symbol information and metadata
- **Portfolio Table**: Portfolio composition and tracking
- **Performance Table**: Performance metrics and analytics
- **Risk Table**: Risk metrics and position data
- **History Table**: Historical data and audit trails

## Key Features
- **Portfolio Tracking**: Real-time portfolio monitoring
- **Symbol Management**: Comprehensive symbol data management
- **Performance Analytics**: Portfolio performance analysis
- **Risk Management**: Portfolio risk metrics and monitoring
- **Data Integrity**: ACID compliance and data validation
- **Backup & Recovery**: Automated backup and recovery procedures

## Portfolio Management
- **Symbol Addition**: Add new symbols to portfolio
- **Symbol Removal**: Remove symbols from portfolio
- **Position Tracking**: Real-time position monitoring
- **Performance Tracking**: Portfolio performance metrics
- **Risk Monitoring**: Portfolio risk assessment

## Data Operations
- **CRUD Operations**: Create, read, update, delete operations
- **Bulk Operations**: Efficient bulk data operations
- **Query Optimization**: Optimized database queries
- **Indexing**: Strategic database indexing for performance
- **Caching**: Intelligent data caching strategies

## Analytics & Reporting
- **Performance Metrics**: Portfolio performance calculations
- **Risk Analytics**: Risk assessment and analysis
- **Trend Analysis**: Portfolio trend identification
- **Comparative Analysis**: Benchmark and comparison analysis
- **Reporting**: Automated report generation

## Integration
- **Trading Engine**: Portfolio data for trading decisions
- **Risk Manager**: Portfolio risk data integration
- **Analytics Engine**: Portfolio analytics and reporting
- **Frontend Dashboard**: Portfolio display and visualization
- **Alert System**: Portfolio-based alerts and notifications

## Configuration
- **Database Settings**: Database connection and configuration
- **Performance Settings**: Query optimization settings
- **Backup Settings**: Backup frequency and retention
- **Security Settings**: Database security and access control
- **Monitoring Settings**: Database monitoring and alerting

## Status
‚úÖ **ACTIVE** - Core portfolio management service with comprehensive database functionality

description:
globs:
alwaysApply: true
---


## üìÑ Additional Content from MySymbols.mdc
@agent: SymbolValidator

# MySymbols - Trading Symbol Management System

## Overview
**MySymbols** represents the **core trading portfolio** of the ZmartBot project, consisting of a **maximum of 10 symbols** selected from Binance and KuCoin Future markets. These symbols are the **only ones traded, receiving alerts, and under continuous watch** by the system.

## Symbol Selection Criteria

### **Exchange Requirements**
- **Binance Futures**: Must be available on Binance Futures market
- **KuCoin Futures**: Must be available on KuCoin Futures market
- **Cross-Exchange**: Symbols must exist on both exchanges for arbitrage opportunities
- **Liquidity**: High trading volume and liquidity requirements

### **Symbol Validation**
```python
def validate_symbol_for_mysymbols(symbol):
    """Validate symbol for MySymbols inclusion"""
    # Check Binance Futures availability
    binance_available = check_binance_futures(symbol)
    
    # Check KuCoin Futures availability
    kucoin_available = check_kucoin_futures(symbol)
    
    # Check liquidity requirements
    liquidity_ok = check_liquidity_requirements(symbol)
    
    # Check trading volume
    volume_ok = check_trading_volume(symbol)
    
    return binance_available and kucoin_available and liquidity_ok and volume_ok
```

## MySymbols Database Structure

### **Core Database**
- **Location**: `src/data/my_symbols.db`
- **Type**: SQLite database
- **Purpose**: Store MySymbols with all indicators and market data
- **Max Symbols**: 10 symbols maximum

### **Database Schema**
```sql
-- MySymbols main table
CREATE TABLE my_symbols (
    id INTEGER PRIMARY KEY,
    symbol TEXT NOT NULL UNIQUE,
    exchange_binance BOOLEAN DEFAULT TRUE,
    exchange_kucoin BOOLEAN DEFAULT TRUE,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'ACTIVE',
    priority INTEGER DEFAULT 0,
    description TEXT
);

-- Current market prices
CREATE TABLE symbol_prices (
    id INTEGER PRIMARY KEY,
    symbol_id INTEGER,
    price REAL NOT NULL,
    change_24h REAL,
    volume_24h REAL,
    high_24h REAL,
    low_24h REAL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (symbol_id) REFERENCES my_symbols(id)
);

-- Technical indicators
CREATE TABLE symbol_indicators (
    id INTEGER PRIMARY KEY,
    symbol_id INTEGER,
    indicator_name TEXT NOT NULL,
    indicator_value REAL,
    indicator_data JSON,
    timeframe TEXT DEFAULT '1h',
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (symbol_id) REFERENCES my_symbols(id)
);

-- Alert history
CREATE TABLE symbol_alerts (
    id INTEGER PRIMARY KEY,
    symbol_id INTEGER,
    alert_type TEXT NOT NULL,
    alert_message TEXT,
    alert_value REAL,
    triggered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    acknowledged BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (symbol_id) REFERENCES my_symbols(id)
);
```

## Dynamic Symbol Management & Service Impact

### **Database-Driven Dynamic Changes**
The MySymbols system is **dynamically driven by the MySymbolsDatabase**, and any changes to the symbol portfolio have **major impacts on all system services**. When symbols are added, replaced, or deleted, the entire system architecture must adapt to maintain consistency and functionality.

### **Service Impact Overview**
```python
class MySymbolsServiceImpact:
    """Manages the impact of symbol changes on all system services"""
    
    def __init__(self):
        self.affected_services = [
            '21indicators_database',
            'live_alerts_system', 
            'technical_analysis',
            'market_data_collection',
            'frontend_components',
            'trading_systems',
            'master_orchestration_agent'
        ]
    
    def assess_symbol_change_impact(self, action, symbol, old_symbol=None):
        """Assess the impact of symbol changes across all services"""
        impact_report = {
            'action': action,  # 'ADD', 'REPLACE', 'DELETE'
            'symbol': symbol,
            'old_symbol': old_symbol,
            'timestamp': datetime.now(),
            'services_affected': [],
            'impact_level': 'HIGH',
            'requires_coordination': True
        }
        
        for service in self.affected_services:
            impact_report['services_affected'].append({
                'service': service,
                'impact': self.get_service_impact(service, action),
                'update_required': True,
                'priority': 'IMMEDIATE'
            })
        
        return impact_report
```

### **Add Symbol**
```python
def add_symbol_to_mysymbols(symbol, priority=0, description=""):
    """Add new symbol to MySymbols (max 10) with full service impact"""
    # Check current count
    current_count = get_mysymbols_count()
    
    if current_count >= 10:
        raise ValueError("Maximum 10 symbols allowed in MySymbols")
    
    # Validate symbol
    if not validate_symbol_for_mysymbols(symbol):
        raise ValueError(f"Symbol {symbol} does not meet requirements")
    
    # Assess service impact before adding
    impact_assessor = MySymbolsServiceImpact()
    impact_report = impact_assessor.assess_symbol_change_impact('ADD', symbol)
    
    # Add symbol to database
    query = """
    INSERT INTO my_symbols (symbol, priority, description)
    VALUES (?, ?, ?)
    """
    execute_query(query, (symbol, priority, description))
    
    # Initialize indicators
    initialize_symbol_indicators(symbol)
    
    # Trigger system-wide updates
    trigger_symbol_addition_updates(symbol, impact_report)
    
    return True

def trigger_symbol_addition_updates(symbol, impact_report):
    """Trigger updates across all affected services when symbol is added"""
    
    # Update 21 Indicators Database
    update_21indicators_for_new_symbol(symbol)
    
    # Update Live Alerts System
    update_live_alerts_for_new_symbol(symbol)
    
    # Update Technical Analysis Services
    update_technical_analysis_for_new_symbol(symbol)
    
    # Update Market Data Collection
    update_market_data_collection_for_new_symbol(symbol)
    
    # Update Frontend Components
    update_frontend_components_for_new_symbol(symbol)
    
    # Update Trading Systems
    update_trading_systems_for_new_symbol(symbol)
    
    # Notify Master Orchestration Agent
    notify_master_orchestration_symbol_change(symbol, 'ADDED', impact_report)
```

### **Remove Symbol**
```python
def remove_symbol_from_mysymbols(symbol):
    """Remove symbol from MySymbols with full service impact"""
    # Check if symbol exists
    if not symbol_exists_in_mysymbols(symbol):
        raise ValueError(f"Symbol {symbol} not found in MySymbols")
    
    # Assess service impact before removing
    impact_assessor = MySymbolsServiceImpact()
    impact_report = impact_assessor.assess_symbol_change_impact('DELETE', symbol)
    
    # Get symbol data before deletion
    symbol_data = get_symbol_data(symbol)
    symbol_id = get_symbol_id(symbol)
    
    # Trigger system-wide removal updates
    trigger_symbol_removal_updates(symbol, symbol_data, impact_report)
    
    # Delete related data
    delete_symbol_prices(symbol_id)
    delete_symbol_indicators(symbol_id)
    delete_symbol_alerts(symbol_id)
    
    # Delete symbol
    query = "DELETE FROM my_symbols WHERE symbol = ?"
    execute_query(query, (symbol,))
    
    return True

def trigger_symbol_removal_updates(symbol, symbol_data, impact_report):
    """Trigger updates across all affected services when symbol is removed"""
    
    # Remove from 21 Indicators Database
    remove_symbol_from_21indicators(symbol)
    
    # Remove from Live Alerts System
    remove_symbol_from_live_alerts(symbol)
    
    # Remove from Technical Analysis Services
    remove_symbol_from_technical_analysis(symbol)
    
    # Remove from Market Data Collection
    remove_symbol_from_market_data_collection(symbol)
    
    # Remove from Frontend Components
    remove_symbol_from_frontend_components(symbol)
    
    # Remove from Trading Systems
    remove_symbol_from_trading_systems(symbol)
    
    # Clean up historical data
    cleanup_symbol_historical_data(symbol)
    
    # Notify Master Orchestration Agent
    notify_master_orchestration_symbol_change(symbol, 'DELETED', impact_report)
```

### **Replace Symbol**
```python
def replace_symbol_in_mysymbols(old_symbol, new_symbol):
    """Replace symbol while maintaining data integrity and service coordination"""
    # Validate new symbol
    if not validate_symbol_for_mysymbols(new_symbol):
        raise ValueError(f"Symbol {new_symbol} does not meet requirements")
    
    # Assess service impact before replacing
    impact_assessor = MySymbolsServiceImpact()
    impact_report = impact_assessor.assess_symbol_change_impact('REPLACE', new_symbol, old_symbol)
    
    # Get old symbol data
    old_symbol_data = get_symbol_data(old_symbol)
    
    # Trigger system-wide replacement updates
    trigger_symbol_replacement_updates(old_symbol, new_symbol, old_symbol_data, impact_report)
    
    # Remove old symbol
    remove_symbol_from_mysymbols(old_symbol)
    
    # Add new symbol with same priority
    add_symbol_to_mysymbols(
        new_symbol, 
        priority=old_symbol_data['priority'],
        description=old_symbol_data['description']
    )
    
    return True

def trigger_symbol_replacement_updates(old_symbol, new_symbol, old_symbol_data, impact_report):
    """Trigger updates across all affected services when symbol is replaced"""
    
    # Replace in 21 Indicators Database
    replace_symbol_in_21indicators(old_symbol, new_symbol)
    
    # Replace in Live Alerts System
    replace_symbol_in_live_alerts(old_symbol, new_symbol)
    
    # Replace in Technical Analysis Services
    replace_symbol_in_technical_analysis(old_symbol, new_symbol)
    
    # Replace in Market Data Collection
    replace_symbol_in_market_data_collection(old_symbol, new_symbol)
    
    # Replace in Frontend Components
    replace_symbol_in_frontend_components(old_symbol, new_symbol)
    
    # Replace in Trading Systems
    replace_symbol_in_trading_systems(old_symbol, new_symbol)
    
    # Migrate historical data
    migrate_symbol_historical_data(old_symbol, new_symbol)
    
    # Notify Master Orchestration Agent
    notify_master_orchestration_symbol_change(new_symbol, 'REPLACED', impact_report, old_symbol)
```

## Indicator Management

### **21 Technical Indicators**
```python
INDICATORS = {
    "RSI": "Relative Strength Index",
    "MACD": "Moving Average Convergence Divergence",
    "BB": "Bollinger Bands",
    "EMA": "Exponential Moving Average",
    "SMA": "Simple Moving Average",
    "STOCH": "Stochastic Oscillator",
    "ATR": "Average True Range",
    "CCI": "Commodity Channel Index",
    "ADX": "Average Directional Index",
    "OBV": "On-Balance Volume",
    "VWAP": "Volume Weighted Average Price",
    "WILLIAMS_R": "Williams %R",
    "ROC": "Rate of Change",
    "MFI": "Money Flow Index",
    "DMI": "Directional Movement Index",
    "PARABOLIC_SAR": "Parabolic SAR",
    "AROON": "Aroon Indicator",
    "MOMENTUM": "Momentum Indicator",
    "TRIX": "TRIX Indicator",
    "ULTIMATE_OSCILLATOR": "Ultimate Oscillator",
    "KELTNER_CHANNEL": "Keltner Channel"
}
```

### **Indicator Updates**
```python
def update_symbol_indicators(symbol):
    """Update all indicators for a symbol"""
    symbol_id = get_symbol_id(symbol)
    
    for indicator_name in INDICATORS:
        # Calculate indicator value
        indicator_value = calculate_indicator(symbol, indicator_name)
        
        # Store in database
        query = """
        INSERT OR REPLACE INTO symbol_indicators 
        (symbol_id, indicator_name, indicator_value, timestamp)
        VALUES (?, ?, ?, CURRENT_TIMESTAMP)
        """
        execute_query(query, (symbol_id, indicator_name, indicator_value))
```

## Market Data Integration

### **Real-time Price Updates**
```python
def update_symbol_price(symbol):
    """Update current market price for symbol"""
    symbol_id = get_symbol_id(symbol)
    
    # Get price from both exchanges
    binance_price = get_binance_price(symbol)
    kucoin_price = get_kucoin_price(symbol)
    
    # Use weighted average or preferred exchange
    current_price = calculate_weighted_price(binance_price, kucoin_price)
    
    # Store price data
    query = """
    INSERT INTO symbol_prices 
    (symbol_id, price, change_24h, volume_24h, high_24h, low_24h)
    VALUES (?, ?, ?, ?, ?, ?)
    """
    execute_query(query, (symbol_id, current_price, change_24h, volume_24h, high_24h, low_24h))
```

### **Cross-Exchange Data**
```python
def get_cross_exchange_data(symbol):
    """Get data from both Binance and KuCoin"""
    return {
        "binance": {
            "price": get_binance_futures_price(symbol),
            "volume": get_binance_futures_volume(symbol),
            "open_interest": get_binance_open_interest(symbol)
        },
        "kucoin": {
            "price": get_kucoin_futures_price(symbol),
            "volume": get_kucoin_futures_volume(symbol),
            "open_interest": get_kucoin_open_interest(symbol)
        }
    }
```

## Alert System Integration

### **Symbol-Specific Alerts**
```python
def create_symbol_alert(symbol, alert_type, message, value=None):
    """Create alert for specific symbol"""
    symbol_id = get_symbol_id(symbol)
    
    query = """
    INSERT INTO symbol_alerts 
    (symbol_id, alert_type, alert_message, alert_value)
    VALUES (?, ?, ?, ?)
    """
    execute_query(query, (symbol_id, alert_type, message, value))
    
    # Trigger alert notification
    trigger_alert_notification(symbol, alert_type, message)
```

### **Alert Types**
```python
ALERT_TYPES = {
    "PRICE_BREAKOUT": "Price breakout above/below key levels",
    "INDICATOR_SIGNAL": "Technical indicator signals",
    "VOLUME_SPIKE": "Unusual volume activity",
    "LIQUIDATION_EVENT": "Large liquidation events",
    "RISK_ALERT": "Risk management alerts",
    "PATTERN_RECOGNITION": "Chart pattern recognition",
    "CROSS_SIGNAL": "Indicator cross-signals",
    "WIN_RATIO_UPDATE": "Win ratio analysis updates"
}
```

## Trading Integration

### **Exclusive Trading**
```python
def is_symbol_tradeable(symbol):
    """Check if symbol is in MySymbols and tradeable"""
    return symbol_exists_in_mysymbols(symbol) and get_symbol_status(symbol) == 'ACTIVE'
```

### **Portfolio Management**
```python
def get_mysymbols_portfolio():
    """Get current portfolio status for all MySymbols"""
    symbols = get_all_mysymbols()
    portfolio = {}
    
    for symbol in symbols:
        portfolio[symbol] = {
            "current_price": get_current_price(symbol),
            "indicators": get_all_indicators(symbol),
            "alerts": get_active_alerts(symbol),
            "position": get_current_position(symbol),
            "risk_score": calculate_risk_score(symbol)
        }
    
    return portfolio
```

## Database Queries

### **Get All MySymbols**
```sql
SELECT 
    symbol,
    exchange_binance,
    exchange_kucoin,
    status,
    priority,
    last_updated
FROM my_symbols
ORDER BY priority DESC, symbol;
```

### **Get Symbol with Indicators**
```sql
SELECT 
    m.symbol,
    m.status,
    i.indicator_name,
    i.indicator_value,
    i.timestamp
FROM my_symbols m
JOIN symbol_indicators i ON m.id = i.symbol_id
WHERE m.symbol = ?
ORDER BY i.timestamp DESC;
```

### **Get Symbol Alerts**
```sql
SELECT 
    alert_type,
    alert_message,
    alert_value,
    triggered_at,
    acknowledged
FROM symbol_alerts sa
JOIN my_symbols m ON sa.symbol_id = m.id
WHERE m.symbol = ?
ORDER BY triggered_at DESC;
```

## Service Impact Management

### **System-Wide Service Updates**
When MySymbols database changes occur, the following services are **automatically updated** to maintain system consistency:

#### **1. 21 Indicators Database Impact**
```python
def update_21indicators_for_new_symbol(symbol):
    """Update 21 Indicators Database when symbol is added"""
    # Add symbol to indicator snapshots
    # Initialize all 21 indicators for new symbol
    # Update pattern analysis tables
    # Update indicator history tracking

def remove_symbol_from_21indicators(symbol):
    """Remove symbol from 21 Indicators Database"""
    # Remove from indicator snapshots
    # Remove from pattern analysis
    # Clean up indicator history

def replace_symbol_in_21indicators(old_symbol, new_symbol):
    """Replace symbol in 21 Indicators Database"""
    # Update symbol references in all tables
    # Migrate indicator data
    # Update pattern analysis
```

#### **2. Live Alerts System Impact**
```python
def update_live_alerts_for_new_symbol(symbol):
    """Update Live Alerts System when symbol is added"""
    # Add symbol to alert monitoring
    # Initialize alert triggers for new symbol
    # Add to Messi, Pele, Maradona, Whale alert systems
    # Update alert history tracking

def remove_symbol_from_live_alerts(symbol):
    """Remove symbol from Live Alerts System"""
    # Remove from alert monitoring
    # Clean up alert triggers
    # Remove from special alerts
    # Clean up alert history

def replace_symbol_in_live_alerts(old_symbol, new_symbol):
    """Replace symbol in Live Alerts System"""
    # Update alert monitoring
    # Migrate alert triggers
    # Update special alerts systems
    # Migrate alert history
```

#### **3. Frontend Components Impact**
```python
def update_frontend_components_for_new_symbol(symbol):
    """Update Frontend Components when symbol is added"""
    # Add symbol card to dashboard
    # Initialize indicator cards for new symbol
    # Update symbol list in UI
    # Update market sentiment calculations
    # Update win rate ratio calculations

def remove_symbol_from_frontend_components(symbol):
    """Remove symbol from Frontend Components"""
    # Remove symbol card
    # Remove indicator cards
    # Update symbol list in UI
    # Update market sentiment calculations
    # Update win rate ratio calculations

def replace_symbol_in_frontend_components(old_symbol, new_symbol):
    """Replace symbol in Frontend Components"""
    # Replace symbol card
    # Update indicator cards
    # Update symbol list in UI
    # Update market sentiment
    # Update win rate ratio
```

#### **4. Trading Systems Impact**
```python
def update_trading_systems_for_new_symbol(symbol):
    """Update Trading Systems when symbol is added"""
    # Add symbol to trading portfolio
    # Initialize position tracking
    # Add to risk management system
    # Update trading signals

def remove_symbol_from_trading_systems(symbol):
    """Remove symbol from Trading Systems"""
    # Remove from trading portfolio
    # Clean up position tracking
    # Remove from risk management
    # Remove from trading signals

def replace_symbol_in_trading_systems(old_symbol, new_symbol):
    """Replace symbol in Trading Systems"""
    # Update trading portfolio
    # Migrate position tracking
    # Update risk management
    # Update trading signals
```

### **Master Orchestration Coordination**
```python
def notify_master_orchestration_symbol_change(symbol, action, impact_report, old_symbol=None):
    """Notify Master Orchestration Agent of symbol changes"""
    notification = {
        'action': action,  # 'ADDED', 'REPLACED', 'DELETED'
        'symbol': symbol,
        'old_symbol': old_symbol,
        'timestamp': datetime.now(),
        'impact_report': impact_report,
        'services_affected': impact_report['services_affected'],
        'requires_coordination': True,
        'priority': 'IMMEDIATE'
    }
    
    # Send notification to Master Orchestration Agent
    send_to_master_orchestration(notification)
    
    # Log symbol change for audit
    log_symbol_change(notification)
```

### **Impact Assessment & Monitoring**
```python
def monitor_symbol_change_impact(symbol, action):
    """Monitor the impact of symbol changes across all services"""
    impact_metrics = {
        'services_updated': 0,
        'services_failed': 0,
        'update_time': 0,
        'data_migrated': 0,
        'alerts_generated': 0
    }
    
    # Monitor each service update
    for service in ['21indicators', 'live_alerts', 'frontend', 'trading']:
        try:
            update_service_for_symbol_change(service, symbol, action)
            impact_metrics['services_updated'] += 1
        except Exception as e:
            impact_metrics['services_failed'] += 1
            log_service_update_failure(service, symbol, action, e)
    
    return impact_metrics
```

## Success Criteria

### **Symbol Management**
- ‚úÖ Maximum 10 symbols maintained
- ‚úÖ All symbols available on both exchanges
- ‚úÖ Symbols meet liquidity requirements
- ‚úÖ Cross-exchange validation successful
- ‚úÖ **Dynamic database changes properly coordinated**

### **Data Management**
- ‚úÖ All indicators updated regularly
- ‚úÖ Market prices current and accurate
- ‚úÖ Alert system integrated
- ‚úÖ Database integrity maintained
- ‚úÖ **Service impact properly managed**

### **Trading Integration**
- ‚úÖ Only MySymbols are traded
- ‚úÖ Alerts generated for MySymbols only
- ‚úÖ Continuous monitoring active
- ‚úÖ Portfolio management functional
- ‚úÖ **System-wide coordination maintained**

### **Service Impact Management**
- ‚úÖ All 7 services automatically updated on symbol changes
- ‚úÖ Master Orchestration Agent properly notified
- ‚úÖ Data migration handled correctly
- ‚úÖ Service synchronization maintained
- ‚úÖ Impact monitoring and logging active

The MySymbols system ensures that only the most suitable symbols from Binance and KuCoin Futures markets are traded, with comprehensive monitoring, alerting, and data management for optimal trading performance. **All symbol changes are dynamically coordinated across the entire system architecture to maintain consistency and functionality.**
description:
globs:
alwaysApply: true
---

---
**Merge Summary**: Combined 3 files into unified MDC configuration
**Generated**: 2025-08-26T09:03:52.868476

## üìÑ Additional Content from MySymbolsService.mdc
# üóÑÔ∏è My Symbols Service - Portfolio Management Database

## Purpose
My Symbols service manages the core portfolio database, symbol tracking, and portfolio analytics for ZmartBot trading operations.

## Critical Functions
- **Portfolio Management**: Symbol portfolio tracking and management
- **Symbol Data**: Comprehensive symbol information and metadata
- **Portfolio Analytics**: Portfolio performance and risk analysis
- **Data Persistence**: Reliable data storage and retrieval
- **Real-time Updates**: Live portfolio updates and synchronization
- **Historical Data**: Historical portfolio and symbol data

## Database Schema
- **Symbols Table**: Core symbol information and metadata
- **Portfolio Table**: Portfolio composition and tracking
- **Performance Table**: Performance metrics and analytics
- **Risk Table**: Risk metrics and position data
- **History Table**: Historical data and audit trails

## Key Features
- **Portfolio Tracking**: Real-time portfolio monitoring
- **Symbol Management**: Comprehensive symbol data management
- **Performance Analytics**: Portfolio performance analysis
- **Risk Management**: Portfolio risk metrics and monitoring
- **Data Integrity**: ACID compliance and data validation
- **Backup & Recovery**: Automated backup and recovery procedures

## Portfolio Management
- **Symbol Addition**: Add new symbols to portfolio
- **Symbol Removal**: Remove symbols from portfolio
- **Position Tracking**: Real-time position monitoring
- **Performance Tracking**: Portfolio performance metrics
- **Risk Monitoring**: Portfolio risk assessment

## Data Operations
- **CRUD Operations**: Create, read, update, delete operations
- **Bulk Operations**: Efficient bulk data operations
- **Query Optimization**: Optimized database queries
- **Indexing**: Strategic database indexing for performance
- **Caching**: Intelligent data caching strategies

## Analytics & Reporting
- **Performance Metrics**: Portfolio performance calculations
- **Risk Analytics**: Risk assessment and analysis
- **Trend Analysis**: Portfolio trend identification
- **Comparative Analysis**: Benchmark and comparison analysis
- **Reporting**: Automated report generation

## Integration
- **Trading Engine**: Portfolio data for trading decisions
- **Risk Manager**: Portfolio risk data integration
- **Analytics Engine**: Portfolio analytics and reporting
- **Frontend Dashboard**: Portfolio display and visualization
- **Alert System**: Portfolio-based alerts and notifications

## Configuration
- **Database Settings**: Database connection and configuration
- **Performance Settings**: Query optimization settings
- **Backup Settings**: Backup frequency and retention
- **Security Settings**: Database security and access control
- **Monitoring Settings**: Database monitoring and alerting

## Status
‚úÖ **ACTIVE** - Core portfolio management service with comprehensive database functionality

description:
globs:
alwaysApply: true
---


## üìÑ Additional Content from MySymbols.mdc
@agent: SymbolValidator

# MySymbols - Trading Symbol Management System

## Overview
**MySymbols** represents the **core trading portfolio** of the ZmartBot project, consisting of a **maximum of 10 symbols** selected from Binance and KuCoin Future markets. These symbols are the **only ones traded, receiving alerts, and under continuous watch** by the system.

## Symbol Selection Criteria

### **Exchange Requirements**
- **Binance Futures**: Must be available on Binance Futures market
- **KuCoin Futures**: Must be available on KuCoin Futures market
- **Cross-Exchange**: Symbols must exist on both exchanges for arbitrage opportunities
- **Liquidity**: High trading volume and liquidity requirements

### **Symbol Validation**
```python
def validate_symbol_for_mysymbols(symbol):
    """Validate symbol for MySymbols inclusion"""
    # Check Binance Futures availability
    binance_available = check_binance_futures(symbol)
    
    # Check KuCoin Futures availability
    kucoin_available = check_kucoin_futures(symbol)
    
    # Check liquidity requirements
    liquidity_ok = check_liquidity_requirements(symbol)
    
    # Check trading volume
    volume_ok = check_trading_volume(symbol)
    
    return binance_available and kucoin_available and liquidity_ok and volume_ok
```

## MySymbols Database Structure

### **Core Database**
- **Location**: `src/data/my_symbols.db`
- **Type**: SQLite database
- **Purpose**: Store MySymbols with all indicators and market data
- **Max Symbols**: 10 symbols maximum

### **Database Schema**
```sql
-- MySymbols main table
CREATE TABLE my_symbols (
    id INTEGER PRIMARY KEY,
    symbol TEXT NOT NULL UNIQUE,
    exchange_binance BOOLEAN DEFAULT TRUE,
    exchange_kucoin BOOLEAN DEFAULT TRUE,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'ACTIVE',
    priority INTEGER DEFAULT 0,
    description TEXT
);

-- Current market prices
CREATE TABLE symbol_prices (
    id INTEGER PRIMARY KEY,
    symbol_id INTEGER,
    price REAL NOT NULL,
    change_24h REAL,
    volume_24h REAL,
    high_24h REAL,
    low_24h REAL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (symbol_id) REFERENCES my_symbols(id)
);

-- Technical indicators
CREATE TABLE symbol_indicators (
    id INTEGER PRIMARY KEY,
    symbol_id INTEGER,
    indicator_name TEXT NOT NULL,
    indicator_value REAL,
    indicator_data JSON,
    timeframe TEXT DEFAULT '1h',
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (symbol_id) REFERENCES my_symbols(id)
);

-- Alert history
CREATE TABLE symbol_alerts (
    id INTEGER PRIMARY KEY,
    symbol_id INTEGER,
    alert_type TEXT NOT NULL,
    alert_message TEXT,
    alert_value REAL,
    triggered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    acknowledged BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (symbol_id) REFERENCES my_symbols(id)
);
```

## Dynamic Symbol Management & Service Impact

### **Database-Driven Dynamic Changes**
The MySymbols system is **dynamically driven by the MySymbolsDatabase**, and any changes to the symbol portfolio have **major impacts on all system services**. When symbols are added, replaced, or deleted, the entire system architecture must adapt to maintain consistency and functionality.

### **Service Impact Overview**
```python
class MySymbolsServiceImpact:
    """Manages the impact of symbol changes on all system services"""
    
    def __init__(self):
        self.affected_services = [
            '21indicators_database',
            'live_alerts_system', 
            'technical_analysis',
            'market_data_collection',
            'frontend_components',
            'trading_systems',
            'master_orchestration_agent'
        ]
    
    def assess_symbol_change_impact(self, action, symbol, old_symbol=None):
        """Assess the impact of symbol changes across all services"""
        impact_report = {
            'action': action,  # 'ADD', 'REPLACE', 'DELETE'
            'symbol': symbol,
            'old_symbol': old_symbol,
            'timestamp': datetime.now(),
            'services_affected': [],
            'impact_level': 'HIGH',
            'requires_coordination': True
        }
        
        for service in self.affected_services:
            impact_report['services_affected'].append({
                'service': service,
                'impact': self.get_service_impact(service, action),
                'update_required': True,
                'priority': 'IMMEDIATE'
            })
        
        return impact_report
```

### **Add Symbol**
```python
def add_symbol_to_mysymbols(symbol, priority=0, description=""):
    """Add new symbol to MySymbols (max 10) with full service impact"""
    # Check current count
    current_count = get_mysymbols_count()
    
    if current_count >= 10:
        raise ValueError("Maximum 10 symbols allowed in MySymbols")
    
    # Validate symbol
    if not validate_symbol_for_mysymbols(symbol):
        raise ValueError(f"Symbol {symbol} does not meet requirements")
    
    # Assess service impact before adding
    impact_assessor = MySymbolsServiceImpact()
    impact_report = impact_assessor.assess_symbol_change_impact('ADD', symbol)
    
    # Add symbol to database
    query = """
    INSERT INTO my_symbols (symbol, priority, description)
    VALUES (?, ?, ?)
    """
    execute_query(query, (symbol, priority, description))
    
    # Initialize indicators
    initialize_symbol_indicators(symbol)
    
    # Trigger system-wide updates
    trigger_symbol_addition_updates(symbol, impact_report)
    
    return True

def trigger_symbol_addition_updates(symbol, impact_report):
    """Trigger updates across all affected services when symbol is added"""
    
    # Update 21 Indicators Database
    update_21indicators_for_new_symbol(symbol)
    
    # Update Live Alerts System
    update_live_alerts_for_new_symbol(symbol)
    
    # Update Technical Analysis Services
    update_technical_analysis_for_new_symbol(symbol)
    
    # Update Market Data Collection
    update_market_data_collection_for_new_symbol(symbol)
    
    # Update Frontend Components
    update_frontend_components_for_new_symbol(symbol)
    
    # Update Trading Systems
    update_trading_systems_for_new_symbol(symbol)
    
    # Notify Master Orchestration Agent
    notify_master_orchestration_symbol_change(symbol, 'ADDED', impact_report)
```

### **Remove Symbol**
```python
def remove_symbol_from_mysymbols(symbol):
    """Remove symbol from MySymbols with full service impact"""
    # Check if symbol exists
    if not symbol_exists_in_mysymbols(symbol):
        raise ValueError(f"Symbol {symbol} not found in MySymbols")
    
    # Assess service impact before removing
    impact_assessor = MySymbolsServiceImpact()
    impact_report = impact_assessor.assess_symbol_change_impact('DELETE', symbol)
    
    # Get symbol data before deletion
    symbol_data = get_symbol_data(symbol)
    symbol_id = get_symbol_id(symbol)
    
    # Trigger system-wide removal updates
    trigger_symbol_removal_updates(symbol, symbol_data, impact_report)
    
    # Delete related data
    delete_symbol_prices(symbol_id)
    delete_symbol_indicators(symbol_id)
    delete_symbol_alerts(symbol_id)
    
    # Delete symbol
    query = "DELETE FROM my_symbols WHERE symbol = ?"
    execute_query(query, (symbol,))
    
    return True

def trigger_symbol_removal_updates(symbol, symbol_data, impact_report):
    """Trigger updates across all affected services when symbol is removed"""
    
    # Remove from 21 Indicators Database
    remove_symbol_from_21indicators(symbol)
    
    # Remove from Live Alerts System
    remove_symbol_from_live_alerts(symbol)
    
    # Remove from Technical Analysis Services
    remove_symbol_from_technical_analysis(symbol)
    
    # Remove from Market Data Collection
    remove_symbol_from_market_data_collection(symbol)
    
    # Remove from Frontend Components
    remove_symbol_from_frontend_components(symbol)
    
    # Remove from Trading Systems
    remove_symbol_from_trading_systems(symbol)
    
    # Clean up historical data
    cleanup_symbol_historical_data(symbol)
    
    # Notify Master Orchestration Agent
    notify_master_orchestration_symbol_change(symbol, 'DELETED', impact_report)
```

### **Replace Symbol**
```python
def replace_symbol_in_mysymbols(old_symbol, new_symbol):
    """Replace symbol while maintaining data integrity and service coordination"""
    # Validate new symbol
    if not validate_symbol_for_mysymbols(new_symbol):
        raise ValueError(f"Symbol {new_symbol} does not meet requirements")
    
    # Assess service impact before replacing
    impact_assessor = MySymbolsServiceImpact()
    impact_report = impact_assessor.assess_symbol_change_impact('REPLACE', new_symbol, old_symbol)
    
    # Get old symbol data
    old_symbol_data = get_symbol_data(old_symbol)
    
    # Trigger system-wide replacement updates
    trigger_symbol_replacement_updates(old_symbol, new_symbol, old_symbol_data, impact_report)
    
    # Remove old symbol
    remove_symbol_from_mysymbols(old_symbol)
    
    # Add new symbol with same priority
    add_symbol_to_mysymbols(
        new_symbol, 
        priority=old_symbol_data['priority'],
        description=old_symbol_data['description']
    )
    
    return True

def trigger_symbol_replacement_updates(old_symbol, new_symbol, old_symbol_data, impact_report):
    """Trigger updates across all affected services when symbol is replaced"""
    
    # Replace in 21 Indicators Database
    replace_symbol_in_21indicators(old_symbol, new_symbol)
    
    # Replace in Live Alerts System
    replace_symbol_in_live_alerts(old_symbol, new_symbol)
    
    # Replace in Technical Analysis Services
    replace_symbol_in_technical_analysis(old_symbol, new_symbol)
    
    # Replace in Market Data Collection
    replace_symbol_in_market_data_collection(old_symbol, new_symbol)
    
    # Replace in Frontend Components
    replace_symbol_in_frontend_components(old_symbol, new_symbol)
    
    # Replace in Trading Systems
    replace_symbol_in_trading_systems(old_symbol, new_symbol)
    
    # Migrate historical data
    migrate_symbol_historical_data(old_symbol, new_symbol)
    
    # Notify Master Orchestration Agent
    notify_master_orchestration_symbol_change(new_symbol, 'REPLACED', impact_report, old_symbol)
```

## Indicator Management

### **21 Technical Indicators**
```python
INDICATORS = {
    "RSI": "Relative Strength Index",
    "MACD": "Moving Average Convergence Divergence",
    "BB": "Bollinger Bands",
    "EMA": "Exponential Moving Average",
    "SMA": "Simple Moving Average",
    "STOCH": "Stochastic Oscillator",
    "ATR": "Average True Range",
    "CCI": "Commodity Channel Index",
    "ADX": "Average Directional Index",
    "OBV": "On-Balance Volume",
    "VWAP": "Volume Weighted Average Price",
    "WILLIAMS_R": "Williams %R",
    "ROC": "Rate of Change",
    "MFI": "Money Flow Index",
    "DMI": "Directional Movement Index",
    "PARABOLIC_SAR": "Parabolic SAR",
    "AROON": "Aroon Indicator",
    "MOMENTUM": "Momentum Indicator",
    "TRIX": "TRIX Indicator",
    "ULTIMATE_OSCILLATOR": "Ultimate Oscillator",
    "KELTNER_CHANNEL": "Keltner Channel"
}
```

### **Indicator Updates**
```python
def update_symbol_indicators(symbol):
    """Update all indicators for a symbol"""
    symbol_id = get_symbol_id(symbol)
    
    for indicator_name in INDICATORS:
        # Calculate indicator value
        indicator_value = calculate_indicator(symbol, indicator_name)
        
        # Store in database
        query = """
        INSERT OR REPLACE INTO symbol_indicators 
        (symbol_id, indicator_name, indicator_value, timestamp)
        VALUES (?, ?, ?, CURRENT_TIMESTAMP)
        """
        execute_query(query, (symbol_id, indicator_name, indicator_value))
```

## Market Data Integration

### **Real-time Price Updates**
```python
def update_symbol_price(symbol):
    """Update current market price for symbol"""
    symbol_id = get_symbol_id(symbol)
    
    # Get price from both exchanges
    binance_price = get_binance_price(symbol)
    kucoin_price = get_kucoin_price(symbol)
    
    # Use weighted average or preferred exchange
    current_price = calculate_weighted_price(binance_price, kucoin_price)
    
    # Store price data
    query = """
    INSERT INTO symbol_prices 
    (symbol_id, price, change_24h, volume_24h, high_24h, low_24h)
    VALUES (?, ?, ?, ?, ?, ?)
    """
    execute_query(query, (symbol_id, current_price, change_24h, volume_24h, high_24h, low_24h))
```

### **Cross-Exchange Data**
```python
def get_cross_exchange_data(symbol):
    """Get data from both Binance and KuCoin"""
    return {
        "binance": {
            "price": get_binance_futures_price(symbol),
            "volume": get_binance_futures_volume(symbol),
            "open_interest": get_binance_open_interest(symbol)
        },
        "kucoin": {
            "price": get_kucoin_futures_price(symbol),
            "volume": get_kucoin_futures_volume(symbol),
            "open_interest": get_kucoin_open_interest(symbol)
        }
    }
```

## Alert System Integration

### **Symbol-Specific Alerts**
```python
def create_symbol_alert(symbol, alert_type, message, value=None):
    """Create alert for specific symbol"""
    symbol_id = get_symbol_id(symbol)
    
    query = """
    INSERT INTO symbol_alerts 
    (symbol_id, alert_type, alert_message, alert_value)
    VALUES (?, ?, ?, ?)
    """
    execute_query(query, (symbol_id, alert_type, message, value))
    
    # Trigger alert notification
    trigger_alert_notification(symbol, alert_type, message)
```

### **Alert Types**
```python
ALERT_TYPES = {
    "PRICE_BREAKOUT": "Price breakout above/below key levels",
    "INDICATOR_SIGNAL": "Technical indicator signals",
    "VOLUME_SPIKE": "Unusual volume activity",
    "LIQUIDATION_EVENT": "Large liquidation events",
    "RISK_ALERT": "Risk management alerts",
    "PATTERN_RECOGNITION": "Chart pattern recognition",
    "CROSS_SIGNAL": "Indicator cross-signals",
    "WIN_RATIO_UPDATE": "Win ratio analysis updates"
}
```

## Trading Integration

### **Exclusive Trading**
```python
def is_symbol_tradeable(symbol):
    """Check if symbol is in MySymbols and tradeable"""
    return symbol_exists_in_mysymbols(symbol) and get_symbol_status(symbol) == 'ACTIVE'
```

### **Portfolio Management**
```python
def get_mysymbols_portfolio():
    """Get current portfolio status for all MySymbols"""
    symbols = get_all_mysymbols()
    portfolio = {}
    
    for symbol in symbols:
        portfolio[symbol] = {
            "current_price": get_current_price(symbol),
            "indicators": get_all_indicators(symbol),
            "alerts": get_active_alerts(symbol),
            "position": get_current_position(symbol),
            "risk_score": calculate_risk_score(symbol)
        }
    
    return portfolio
```

## Database Queries

### **Get All MySymbols**
```sql
SELECT 
    symbol,
    exchange_binance,
    exchange_kucoin,
    status,
    priority,
    last_updated
FROM my_symbols
ORDER BY priority DESC, symbol;
```

### **Get Symbol with Indicators**
```sql
SELECT 
    m.symbol,
    m.status,
    i.indicator_name,
    i.indicator_value,
    i.timestamp
FROM my_symbols m
JOIN symbol_indicators i ON m.id = i.symbol_id
WHERE m.symbol = ?
ORDER BY i.timestamp DESC;
```

### **Get Symbol Alerts**
```sql
SELECT 
    alert_type,
    alert_message,
    alert_value,
    triggered_at,
    acknowledged
FROM symbol_alerts sa
JOIN my_symbols m ON sa.symbol_id = m.id
WHERE m.symbol = ?
ORDER BY triggered_at DESC;
```

## Service Impact Management

### **System-Wide Service Updates**
When MySymbols database changes occur, the following services are **automatically updated** to maintain system consistency:

#### **1. 21 Indicators Database Impact**
```python
def update_21indicators_for_new_symbol(symbol):
    """Update 21 Indicators Database when symbol is added"""
    # Add symbol to indicator snapshots
    # Initialize all 21 indicators for new symbol
    # Update pattern analysis tables
    # Update indicator history tracking

def remove_symbol_from_21indicators(symbol):
    """Remove symbol from 21 Indicators Database"""
    # Remove from indicator snapshots
    # Remove from pattern analysis
    # Clean up indicator history

def replace_symbol_in_21indicators(old_symbol, new_symbol):
    """Replace symbol in 21 Indicators Database"""
    # Update symbol references in all tables
    # Migrate indicator data
    # Update pattern analysis
```

#### **2. Live Alerts System Impact**
```python
def update_live_alerts_for_new_symbol(symbol):
    """Update Live Alerts System when symbol is added"""
    # Add symbol to alert monitoring
    # Initialize alert triggers for new symbol
    # Add to Messi, Pele, Maradona, Whale alert systems
    # Update alert history tracking

def remove_symbol_from_live_alerts(symbol):
    """Remove symbol from Live Alerts System"""
    # Remove from alert monitoring
    # Clean up alert triggers
    # Remove from special alerts
    # Clean up alert history

def replace_symbol_in_live_alerts(old_symbol, new_symbol):
    """Replace symbol in Live Alerts System"""
    # Update alert monitoring
    # Migrate alert triggers
    # Update special alerts systems
    # Migrate alert history
```

#### **3. Frontend Components Impact**
```python
def update_frontend_components_for_new_symbol(symbol):
    """Update Frontend Components when symbol is added"""
    # Add symbol card to dashboard
    # Initialize indicator cards for new symbol
    # Update symbol list in UI
    # Update market sentiment calculations
    # Update win rate ratio calculations

def remove_symbol_from_frontend_components(symbol):
    """Remove symbol from Frontend Components"""
    # Remove symbol card
    # Remove indicator cards
    # Update symbol list in UI
    # Update market sentiment calculations
    # Update win rate ratio calculations

def replace_symbol_in_frontend_components(old_symbol, new_symbol):
    """Replace symbol in Frontend Components"""
    # Replace symbol card
    # Update indicator cards
    # Update symbol list in UI
    # Update market sentiment
    # Update win rate ratio
```

#### **4. Trading Systems Impact**
```python
def update_trading_systems_for_new_symbol(symbol):
    """Update Trading Systems when symbol is added"""
    # Add symbol to trading portfolio
    # Initialize position tracking
    # Add to risk management system
    # Update trading signals

def remove_symbol_from_trading_systems(symbol):
    """Remove symbol from Trading Systems"""
    # Remove from trading portfolio
    # Clean up position tracking
    # Remove from risk management
    # Remove from trading signals

def replace_symbol_in_trading_systems(old_symbol, new_symbol):
    """Replace symbol in Trading Systems"""
    # Update trading portfolio
    # Migrate position tracking
    # Update risk management
    # Update trading signals
```

### **Master Orchestration Coordination**
```python
def notify_master_orchestration_symbol_change(symbol, action, impact_report, old_symbol=None):
    """Notify Master Orchestration Agent of symbol changes"""
    notification = {
        'action': action,  # 'ADDED', 'REPLACED', 'DELETED'
        'symbol': symbol,
        'old_symbol': old_symbol,
        'timestamp': datetime.now(),
        'impact_report': impact_report,
        'services_affected': impact_report['services_affected'],
        'requires_coordination': True,
        'priority': 'IMMEDIATE'
    }
    
    # Send notification to Master Orchestration Agent
    send_to_master_orchestration(notification)
    
    # Log symbol change for audit
    log_symbol_change(notification)
```

### **Impact Assessment & Monitoring**
```python
def monitor_symbol_change_impact(symbol, action):
    """Monitor the impact of symbol changes across all services"""
    impact_metrics = {
        'services_updated': 0,
        'services_failed': 0,
        'update_time': 0,
        'data_migrated': 0,
        'alerts_generated': 0
    }
    
    # Monitor each service update
    for service in ['21indicators', 'live_alerts', 'frontend', 'trading']:
        try:
            update_service_for_symbol_change(service, symbol, action)
            impact_metrics['services_updated'] += 1
        except Exception as e:
            impact_metrics['services_failed'] += 1
            log_service_update_failure(service, symbol, action, e)
    
    return impact_metrics
```

## Success Criteria

### **Symbol Management**
- ‚úÖ Maximum 10 symbols maintained
- ‚úÖ All symbols available on both exchanges
- ‚úÖ Symbols meet liquidity requirements
- ‚úÖ Cross-exchange validation successful
- ‚úÖ **Dynamic database changes properly coordinated**

### **Data Management**
- ‚úÖ All indicators updated regularly
- ‚úÖ Market prices current and accurate
- ‚úÖ Alert system integrated
- ‚úÖ Database integrity maintained
- ‚úÖ **Service impact properly managed**

### **Trading Integration**
- ‚úÖ Only MySymbols are traded
- ‚úÖ Alerts generated for MySymbols only
- ‚úÖ Continuous monitoring active
- ‚úÖ Portfolio management functional
- ‚úÖ **System-wide coordination maintained**

### **Service Impact Management**
- ‚úÖ All 7 services automatically updated on symbol changes
- ‚úÖ Master Orchestration Agent properly notified
- ‚úÖ Data migration handled correctly
- ‚úÖ Service synchronization maintained
- ‚úÖ Impact monitoring and logging active

The MySymbols system ensures that only the most suitable symbols from Binance and KuCoin Futures markets are traded, with comprehensive monitoring, alerting, and data management for optimal trading performance. **All symbol changes are dynamically coordinated across the entire system architecture to maintain consistency and functionality.**
description:
globs:
alwaysApply: true
---

---
**Merge Summary**: Combined 3 files into unified MDC configuration
**Generated**: 2025-08-27T10:39:58.318696