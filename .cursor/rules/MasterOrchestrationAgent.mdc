# ðŸŽ¯ Master Orchestration Agent - System Orchestration Controller
> Type: backend | Version: 1.0.0 | Owner: zmartbot | Port: 8002

## Purpose
Central orchestration controller for ZmartBot system, managing service lifecycle, dependencies, health monitoring, and automated operations with comprehensive API endpoints and self-learning capabilities.

## Overview
ZmartBot orchestration service managing service lifecycle, dependencies, and system coordination with comprehensive dependency management and service coordination capabilities.

## Critical Functions
- **Service Lifecycle Management**: Start, stop, restart, and monitor all services
- **Dependency Resolution**: Manages service dependencies and startup order
- **Health Monitoring**: Real-time health checks for all system components
- **Port Management**: Dynamic port assignment and conflict resolution
- **Database Orchestration**: Manages all database connections and operations
- **Error Recovery**: Automatic error detection and recovery mechanisms
- **Performance Optimization**: Resource optimization and load balancing
- **Self-Learning**: Continuously updates knowledge of all system services

## Architecture & Integration
- **Service Type:** backend
- **Dependencies:** None (orchestrates other services)
- **Env Vars:** ORCHESTRATION_TOKEN, SERVICE_REGISTRY_URL
- **Lifecycle:** start=`python3 orchestration_server.py --port 8002` | stop=`pkill -f orchestration_server` | migrate=`n/a`

## Architecture
- **Central Controller**: Main orchestration logic and decision making
- **Service Registry**: Tracks all services and their states
- **Health Monitor**: Continuous health checking and alerting
- **Port Manager**: Dynamic port allocation and management
- **Database Orchestrator**: Database connection and operation management
- **Error Handler**: Error detection, logging, and recovery

## Key Features
- **Intelligent Startup**: Optimized service startup sequence
- **Real-time Monitoring**: Continuous health and performance monitoring
- **Automatic Recovery**: Self-healing capabilities for failed services
- **Resource Management**: Efficient resource allocation and cleanup
- **Scalability**: Support for multiple services and configurations
- **Logging**: Comprehensive logging and audit trails
- **Self-Learning**: Updates service knowledge automatically

## Service Management
- **Backend API Server**: Port 8000 management and monitoring
- **Frontend Dashboard**: Port 3400 management and monitoring
- **Database Services**: All database connections and operations
- **Monitoring Services**: Health checks and performance monitoring
- **Security Services**: Authentication and authorization management

## API Endpoints

### GET /health
- Summary: Orchestration service health check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Health status
  - 503: Service unavailable

### GET /ready
- Summary: Orchestration service readiness check
- Auth Required: No
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Ready status
  - 503: Not ready

### GET /api/orchestration/status
- Summary: Get orchestration system status
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Orchestration status information
  - 401: Authentication required

### GET /api/orchestration/services
- Summary: Get all managed services
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: List of managed services
  - 401: Authentication required

### POST /api/orchestration/services/{service_name}/start
- Summary: Start a specific service
- Auth Required: Yes
- Request:
  - Params: `{"service_name": "string"}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Service started successfully
  - 400: Invalid service name
  - 401: Authentication required
  - 409: Service already running

### POST /api/orchestration/services/{service_name}/stop
- Summary: Stop a specific service
- Auth Required: Yes
- Request:
  - Params: `{"service_name": "string"}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Service stopped successfully
  - 400: Invalid service name
  - 401: Authentication required
  - 404: Service not found

### POST /api/orchestration/services/{service_name}/restart
- Summary: Restart a specific service
- Auth Required: Yes
- Request:
  - Params: `{"service_name": "string"}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Service restarted successfully
  - 400: Invalid service name
  - 401: Authentication required
  - 404: Service not found

### GET /api/orchestration/dependencies
- Summary: Get service dependency graph
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Dependency graph data
  - 401: Authentication required

### POST /api/orchestration/dependencies/validate
- Summary: Validate service dependencies
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"services": ["string"]}`
- Responses:
  - 200: Dependency validation result
  - 400: Invalid dependency configuration
  - 401: Authentication required

### GET /api/orchestration/ports
- Summary: Get port assignment status
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{}`
- Responses:
  - 200: Port assignment information
  - 401: Authentication required

### POST /api/orchestration/ports/assign
- Summary: Assign port to service
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"service_name": "string", "port": "int"}`
- Responses:
  - 200: Port assigned successfully
  - 400: Invalid port or service
  - 401: Authentication required
  - 409: Port already in use

### GET /api/orchestration/logs/{service_name}
- Summary: Get service logs
- Auth Required: Yes
- Request:
  - Params: `{"service_name": "string"}`
  - Query: `{"lines": "int", "follow": "boolean"}`
  - Body: `{}`
- Responses:
  - 200: Service logs
  - 400: Invalid service name
  - 401: Authentication required
  - 404: Service not found

### POST /api/orchestration/rollback
- Summary: Rollback system to previous snapshot
- Auth Required: Yes
- Request:
  - Params: `{}`
  - Query: `{}`
  - Body: `{"snapshot_id": "string"}`
- Responses:
  - 200: Rollback initiated successfully
  - 400: Invalid snapshot ID
  - 401: Authentication required
  - 404: Snapshot not found

## Health Monitoring
- **Service Health**: Real-time health status of all services
- **Performance Metrics**: CPU, memory, and resource usage
- **Error Tracking**: Error detection and alerting
- **Response Time**: Service response time monitoring
- **Availability**: Service availability tracking

## Health & Readiness
- Liveness: `/health`
- Readiness: `/ready`
- Timeouts: startup_grace=30s, http_timeout=45s

## Observability
- Metrics: `/metrics`
- Logs: format=jsonl
- Dashboards: Orchestration Performance, Service Dependencies

## Error Recovery
- **Automatic Restart**: Failed service restart mechanisms
- **Fallback Procedures**: Alternative service configurations
- **Error Logging**: Comprehensive error logging and reporting
- **Alert System**: Error notification and alerting
- **Recovery Procedures**: Step-by-step recovery processes

## Orchestration & Ordering
- Basic Integration: Enabled
- Master Agent Linked: Yes
- Ordering Hints: zmart-orchestration â†’ zmart-api, zmart-orchestration â†’ zmart-dashboard

## Performance & SLO (Initial)
- Baseline p95 (ms): 100
- Notes: Orchestration service with dependency management and service coordination

## Integration Points
- **Service Registry**: Service discovery and registration
- **Port Registry**: Port allocation and management
- **Database Orchestrator**: Database operation management
- **Health Checker**: Health monitoring and validation
- **Logging System**: Centralized logging and monitoring

## Configuration
- **Service Configurations**: Individual service settings
- **Dependency Mappings**: Service dependency definitions
- **Health Check Rules**: Health monitoring configurations
- **Error Recovery Rules**: Error handling configurations
- **Performance Thresholds**: Performance monitoring settings

## Failure Modes & Runbooks
- **service-registry-failed** â€” Symptoms: Cannot register or discover services â€” Remediation: Check service registry connectivity, restart orchestration service
- **dependency-cycle** â€” Symptoms: Circular dependency detected, services stuck in starting state â€” Remediation: Analyze dependency graph, resolve circular dependencies, restart affected services
- **port-conflict** â€” Symptoms: Port already in use, service startup fails â€” Remediation: Check port availability, resolve conflicts, restart orchestration service

## Rollback
- Snapshot required: Yes
- Playbook: isolate â†’ restore_latest_snapshot â†’ verify â†’ reactivate

## Load Balancing
- Enabled: No
- Pool: null

## Self-Learning Service Knowledge
**Updated: 2025-08-25T05:31:04Z**

### Currently Registered Services:
1. **api-keys-manager-service** (backend) - Port 8006 - Status: ACTIVE
2. **binance** (worker) - Port 8303 - Status: ACTIVE
3. **kingfisher-module** (backend) - Port 8100 - Status: ACTIVE
4. **kucoin** (worker) - Port 8302 - Status: ACTIVE
5. **master-orchestration-agent** (orchestration) - Port 8002 - Status: ACTIVE
6. **my-symbols-extended-service** (backend) - Port 8005 - Status: ACTIVE
7. **mysymbols** (internal_api) - Port 8201 - Status: ACTIVE
8. **test-analytics-service** (backend) - Port 8003 - Status: ACTIVE
9. **test-service** (worker) - Port 8301 - Status: ACTIVE
10. **test-websocket-service** (backend) - Port 8004 - Status: ACTIVE
11. **zmart-analytics** (backend) - Port 8007 - Status: ACTIVE
12. **zmart-api** (backend) - Port 8000 - Status: ACTIVE
13. **zmart-dashboard** (frontend) - Port 3400 - Status: ACTIVE
14. **zmart-notification** (backend) - Port 8008 - Status: ACTIVE
15. **zmart-websocket** (backend) - Port 8009 - Status: ACTIVE
16. **zmart_alert_system** (backend) - Port 8012 - Status: ACTIVE
17. **zmart_backtesting** (backend) - Port 8013 - Status: ACTIVE
18. **zmart_data_warehouse** (backend) - Port 8015 - Status: ACTIVE
19. **zmart_machine_learning** (backend) - Port 8014 - Status: ACTIVE
20. **zmart_risk_management** (backend) - Port 8010 - Status: ACTIVE
21. **zmart_technical_analysis** (backend) - Port 8011 - Status: ACTIVE

### Service Categories:
- **Backend Services**: api-keys-manager-service, kingfisher-module, my-symbols-extended-service, test-analytics-service, test-websocket-service, zmart-analytics, zmart-api, zmart-notification, zmart-websocket, zmart_alert_system, zmart_backtesting, zmart_data_warehouse, zmart_machine_learning, zmart_risk_management, zmart_technical_analysis
- **Frontend Services**: zmart-dashboard
- **Worker Services**: binance, kucoin, test-service
- **Orchestration Services**: master-orchestration-agent
- **Internal_Api Services**: mysymbols

### Dependency Mapping:
- master-orchestration-agent â†’ api-keys-manager-service
- master-orchestration-agent â†’ kingfisher-module
- master-orchestration-agent â†’ my-symbols-extended-service
- master-orchestration-agent â†’ test-analytics-service
- master-orchestration-agent â†’ test-websocket-service
- master-orchestration-agent â†’ zmart-analytics
- master-orchestration-agent â†’ zmart-api
- master-orchestration-agent â†’ zmart-notification
- master-orchestration-agent â†’ zmart-websocket
- master-orchestration-agent â†’ zmart_alert_system
- master-orchestration-agent â†’ zmart_backtesting
- master-orchestration-agent â†’ zmart_data_warehouse
- master-orchestration-agent â†’ zmart_machine_learning
- master-orchestration-agent â†’ zmart_risk_management
- master-orchestration-agent â†’ zmart_technical_analysis
- master-orchestration-agent â†’ zmart-dashboard
- master-orchestration-agent â†’ binance
- master-orchestration-agent â†’ kucoin
- master-orchestration-agent â†’ test-service## Known Issues
- None recorded

## Duplicate Prevention & Validation
**CRITICAL: This service manages all other services and must prevent duplicates**

### Service Registration Validation Rules:
1. **Port Conflict Detection**: Check port registry before assigning new ports
2. **Service Name Validation**: Verify service names against existing registry
3. **MDC File Duplication**: Check for existing MDC documentation
4. **Process Validation**: Verify if service is already running
5. **Registry Consistency**: Ensure service registry matches port registry

### Standardized Service Name Mapping:
- `zmart_orchestration` â†’ `master_orchestration_agent` (Port 8002)
- `zmart_dashboard` â†’ `zmart-dashboard` (Port 3400)
- `zmart_api` â†’ `zmart-api` (Port 8000)
- `my_symbols` â†’ `mysymbols` (Port 8201)
- `api_keys_manager` â†’ `api-keys-manager-service` (Port 8006)

### Validation Commands (Run Before Any Service Registration):
```bash
# Port conflict check
sqlite3 zmart-api/port_registry.db "SELECT * FROM port_assignments WHERE port = {PORT};"

# Service name check
sqlite3 zmart-api/src/data/service_registry.db "SELECT * FROM service_registry WHERE service_name LIKE '%{SERVICE_NAME}%' OR port = {PORT};"

# MDC file check
find .cursor/rules -name "*{SERVICE_NAME}*" -o -name "*{PORT}*"

# Process check
ps aux | grep -i "{SERVICE_NAME}" | grep -v grep
```

## Status
âœ… **ACTIVE** - Core orchestration system with comprehensive management capabilities and self-learning service knowledge

## Changelog
- 1.0.0 (2025-08-24): Initial orchestration service with service lifecycle management
- 1.0.1 (2025-08-24): Merged with MasterOrchestrationAgent, added self-learning service knowledge
- 1.0.2 (2025-08-25): Auto-updated service knowledge - 21 services registered

---
*Generated by MDCAgent (gpt5) on 2025-08-25T05:31:04Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:30:58Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:26:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:23:35Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:21:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:18:24Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:16:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:13:25Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:11:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:06:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T05:01:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:56:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:51:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:50:27Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:46:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:45:03Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:41:07Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:41:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:36:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:35:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:32:23Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:31:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:31:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:27:50Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:26:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:21:02Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:16:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:15:44Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:11:59Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:11:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:08:50Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:06:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T04:01:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:56:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:51:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:46:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:41:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:36:01Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:31:00Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:26:00Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:24:56Z; input sha256-auto-update-21-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:21:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:16:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:11:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:06:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T03:01:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:56:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:51:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:46:00Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:40:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:35:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:31:04Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:30:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:25:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:20:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:19:01Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:15:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:10:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:10:03Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:05:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T02:00:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:55:59Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:50:58Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:46:20Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:45:58Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:40:58Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:36:18Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:35:58Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:30:58Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:28:11Z; input sha256-auto-update-20-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:25:58Z; input sha256-auto-update-19-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:20:58Z; input sha256-auto-update-15-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:19:52Z; input sha256-auto-update-15-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:15:58Z; input sha256-auto-update-14-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:10:58Z; input sha256-auto-update-14-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:05:58Z; input sha256-auto-update-14-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:02:20Z; input sha256-auto-update-14-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T01:00:57Z; input sha256-auto-update-14-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:59:29Z; input sha256-auto-update-14-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:55:57Z; input sha256-auto-update-13-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:52:13Z; input sha256-auto-update-13-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:50:57Z; input sha256-auto-update-12-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:50:10Z; input sha256-auto-update-12-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:47:55Z; input sha256-auto-update-11-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:45:57Z; input sha256-auto-update-10-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:40:57Z; input sha256-auto-update-10-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:40:31Z; input sha256-auto-update-10-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:35:57Z; input sha256-auto-update-9-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:22:53Z; input sha256-auto-update-9-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:19:40Z; input sha256-auto-update-8-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:18:44Z; input sha256-auto-update-8-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-25T00:17:40Z; input sha256-auto-update-7-services; context: service_registry.db, auto_update.py.**Generated by MDCAgent (gpt5) on 2025-08-24T23:45:00Z; input sha256-mno345pqr678; context: service.yaml, master_orchestration_context.json.*

description:
globs:
alwaysApply: true
---
