@step: orchestration_flow

# START_ZMARTBOT.sh - ZmartBot Startup Process Documentation

## Overview
The `START_ZMARTBOT.sh` script is the main startup script for the ZmartBot trading platform. It orchestrates the complete system startup in a specific sequence to ensure all components are properly initialized and ready for trading operations.

## What START_ZMARTBOT.sh Does

### 1. **Frontend Dashboard Server** (Port 3400)
- **Service**: Professional Dashboard Server
- **Port**: 3400
- **Purpose**: Provides the main web interface for trading operations
- **Features**:
  - Professional trading dashboard
  - Live alerts system
  - Real-time market data visualization
  - Symbol management interface
  - Enhanced alerts monitoring

### 2. **Backend API Server** (Port 8000)
- **Service**: FastAPI Backend Server
- **Port**: 8000
- **Purpose**: Provides all trading APIs and data processing
- **Features**:
  - RESTful API endpoints
  - Trading operations
  - Market data processing
  - Database management
  - External API integrations (KuCoin, Binance, Cryptometer, etc.)

### 3. **Orchestration Agent** (Background Process)
- **Service**: Master Orchestration Agent
- **Purpose**: Coordinates all system components and manages background operations
- **Features**:
  - Database orchestration
  - Cross-event management
  - Alerts system coordination
  - Market data collection
  - Pattern analysis
  - Risk management

## Startup Sequence

### Step 1: Environment Setup
- Navigate to project directory (`zmart-api`)
- Activate virtual environment
- Install/verify dependencies

### Step 2: Process Cleanup
- Kill any existing processes
- Clear port conflicts
- Ensure clean startup

### Step 3: Service Startup (In Order)
1. **Backend API Server** (Port 8000)
   - Starts FastAPI application
   - Initializes database connections
   - Loads all API routes
   - Waits for readiness

2. **Dashboard Server** (Port 3400)
   - Starts React/Vite development server
   - Serves frontend application
   - Connects to backend APIs
   - Waits for readiness

3. **Orchestration Agent** (Background)
   - Starts master orchestration service
   - Initializes database orchestrator
   - Begins background data collection
   - Manages system health monitoring

### Step 4: Health Verification
- Tests Backend API responsiveness
- Tests Dashboard Server accessibility
- Tests My Symbols API functionality
- Tests Orchestration Agent status

### Step 5: State Snapshot Management
- Loads state screenshot from STOP_ZMARTBOT if available
- Serves cached data initially for smooth startup experience
- Transitions from cached data to live data once all services are ready
- Clears cached data after successful transition to live operation

### Step 6: Port Assignment Loading
- Loads saved port assignments from STOP_ZMARTBOT
- Applies new port assignments only if STOP_ZMARTBOT was preceded by START_ZMARTBOT
- Validates port assignment sequence and integrity

## Access URLs After Startup

- **Professional Dashboard**: http://localhost:3400
- **Live Alerts System**: http://localhost:3400/enhanced-alerts
- **Backend API**: http://localhost:8000/api/
- **API Documentation**: http://localhost:8000/docs

## Process Management

### Stop Servers
```bash
pkill -f 'python3 run_dev.py'
pkill -f 'python3 run_dev.py'
pkill -f 'professional_dashboard_server.py'
pkill -f 'orchestration_agent'
```

### Restart
```bash
./START_ZMARTBOT.sh
```

### View Logs
```bash
tail -f api_server.log dashboard.log orchestration.log
```

## Key Features

### Port Management
- **8000**: Backend API (FastAPI)
- **3400**: Frontend Dashboard (React/Vite)
- **8086**: InfluxDB (Database)
- **5432**: PostgreSQL (Database)

### New Port Integration Rules
- **New ports will be added** with corresponding services **ONLY IF** STOP_ZMARTBOT was preceded by START_ZMARTBOT
- **Port Manager Database** is checked for new services that were saved during the previous STOP operation
- **Temporary port assignments** are not loaded on startup (only permanent assignments from STOP_ZMARTBOT)
- **Port assignment sequence** is validated to ensure proper startup/stop cycle

### State Snapshot Process
```python
def load_state_screenshot():
    """Load state screenshot from STOP_ZMARTBOT for smooth startup"""
    if state_screenshot_exists():
        log_info("üì∏ Found state screenshot - will serve cached data until fresh restart")
        return load_cached_data()
    else:
        log_info("No state screenshot found - starting with fresh data")
        return None

def transition_to_live_data():
    """Transition from cached data to live data"""
    log_info("üì∏‚Üíüî¥ TRANSITION: Cached data ‚Üí Live data")
    log_info("üîÑ System fully ready - clearing cached data for live operation")
    clear_cached_data()
    log_success("‚úÖ Now serving live data from all services")
```

### Port Loading Process
```python
def load_saved_port_assignments():
    """Load port assignments saved by STOP_ZMARTBOT"""
    # Check if STOP_ZMARTBOT was run after START_ZMARTBOT
    if not was_stop_preceded_by_start():
        log_info("No STOP_ZMARTBOT detected - loading only existing ports")
        return load_existing_port_assignments()
    
    # Load permanent port assignments from database
    assignments = port_registry.get_permanent_assignments()
    
    # Apply assignments to Port Manager
    for assignment in assignments:
        port_manager.assign_port(
            service_name=assignment.service_name,
            port=assignment.port_number,
            permanent=True
        )
    
    log_info(f"Loaded {len(assignments)} new port assignments from STOP_ZMARTBOT")
```

### Startup Validation
```python
def validate_startup_sequence():
    """Validate that START_ZMARTBOT was followed by STOP_ZMARTBOT"""
    # Check startup sequence log
    startup_log = read_startup_sequence_log()
    
    # Verify sequence: START -> [operations] -> STOP
    if not has_valid_start_stop_sequence(startup_log):
        log_warning("Invalid startup sequence - new ports may not be loaded")
        return False
    
    return True
```

### Service Dependencies
- Backend API must start first
- Dashboard depends on Backend API
- Orchestration Agent coordinates all services
- All services must be healthy for full operation

### Error Handling
- Automatic process cleanup on startup
- Port conflict resolution
- Health checks for each service
- Graceful failure handling

## System Requirements

- Python 3.9+
- Node.js 16+
- Virtual environment activated
- All dependencies installed
- Ports 8000 and 3400 available
- Database services running (PostgreSQL, InfluxDB)

## Status Indicators

- ‚úÖ **Green**: Service ready and responding
- ‚ö†Ô∏è **Yellow**: Service starting or partial response
- ‚ùå **Red**: Service failed or not responding

This startup process ensures that ZmartBot is fully operational and ready for trading operations with all components properly synchronized and communicating.
description:
globs:
alwaysApply: false
---