@agent: FailSafeAgent

# DoctorKill - Virus Script and Process Cleanup Agent

## Overview
DoctorKill is a **security and cleanup script** that acts as the system's "immune system" for the ZmartBot project. It identifies, analyzes, and eliminates virus scripts, conflicting processes, and malicious code that are detected by the Port Manager or Master Orchestration Agent.

## What DoctorKill Does

### 1. **Virus Script Detection & Elimination**
- **Detection Source**: Port Manager and Master Orchestration Agent alerts
- **Target**: Malicious scripts, unauthorized processes, conflicting code
- **Action**: **IMMEDIATE TERMINATION** of identified threats
- **Process**:
  - Receive threat alerts from monitoring agents
  - Analyze threat signatures and behavior patterns
  - Execute immediate termination procedures
  - Log all elimination actions

### 2. **Process Conflict Resolution**
```python
def kill_conflicting_processes():
    # Get list of conflicting processes from Port Manager
    conflicts = port_manager.get_conflicting_processes()
    
    # Get virus script alerts from Master Orchestration Agent
    virus_alerts = master_agent.get_virus_alerts()
    
    # Combine all threats
    all_threats = conflicts + virus_alerts
    
    # Execute elimination
    for threat in all_threats:
        doctor_kill.eliminate_threat(threat)
```

### 3. **Port Conflict Cleanup**
- **Detection**: Port Manager identifies port conflicts
- **Analysis**: DoctorKill analyzes conflict sources
- **Resolution**: Eliminates conflicting processes
- **Prevention**: Implements measures to prevent recurrence

### 4. **System Integrity Protection**
```python
def protect_system_integrity():
    # Monitor system for unauthorized changes
    unauthorized_changes = detect_unauthorized_changes()
    
    # Identify malicious modifications
    malicious_mods = identify_malicious_modifications(unauthorized_changes)
    
    # Restore system integrity
    restore_system_integrity(malicious_mods)
    
    # Implement protective measures
    implement_protective_measures()
```

## Threat Detection Sources

### **Port Manager Alerts**
- **Duplicate Services**: Multiple instances of same service
- **Unauthorized Port Usage**: Services using unassigned ports
- **Process Conflicts**: Services interfering with each other
- **Resource Abuse**: Services consuming excessive resources

### **Master Orchestration Agent Alerts**
- **Virus Script Detection**: Malicious code patterns
- **Unauthorized Processes**: Processes not registered in system
- **Behavioral Anomalies**: Unusual service behavior patterns
- **Security Violations**: Attempts to access restricted resources

## Elimination Procedures

### **Virus Script Elimination**
```python
def eliminate_virus_script(script_info):
    # Get script details
    script_path = script_info['path']
    script_pid = script_info['pid']
    threat_level = script_info['threat_level']
    
    # Immediate termination
    if threat_level == 'CRITICAL':
        force_kill_process(script_pid)
        delete_file(script_path)
        quarantine_related_files(script_path)
    
    # Log elimination
    log_elimination(script_info, 'VIRUS_SCRIPT')
    
    # Notify security system
    notify_security_system(script_info)
```

### **Process Conflict Resolution**
```python
def resolve_process_conflict(conflict_info):
    # Analyze conflict
    conflicting_processes = conflict_info['processes']
    conflict_type = conflict_info['type']
    
    # Determine which process to eliminate
    target_process = determine_target_process(conflicting_processes)
    
    # Execute elimination
    eliminate_process(target_process)
    
    # Verify resolution
    verify_conflict_resolution(conflict_info)
    
    # Log resolution
    log_resolution(conflict_info, target_process)
```

### **Port Conflict Cleanup**
```python
def cleanup_port_conflict(port_info):
    # Get conflicting processes on port
    conflicting_processes = get_processes_on_port(port_info['port'])
    
    # Identify legitimate vs malicious processes
    legitimate_processes = identify_legitimate_processes(conflicting_processes)
    malicious_processes = identify_malicious_processes(conflicting_processes)
    
    # Eliminate malicious processes
    for process in malicious_processes:
        eliminate_process(process)
    
    # Restore legitimate processes
    restore_legitimate_processes(legitimate_processes)
```

## Security Protocols

### **Threat Classification**
- **CRITICAL**: Immediate elimination required
- **HIGH**: Rapid response needed
- **MEDIUM**: Standard cleanup procedure
- **LOW**: Monitoring and logging

### **Elimination Methods**
```python
def elimination_methods(threat_level):
    if threat_level == 'CRITICAL':
        return {
            'method': 'FORCE_KILL',
            'timeout': 0,  # Immediate
            'cleanup': 'COMPLETE',
            'quarantine': True
        }
    elif threat_level == 'HIGH':
        return {
            'method': 'GRACEFUL_KILL',
            'timeout': 5,  # 5 seconds
            'cleanup': 'PARTIAL',
            'quarantine': True
        }
    else:
        return {
            'method': 'REQUEST_TERMINATION',
            'timeout': 30,  # 30 seconds
            'cleanup': 'MINIMAL',
            'quarantine': False
        }
```

### **Quarantine System**
```python
def quarantine_system():
    # Quarantine directory
    quarantine_dir = "/tmp/zmartbot_quarantine"
    
    # Move suspicious files to quarantine
    def quarantine_file(file_path):
        quarantine_path = f"{quarantine_dir}/{generate_quarantine_id()}"
        move_file(file_path, quarantine_path)
        log_quarantine(file_path, quarantine_path)
    
    # Analyze quarantined files
    def analyze_quarantined_files():
        for file in list_quarantined_files():
            analysis = analyze_file(file)
            if analysis['safe']:
                restore_file(file)
            else:
                delete_file(file)
```

## Integration with Monitoring Agents

### **Port Manager Integration**
```python
def port_manager_integration():
    # Subscribe to Port Manager alerts
    port_manager.subscribe_to_alerts(doctor_kill.handle_alert)
    
    # Handle Port Manager alerts
    def handle_port_manager_alert(alert):
        if alert['type'] == 'CONFLICT':
            resolve_process_conflict(alert['data'])
        elif alert['type'] == 'UNAUTHORIZED':
            eliminate_unauthorized_process(alert['data'])
        elif alert['type'] == 'RESOURCE_ABUSE':
            handle_resource_abuse(alert['data'])
```

### **Master Orchestration Agent Integration**
```python
def master_agent_integration():
    # Subscribe to Master Agent alerts
    master_agent.subscribe_to_alerts(doctor_kill.handle_alert)
    
    # Handle Master Agent alerts
    def handle_master_agent_alert(alert):
        if alert['type'] == 'VIRUS_DETECTED':
            eliminate_virus_script(alert['data'])
        elif alert['type'] == 'BEHAVIORAL_ANOMALY':
            handle_behavioral_anomaly(alert['data'])
        elif alert['type'] == 'SECURITY_VIOLATION':
            handle_security_violation(alert['data'])
```

## Logging and Reporting

### **Elimination Logs**
```sql
CREATE TABLE elimination_logs (
    id INTEGER PRIMARY KEY,
    threat_type TEXT NOT NULL,
    threat_details JSON,
    elimination_method TEXT,
    elimination_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    success BOOLEAN,
    system_impact TEXT
);
```

### **Security Reports**
```python
def generate_security_report():
    # Get elimination statistics
    eliminations = get_elimination_statistics()
    
    # Generate threat analysis
    threat_analysis = analyze_threat_patterns()
    
    # Create security report
    report = {
        'eliminations_count': eliminations['total'],
        'threat_types': eliminations['by_type'],
        'system_impact': threat_analysis['impact'],
        'recommendations': threat_analysis['recommendations']
    }
    
    return report
```

## Recovery and Restoration

### **System Recovery**
```python
def system_recovery():
    # Check system integrity
    integrity_check = check_system_integrity()
    
    if not integrity_check['healthy']:
        # Restore from backup
        restore_from_backup()
        
        # Verify restoration
        verify_restoration()
        
        # Log recovery
        log_recovery(integrity_check)
```

### **Process Restoration**
```python
def restore_legitimate_processes(processes):
    for process in processes:
        if process['legitimate']:
            # Restart legitimate process
            restart_process(process)
            
            # Verify restoration
            verify_process_restoration(process)
            
            # Log restoration
            log_restoration(process)
```

## Configuration

### **DoctorKill Settings**
```json
{
  "elimination_methods": {
    "critical": "FORCE_KILL",
    "high": "GRACEFUL_KILL",
    "medium": "REQUEST_TERMINATION",
    "low": "MONITOR_ONLY"
  },
  "quarantine": {
    "enabled": true,
    "directory": "/tmp/zmartbot_quarantine",
    "retention_days": 7
  },
  "logging": {
    "elimination_logs": true,
    "security_reports": true,
    "detailed_logging": true
  },
  "recovery": {
    "auto_recovery": true,
    "backup_restoration": true,
    "integrity_checks": true
  }
}
```

## Success Criteria

### **Threat Elimination**
- ✅ All virus scripts eliminated
- ✅ All conflicting processes resolved
- ✅ System integrity maintained
- ✅ No false positives

### **System Protection**
- ✅ Unauthorized access prevented
- ✅ Resource abuse controlled
- ✅ Port conflicts resolved
- ✅ Security violations handled

### **Recovery Effectiveness**
- ✅ Legitimate processes restored
- ✅ System functionality maintained
- ✅ Minimal downtime achieved
- ✅ Data integrity preserved

## Integration Points

### **With Port Manager**
- Receives conflict alerts
- Eliminates conflicting processes
- Resolves port conflicts
- Maintains port registry integrity

### **With Master Orchestration Agent**
- Receives virus detection alerts
- Eliminates malicious scripts
- Handles behavioral anomalies
- Protects system security

### **With System Security**
- Implements security protocols
- Maintains system integrity
- Provides security reporting
- Coordinates with security systems

DoctorKill is the essential security and cleanup component that ensures the ZmartBot system remains secure, stable, and free from malicious scripts and conflicting processes, working in close coordination with Port Manager and Master Orchestration Agent to maintain system integrity.
description:
globs:
alwaysApply: false
---